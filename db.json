{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane.jpg","path":"images/crane.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane2.jpg","path":"images/crane2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane3.jpg","path":"images/crane3.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane4.jpg","path":"images/crane4.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-taiji.png","path":"images/favicon-16x16-taiji.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-taiji.png","path":"images/favicon-32x32-taiji.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/jiraiya.jpg","path":"images/jiraiya.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/about-git.md","hash":"912bc3ea1a8eb42efabad27ba7f4d22320036922","modified":1629811472084},{"_id":"source/_posts/about-hexo.md","hash":"c149ff4eceb83e1eb3a2eb25018b4481aaaaea4d","modified":1637053539504},{"_id":"source/_posts/about-plan.md","hash":"ff495e2e62d93f94f17a38801b330df085d4848e","modified":1631622959609},{"_id":"source/_posts/about-list-tuple-array.md","hash":"0fe7f6200ef1cccd89e98d13a01f6f74acf5b76d","modified":1630484826148},{"_id":"source/_posts/about-matplotlib.md","hash":"8ab210ae08695772782226282d503a35ccee787b","modified":1630767353460},{"_id":"source/_posts/about-python.md","hash":"75e41e3e05b5b120f85e34c96634a06ce8a04016","modified":1630417452299},{"_id":"source/_posts/about-tensorboard.md","hash":"d2da7cde290fd931d20106d44c031d27703caac2","modified":1630984678678},{"_id":"source/_posts/about-thinking-21-9-7.md","hash":"76c1fd41686f16f196568ce2b995f4ff15890d84","modified":1637051803772},{"_id":"source/_posts/about-thinking-21-8-29.md","hash":"d0e2ca5131fb1a400f9e8ea484caf3574257970a","modified":1630333149518},{"_id":"source/_posts/hello-world.md","hash":"e77279ccee188f032078449b9a241f94b3a3cb87","modified":1629900569872},{"_id":"source/_posts/about-torch-dataenhance.md","hash":"696ce83d2f9dd394b342e4d96b5c2dc0d4a4b2b7","modified":1630985137613},{"_id":"source/_posts/make-torchdataloader-with-tfrecs.md","hash":"b57b4e664765226f92c10744d52be6e2116c1c6f","modified":1629900525140},{"_id":"source/_posts/iterator-and-generator.md","hash":"7e150114178023c0f99ddd813603d010f0f4bb1d","modified":1629900495604},{"_id":"source/tags/index.md","hash":"fb6b0b8cf04b10d2aac6c6ab8e465bfe61cbe067","modified":1629703931267},{"_id":"source/categories/index.md","hash":"e07ab52c8674b400a127ab89d2fb935494938da1","modified":1629703970612},{"_id":"source/_posts/itachi.jpg","hash":"14f2f9af2bc0b53ec1f53141273c4898f75c646b","modified":1629723107743},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1629687243020},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1629687243020},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1629687243025},{"_id":"themes/next/_config.yml","hash":"b48ad216e5ed275a4865529e97c45cfc7b18a3ed","modified":1629723979340},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1629687243026},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1629687243025},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1629687243060},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1629687243028},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1629687243034},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1629687243026},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1629687243028},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1629687243028},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1629687243028},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1629687243026},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1629687243029},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1629687243029},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1629687243029},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1629687243034},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1629687243034},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1629687243034},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1629687243034},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1629687243035},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1629687243035},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1629687243035},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1629687243035},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1629687243036},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1629687243036},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1629687243036},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1629687243036},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1629687243037},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1629687243036},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1629687243037},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1629687243037},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1629687243037},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1629687243037},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1629687243038},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1629687243038},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1629687243038},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1629687243038},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1629687243039},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1629687243059},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1629687243059},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1629687243059},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1629687243059},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1629687243059},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1629687243060},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1629687243030},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1629687243030},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1629687243031},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1629687243030},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1629687243031},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1629687243031},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1629687243033},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1629687243066},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1629687243029},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1629687243031},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1629687243033},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1629687243032},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1629687243033},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1629687243054},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1629687243055},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1629687243056},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1629687243039},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1629687243039},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1629687243040},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1629687243052},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1629687243040},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1629687243040},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1629687243043},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1629687243044},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1629687243046},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1629687243047},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1629687243047},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1629687243049},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1629687243050},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1629687243050},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1629687243060},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1629687243063},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1629687243064},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1629687243064},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1629687243065},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1629687243065},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1629687243066},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1629687243066},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1629687243066},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1629687243066},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1629687243067},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1629687243067},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1629687243067},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1629687243067},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1629687243069},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1629687243069},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1629687243069},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1629687243069},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1629687243069},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1629687243069},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1629687243070},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1629687243091},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1629687243099},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1629687243099},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629687243100},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1629687243033},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1629687243033},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1629687243101},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1629687243101},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1629687243101},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1629687243033},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1629687243102},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1629687243100},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1629687243102},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1629687243102},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629687243102},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1629687243101},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629687243102},{"_id":"themes/next/source/images/favicon-16x16-taiji.png","hash":"aa2582201f8ab617ff204678f43d304c99e1c664","modified":1629723954395},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1629687243103},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1629687243103},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1629687243103},{"_id":"themes/next/source/images/jiraiya.jpg","hash":"08f21ef4360ef35e5cf390a8e0fb3401c928650f","modified":1627974989707},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1629687243104},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1629687243105},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1629687243106},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1629687243107},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1629687243051},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1629687243051},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1629687243051},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1629687243051},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1629687243052},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1629687243052},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1629687243053},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1629687243053},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1629687243053},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1629687243054},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1629687243053},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1629687243054},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1629687243054},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1629687243054},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1629687243054},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1629687243056},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1629687243056},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1629687243057},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1629687243057},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1629687243057},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1629687243058},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1629687243058},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1629687243058},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1629687243058},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1629687243058},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1629687243040},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1629687243041},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1629687243041},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1629687243042},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1629687243042},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1629687243043},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1629687243043},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1629687243043},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1629687243043},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1629687243044},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1629687243044},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1629687243045},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1629687243045},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1629687243045},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1629687243046},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1629687243045},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1629687243045},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1629687243046},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1629687243048},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1629687243049},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1629687243049},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1629687243049},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1629687243050},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1629687243061},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1629687243061},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1629687243061},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1629687243062},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1629687243062},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1629687243062},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1629687243062},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1629687243062},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1629687243063},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1629687243063},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1629687243063},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1629687243098},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1629687243098},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1629687243098},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1629687243099},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1629687243099},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1629687243103},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1629687243106},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1629687243110},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1629687243110},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1629687243071},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1629687243070},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1629687243071},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1629687243077},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1629687243081},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1629687243081},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1629687243106},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1629687243084},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1629687243085},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1629687243086},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1629687243087},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1629687243087},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1629687243090},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1629687243091},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1629687243091},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1629687243092},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1629687243092},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1629687243093},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1629687243093},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1629687243093},{"_id":"themes/next/source/images/favicon-32x32-taiji.png","hash":"4f75f0109a64a60d418e23d913bff6a567a7369f","modified":1629723823105},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1629687243093},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1629687243093},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1629687243094},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1629687243095},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1629687243094},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1629687243095},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1629687243095},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"4b0a69dac2fadceea916f99d4dc53f04ef82998d","modified":1629709958008},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1629687243097},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1629687243098},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1629687243108},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1629687243109},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1629687243071},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1629687243071},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1629687243071},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1629687243071},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1629687243071},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1629687243072},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1629687243072},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1629687243075},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1629687243075},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1629687243075},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1629687243075},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1629687243075},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1629687243076},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1629687243097},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1629687243076},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1629687243076},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1629687243076},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1629687243076},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1629687243077},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1629687243077},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1629687243078},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1629687243077},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1629687243078},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1629687243078},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1629687243087},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1629687243079},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1629687243080},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1629687243087},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1629687243079},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1629687243078},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1629687243080},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1629687243082},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1629687243080},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1629687243083},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1629687243083},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1629687243083},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1629687243080},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1629687243079},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1629687243082},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1629687243084},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1629687243083},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1629687243083},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1629687243086},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1629687243084},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1629687243084},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1629687243086},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1629687243087},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1629687243088},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1629687243088},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1629687243090},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1629687243086},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1629687243090},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1629687243090},{"_id":"themes/next/source/images/crane.jpg","hash":"c70da733647035074964ac0e2086b9e0d98e9735","modified":1629709169567},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1629687243109},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1629687243110},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1629687243086},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1629687243090},{"_id":"themes/next/source/images/crane4.jpg","hash":"4eb50f5f21185a7db8cebcd7aec074a0f5735cb9","modified":1629710278443},{"_id":"themes/next/source/images/crane2.jpg","hash":"b78fc9a700b230eab0b8acce85089e0f9441ff29","modified":1629709225684},{"_id":"themes/next/source/images/crane3.jpg","hash":"2cadea401cbcd09c2d84f61c2281a08a32f34118","modified":1629709557684},{"_id":"public/tags/index.html","hash":"6e32d14c457314cd94a3222f67bc8e1c11d4f42d","modified":1637052916990},{"_id":"public/categories/index.html","hash":"2e66e878e5c46bf673b233cc1c4e0f7a24145929","modified":1637052916990},{"_id":"public/2021/09/14/about-plan/index.html","hash":"3b701a00daa1dfea542c3a2e7bb11b3a067950ac","modified":1637052916990},{"_id":"public/2021/09/07/about-thinking-21-9-7/index.html","hash":"a03d61ec3ae16045da4fc25a553dfc66fd541704","modified":1637052916990},{"_id":"public/2021/09/07/about-torch-dataenhance/index.html","hash":"075c91f3b6aa8b40414d841d9751b8a9ca3628af","modified":1637052916990},{"_id":"public/2021/09/05/about-tensorboard/index.html","hash":"d4fb1330667afb42a80211871677d8ae49f64268","modified":1637052916990},{"_id":"public/2021/08/31/about-python/index.html","hash":"d64068fd1e5d5720ae7bee26b68c3bf2e9aca49f","modified":1637052916990},{"_id":"public/2021/08/30/about-thinking-21-8-29/index.html","hash":"698e80408d37eae68026c3befba15f3bd27b447f","modified":1637052916990},{"_id":"public/2021/08/24/about-git/index.html","hash":"e3359c6d73e66edbee75c2b00ecd7992ed3faf90","modified":1637052916990},{"_id":"public/2021/08/23/hello-world/index.html","hash":"812898b4a9880004fda7d998c76f1b9287b8aa4a","modified":1637052916990},{"_id":"public/archives/index.html","hash":"58d8e90553c7203c515ecd9d442505c7555b7ec6","modified":1637052916990},{"_id":"public/archives/page/2/index.html","hash":"bb955300ee90b0f006f64d9041405e31773b35a4","modified":1637052916990},{"_id":"public/archives/2021/index.html","hash":"958a8089ab728052874bec3eb8bd659b257005c8","modified":1637052916990},{"_id":"public/archives/2021/page/2/index.html","hash":"637bcc759582a044fba0eeedd25b650230557ee7","modified":1637052916990},{"_id":"public/archives/2021/08/index.html","hash":"4583df97fff27341fe14e97d4ea7cb161ecc11dc","modified":1637052916990},{"_id":"public/archives/2021/09/index.html","hash":"03a46dcf9842eb6ed0bd0d972e22cd25f878b362","modified":1637052916990},{"_id":"public/categories/学习/index.html","hash":"c38b04c5664d095415dd041d9fb5812230f8bc1e","modified":1637052916990},{"_id":"public/categories/学习/coding/index.html","hash":"a31d14f4ece3e5df938591d4262fa9e6fc6ef87b","modified":1637052916990},{"_id":"public/categories/生活/index.html","hash":"e75e323335f607dd82340517a31df2820658788b","modified":1637052916990},{"_id":"public/categories/生活/感悟/index.html","hash":"3024a6440a0fbafa23f2021fddf8f3544a0040a2","modified":1637052916990},{"_id":"public/tags/git/index.html","hash":"2cd1efaf7a718f2877d9f0003e811b7991ba63d1","modified":1637052916990},{"_id":"public/tags/github/index.html","hash":"f32380c2781bc475823e315220ad6eecdea43140","modified":1637052916990},{"_id":"public/tags/Hexo/index.html","hash":"9ced4da5df232f64f6a4e1e3486388881b7609b4","modified":1637052916990},{"_id":"public/tags/Next/index.html","hash":"d3850b56f34b99d8ee8d1fffeec0eaacfb395b9c","modified":1637052916990},{"_id":"public/tags/python/index.html","hash":"576ee3c38a9955ecbdde77e697c7eb95dacc1b58","modified":1637052916990},{"_id":"public/tags/tuple/index.html","hash":"7127ca87fbd8df699db272aac6c7b4109f0fd68b","modified":1637052916990},{"_id":"public/tags/list/index.html","hash":"d69154108e8f4167b00e2a70b32c2e2c2bc7de69","modified":1637052916990},{"_id":"public/tags/ndarray/index.html","hash":"a3c5ca0dbc111f97b406d4231544f1dc2b61935a","modified":1637052916990},{"_id":"public/tags/numpy/index.html","hash":"01fb09e225438c814ba73ede7169ea2693f6a8cf","modified":1637052916990},{"_id":"public/tags/matplotlib/index.html","hash":"2762c5cfde9d589d3465ead5b11bc21f8572bdb6","modified":1637052916990},{"_id":"public/tags/tensorboard/index.html","hash":"7610492f41ccf6e4b7b187740978f5fd8953f6b8","modified":1637052916990},{"_id":"public/tags/pytorch/index.html","hash":"afffa5f12cf09b8dd9765165bc06381221ea6607","modified":1637052916990},{"_id":"public/tags/tensorflow/index.html","hash":"3dffcb5c6eddf02dbe14b0ca688f3dab23feba98","modified":1637052916990},{"_id":"public/tags/tfrecords/index.html","hash":"20d881d49afe323b7ed566d375942964228173c8","modified":1637052916990},{"_id":"public/tags/dataloader/index.html","hash":"5f1637516e30dfc251688804c918159aa9423d49","modified":1637052916990},{"_id":"public/tags/iterator/index.html","hash":"f222f5afc4a6011532337d637ea5d0d042d4f04d","modified":1637052916990},{"_id":"public/tags/torch/index.html","hash":"f9aef3ff259fe293f313ed89434d5de707932815","modified":1637052916990},{"_id":"public/tags/dataenhance/index.html","hash":"cbe728a90e766d2f8970f4c66f3ea63d1e81e344","modified":1637052916990},{"_id":"public/2021/08/31/about-matplotlib/index.html","hash":"6e3e1d583ca7d1b840399451e4693e7ab03958e4","modified":1637052916990},{"_id":"public/2021/08/31/about-list-tuple-array/index.html","hash":"65cf76d44abcaa7f531446f8190d1927478ee02b","modified":1637052916990},{"_id":"public/2021/08/25/make-torchdataloader-with-tfrecs/index.html","hash":"b5f1081a114f4915e076fbdd6d1ca8cc28791bca","modified":1637052916990},{"_id":"public/2021/08/25/iterator-and-generator/index.html","hash":"76b17d4e95ccb32c0b6dbe9d70e2a9c8ea43b0e7","modified":1637052916990},{"_id":"public/2021/08/23/about-hexo/index.html","hash":"1acdbab87d198c50d2b1d8071e4ab2fdd62ebcbd","modified":1637053553967},{"_id":"public/index.html","hash":"157d830531b57acae5604bd1b59bb127466559cf","modified":1637052916990},{"_id":"public/page/2/index.html","hash":"aa52ea3590e4c9453caaeaefeeb6ff02dd093f92","modified":1637053553967},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1637052916990},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637052916990},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637052916990},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1637052916990},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1637052916990},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1637052916990},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1637052916990},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1637052916990},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1637052916990},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1637052916990},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637052916990},{"_id":"public/images/favicon-16x16-taiji.png","hash":"aa2582201f8ab617ff204678f43d304c99e1c664","modified":1637052916990},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637052916990},{"_id":"public/images/favicon-32x32-taiji.png","hash":"4f75f0109a64a60d418e23d913bff6a567a7369f","modified":1637052916990},{"_id":"public/images/jiraiya.jpg","hash":"08f21ef4360ef35e5cf390a8e0fb3401c928650f","modified":1637052916990},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1637052916990},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637052916990},{"_id":"public/images/crane.jpg","hash":"c70da733647035074964ac0e2086b9e0d98e9735","modified":1637052916990},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637052916990},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637052916990},{"_id":"public/images/crane4.jpg","hash":"4eb50f5f21185a7db8cebcd7aec074a0f5735cb9","modified":1637052916990},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637052916990},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637052916990},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637052916990},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637052916990},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637052916990},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637052916990},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637052916990},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637052916990},{"_id":"public/css/main.css","hash":"441ed33a8be401f6050aec2c0b883d6673bc7c2f","modified":1637052916990},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637052916990},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637052916990},{"_id":"public/images/crane2.jpg","hash":"b78fc9a700b230eab0b8acce85089e0f9441ff29","modified":1637052916990},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637052916990},{"_id":"public/images/crane3.jpg","hash":"2cadea401cbcd09c2d84f61c2281a08a32f34118","modified":1637052916990},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637052916990},{"_id":"source/_posts/about-hexo/itachi.jpg","hash":"14f2f9af2bc0b53ec1f53141273c4898f75c646b","modified":1637053276534},{"_id":"public/2021/08/23/about-hexo/itachi.jpg","hash":"14f2f9af2bc0b53ec1f53141273c4898f75c646b","modified":1637053303711}],"Category":[{"name":"学习","_id":"ckw1v1f7a0006iotw6iwhd9jx"},{"name":"coding","parent":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7h000jiotwbbgherg4"},{"name":"生活","_id":"ckw1v1f7o0014iotw4xp499ar"},{"name":"感悟","parent":"ckw1v1f7o0014iotw4xp499ar","_id":"ckw1v1f7q001iiotwfhoae90h"}],"Data":[],"Page":[{"title":"标签","date":"2021-08-23T07:30:36.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-08-23 15:30:36\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-08-23T07:32:11.267Z","path":"tags/index.html","layout":"page","_id":"ckw1v1f720000iotw3qj1b1ji","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2021-08-23T07:30:16.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-08-23 15:30:16\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-08-23T07:32:50.612Z","path":"categories/index.html","layout":"page","_id":"ckw1v1f770002iotwdzcu5wtp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"git相关知识","date":"2021-08-23T16:00:00.000Z","_content":"\n记录学习git的一些问题\n<!-- more -->\n\n###  1 工作区、暂存区、版本库\n基本概念：\n- **工作区**：PC中的目录\n- **暂存区**：称为stage或index，一般存放在`.git`目录下的index文件中，故也称其为索引\n- **版本库**：工作区的隐藏文件`.git`不算工作区而是版本库\n&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。\n\n### 2 Git基本操作\n预先说明，几个库：*workspace*, *staging area*, *local repository*, *remote reposity*\n- **git pull**：*remote reposity* ->*workspace* \n- **git add**：*workspace*->*staging area*\n- **git commit**：*staging area*->*local repository*\n- **git push**：*local repository*->*remote reposity*\n- git fetch/clone：*remote reposity*->*local repository*\n- git checkout：*local repository*->*workspace*\n- git reset：回退版本\n- git rm：删除工作区文件\n\n远程操作\n- **git remote**\n添加远程库：`git remote add [shortname] [url]`这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。\n更改仓库名：`git remote rename old_name new_name`\n- **git pull**\n从远程获取并合并在本地： `git pull <远程主机名> <远程分支名>:<本地分支名>`当与本地的当前分支合并时可以省略本地分支名。\n其等价于 `git fech`和 `git merge`\n- **git push**\n上传本地分支版本至远程并合并：`git push <远程主机名> <本地分支名>:<远程分支名>`\n如果本地分支名与远程分支名相同，则可以省略冒号 `git push <远程主机名> <本地分支名>`\n\n### 3 git 分支管理\n此部分为git最有特点的一部分...","source":"_posts/about-git.md","raw":"---\nlayout: \ntitle: git相关知识\ndate: 2021-08-24\ntags:\n- git\n- github\ncategories:\n- [学习, coding]\n---\n\n记录学习git的一些问题\n<!-- more -->\n\n###  1 工作区、暂存区、版本库\n基本概念：\n- **工作区**：PC中的目录\n- **暂存区**：称为stage或index，一般存放在`.git`目录下的index文件中，故也称其为索引\n- **版本库**：工作区的隐藏文件`.git`不算工作区而是版本库\n&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。\n\n### 2 Git基本操作\n预先说明，几个库：*workspace*, *staging area*, *local repository*, *remote reposity*\n- **git pull**：*remote reposity* ->*workspace* \n- **git add**：*workspace*->*staging area*\n- **git commit**：*staging area*->*local repository*\n- **git push**：*local repository*->*remote reposity*\n- git fetch/clone：*remote reposity*->*local repository*\n- git checkout：*local repository*->*workspace*\n- git reset：回退版本\n- git rm：删除工作区文件\n\n远程操作\n- **git remote**\n添加远程库：`git remote add [shortname] [url]`这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。\n更改仓库名：`git remote rename old_name new_name`\n- **git pull**\n从远程获取并合并在本地： `git pull <远程主机名> <远程分支名>:<本地分支名>`当与本地的当前分支合并时可以省略本地分支名。\n其等价于 `git fech`和 `git merge`\n- **git push**\n上传本地分支版本至远程并合并：`git push <远程主机名> <本地分支名>:<远程分支名>`\n如果本地分支名与远程分支名相同，则可以省略冒号 `git push <远程主机名> <本地分支名>`\n\n### 3 git 分支管理\n此部分为git最有特点的一部分...","slug":"about-git","published":1,"updated":"2021-08-24T13:24:32.084Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f750001iotw66s84adk","content":"<p>记录学习git的一些问题</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-工作区、暂存区、版本库\"><a href=\"#1-工作区、暂存区、版本库\" class=\"headerlink\" title=\"1 工作区、暂存区、版本库\"></a>1 工作区、暂存区、版本库</h3><p>基本概念：</p>\n<ul>\n<li><strong>工作区</strong>：PC中的目录</li>\n<li><strong>暂存区</strong>：称为stage或index，一般存放在<code>.git</code>目录下的index文件中，故也称其为索引</li>\n<li><strong>版本库</strong>：工作区的隐藏文件<code>.git</code>不算工作区而是版本库<br>&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。</li>\n</ul>\n<h3 id=\"2-Git基本操作\"><a href=\"#2-Git基本操作\" class=\"headerlink\" title=\"2 Git基本操作\"></a>2 Git基本操作</h3><p>预先说明，几个库：<em>workspace</em>, <em>staging area</em>, <em>local repository</em>, <em>remote reposity</em></p>\n<ul>\n<li><strong>git pull</strong>：<em>remote reposity</em> -&gt;<em>workspace</em> </li>\n<li><strong>git add</strong>：<em>workspace</em>-&gt;<em>staging area</em></li>\n<li><strong>git commit</strong>：<em>staging area</em>-&gt;<em>local repository</em></li>\n<li><strong>git push</strong>：<em>local repository</em>-&gt;<em>remote reposity</em></li>\n<li>git fetch/clone：<em>remote reposity</em>-&gt;<em>local repository</em></li>\n<li>git checkout：<em>local repository</em>-&gt;<em>workspace</em></li>\n<li>git reset：回退版本</li>\n<li>git rm：删除工作区文件</li>\n</ul>\n<p>远程操作</p>\n<ul>\n<li><strong>git remote</strong><br>添加远程库：<code>git remote add [shortname] [url]</code>这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。<br>更改仓库名：<code>git remote rename old_name new_name</code></li>\n<li><strong>git pull</strong><br>从远程获取并合并在本地： <code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code>当与本地的当前分支合并时可以省略本地分支名。<br>其等价于 <code>git fech</code>和 <code>git merge</code></li>\n<li><strong>git push</strong><br>上传本地分支版本至远程并合并：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code><br>如果本地分支名与远程分支名相同，则可以省略冒号 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code></li>\n</ul>\n<h3 id=\"3-git-分支管理\"><a href=\"#3-git-分支管理\" class=\"headerlink\" title=\"3 git 分支管理\"></a>3 git 分支管理</h3><p>此部分为git最有特点的一部分…</p>\n","site":{"data":{}},"excerpt":"<p>记录学习git的一些问题</p>","more":"<h3 id=\"1-工作区、暂存区、版本库\"><a href=\"#1-工作区、暂存区、版本库\" class=\"headerlink\" title=\"1 工作区、暂存区、版本库\"></a>1 工作区、暂存区、版本库</h3><p>基本概念：</p>\n<ul>\n<li><strong>工作区</strong>：PC中的目录</li>\n<li><strong>暂存区</strong>：称为stage或index，一般存放在<code>.git</code>目录下的index文件中，故也称其为索引</li>\n<li><strong>版本库</strong>：工作区的隐藏文件<code>.git</code>不算工作区而是版本库<br>&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。</li>\n</ul>\n<h3 id=\"2-Git基本操作\"><a href=\"#2-Git基本操作\" class=\"headerlink\" title=\"2 Git基本操作\"></a>2 Git基本操作</h3><p>预先说明，几个库：<em>workspace</em>, <em>staging area</em>, <em>local repository</em>, <em>remote reposity</em></p>\n<ul>\n<li><strong>git pull</strong>：<em>remote reposity</em> -&gt;<em>workspace</em> </li>\n<li><strong>git add</strong>：<em>workspace</em>-&gt;<em>staging area</em></li>\n<li><strong>git commit</strong>：<em>staging area</em>-&gt;<em>local repository</em></li>\n<li><strong>git push</strong>：<em>local repository</em>-&gt;<em>remote reposity</em></li>\n<li>git fetch/clone：<em>remote reposity</em>-&gt;<em>local repository</em></li>\n<li>git checkout：<em>local repository</em>-&gt;<em>workspace</em></li>\n<li>git reset：回退版本</li>\n<li>git rm：删除工作区文件</li>\n</ul>\n<p>远程操作</p>\n<ul>\n<li><strong>git remote</strong><br>添加远程库：<code>git remote add [shortname] [url]</code>这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。<br>更改仓库名：<code>git remote rename old_name new_name</code></li>\n<li><strong>git pull</strong><br>从远程获取并合并在本地： <code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code>当与本地的当前分支合并时可以省略本地分支名。<br>其等价于 <code>git fech</code>和 <code>git merge</code></li>\n<li><strong>git push</strong><br>上传本地分支版本至远程并合并：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code><br>如果本地分支名与远程分支名相同，则可以省略冒号 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code></li>\n</ul>\n<h3 id=\"3-git-分支管理\"><a href=\"#3-git-分支管理\" class=\"headerlink\" title=\"3 git 分支管理\"></a>3 git 分支管理</h3><p>此部分为git最有特点的一部分…</p>"},{"layout":"post","title":"Hexo Next 搭建博客相关","date":"2021-08-23T03:25:13.000Z","_content":"\n&emsp;&emsp;![](itachi.jpg)\n\n记录学习Hexo和Next搭建个人博客中的一些问题\n<!-- more -->\n> <center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n### 1 Hexo与Next的安装\n&emsp;&emsp;此部分有很多教程，包括 [Hexo官方文档](https://hexo.io/zh-cn/docs/index.html)和[Next官方文档](https://theme-next.iissnan.com/getting-started.html)，完成安装并将其部署至github.io中即可。\n### 2 玩转Next\n&emsp;&emsp;此部分主要介绍如何丰富Next的设置。\n#### 2.1 主题设置\n&emsp;&emsp;在部署blog的文件夹内找到 `\\themes\\next\\_config.yml` 文件，在其中找到 `# Schemes` 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。\n```\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n\n# Dark Mode\ndarkmode: false\n```\n#### 2.2 个人栏(sidebar)设置\n&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 `_config.yml` 文件中更改一些基本信息，包括博客名称与描述等\n```\n# Site\ntitle: wanderland\nsubtitle: ''\ndescription: 谦虚 学习 坚忍\nkeywords:\nauthor: Shi\nlanguage: zh-CN\ntimezone: ''\n```\n&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：\n`themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl`，在siber的style中添加需要设置的背景图位置和加载方式\n\n```\n.sidebar {\n  background:url(/images/crane4.jpg);\t\n  background-size: cover;\n  background-position:center;\n  background-repeat:no-repeat;\n  width: $sidebar-desktop;\n  z-index: $zindex-2;\n  the-transition-ease-out();\n  ......\n  }\n```\n图片存放位置是 `themes\\next\\source\\image\\` .\n\n### 3 撰写博文\n&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为`\\source\\_post`。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 [链接](https://markdown.com.cn/basic-syntax/).\n&emsp;&emsp;新建博文使用语法`hexo new [layout] title`. \n&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文\n\n```\n---\nlayout: \ntitle: Hexo Next 搭建博客相关\ndate: 2021-08-23 11:25:13\ntags:\n- Hexo\n- Next\ncategories:\n- [学习, coding]\n---\n```\n&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。\n\n### Git相关\n&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” `hexo clean`(这个有时候可以不要)，`hexo g`(generate) `hexo d`(deploy).\n&emsp;&emsp;此时同步源码则是在根目录下git push\n\n### TODO LIST\n*关于前端或者blog相关*\n- 继续学习和深入了解next相关\n- 关于撰写博客的细节\n- 学习git相关操作，主要是协作方面\n- 学习js，继续网站开发\n","source":"_posts/about-hexo.md","raw":"---\nlayout: \ntitle: Hexo Next 搭建博客相关\ndate: 2021-08-23 11:25:13\ntags:\n- Hexo\n- Next\ncategories:\n- [学习, coding]\n---\n\n&emsp;&emsp;![](itachi.jpg)\n\n记录学习Hexo和Next搭建个人博客中的一些问题\n<!-- more -->\n> <center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n### 1 Hexo与Next的安装\n&emsp;&emsp;此部分有很多教程，包括 [Hexo官方文档](https://hexo.io/zh-cn/docs/index.html)和[Next官方文档](https://theme-next.iissnan.com/getting-started.html)，完成安装并将其部署至github.io中即可。\n### 2 玩转Next\n&emsp;&emsp;此部分主要介绍如何丰富Next的设置。\n#### 2.1 主题设置\n&emsp;&emsp;在部署blog的文件夹内找到 `\\themes\\next\\_config.yml` 文件，在其中找到 `# Schemes` 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。\n```\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n\n# Dark Mode\ndarkmode: false\n```\n#### 2.2 个人栏(sidebar)设置\n&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 `_config.yml` 文件中更改一些基本信息，包括博客名称与描述等\n```\n# Site\ntitle: wanderland\nsubtitle: ''\ndescription: 谦虚 学习 坚忍\nkeywords:\nauthor: Shi\nlanguage: zh-CN\ntimezone: ''\n```\n&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：\n`themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl`，在siber的style中添加需要设置的背景图位置和加载方式\n\n```\n.sidebar {\n  background:url(/images/crane4.jpg);\t\n  background-size: cover;\n  background-position:center;\n  background-repeat:no-repeat;\n  width: $sidebar-desktop;\n  z-index: $zindex-2;\n  the-transition-ease-out();\n  ......\n  }\n```\n图片存放位置是 `themes\\next\\source\\image\\` .\n\n### 3 撰写博文\n&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为`\\source\\_post`。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 [链接](https://markdown.com.cn/basic-syntax/).\n&emsp;&emsp;新建博文使用语法`hexo new [layout] title`. \n&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文\n\n```\n---\nlayout: \ntitle: Hexo Next 搭建博客相关\ndate: 2021-08-23 11:25:13\ntags:\n- Hexo\n- Next\ncategories:\n- [学习, coding]\n---\n```\n&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。\n\n### Git相关\n&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” `hexo clean`(这个有时候可以不要)，`hexo g`(generate) `hexo d`(deploy).\n&emsp;&emsp;此时同步源码则是在根目录下git push\n\n### TODO LIST\n*关于前端或者blog相关*\n- 继续学习和深入了解next相关\n- 关于撰写博客的细节\n- 学习git相关操作，主要是协作方面\n- 学习js，继续网站开发\n","slug":"about-hexo","published":1,"updated":"2021-11-16T09:05:39.504Z","_id":"ckw1v1f770003iotwgqz75y89","comments":1,"photos":[],"link":"","content":"<p>&emsp;&emsp;<img src=\"itachi.jpg\"></p>\n<p>记录学习Hexo和Next搭建个人博客中的一些问题</p>\n<span id=\"more\"></span>\n<blockquote>\n<center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n</blockquote>\n<h3 id=\"1-Hexo与Next的安装\"><a href=\"#1-Hexo与Next的安装\" class=\"headerlink\" title=\"1 Hexo与Next的安装\"></a>1 Hexo与Next的安装</h3><p>&emsp;&emsp;此部分有很多教程，包括 <a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo官方文档</a>和<a href=\"https://theme-next.iissnan.com/getting-started.html\">Next官方文档</a>，完成安装并将其部署至github.io中即可。</p>\n<h3 id=\"2-玩转Next\"><a href=\"#2-玩转Next\" class=\"headerlink\" title=\"2 玩转Next\"></a>2 玩转Next</h3><p>&emsp;&emsp;此部分主要介绍如何丰富Next的设置。</p>\n<h4 id=\"2-1-主题设置\"><a href=\"#2-1-主题设置\" class=\"headerlink\" title=\"2.1 主题设置\"></a>2.1 主题设置</h4><p>&emsp;&emsp;在部署blog的文件夹内找到 <code>\\themes\\next\\_config.yml</code> 文件，在其中找到 <code># Schemes</code> 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">scheme: Mist</span><br><span class=\"line\">#scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br><span class=\"line\"></span><br><span class=\"line\"># Dark Mode</span><br><span class=\"line\">darkmode: false</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-个人栏-sidebar-设置\"><a href=\"#2-2-个人栏-sidebar-设置\" class=\"headerlink\" title=\"2.2 个人栏(sidebar)设置\"></a>2.2 个人栏(sidebar)设置</h4><p>&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 <code>_config.yml</code> 文件中更改一些基本信息，包括博客名称与描述等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: wanderland</span><br><span class=\"line\">subtitle: &#x27;&#x27;</span><br><span class=\"line\">description: 谦虚 学习 坚忍</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Shi</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：<br><code>themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl</code>，在siber的style中添加需要设置的背景图位置和加载方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sidebar &#123;</span><br><span class=\"line\">  background:url(/images/crane4.jpg);\t</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  background-position:center;</span><br><span class=\"line\">  background-repeat:no-repeat;</span><br><span class=\"line\">  width: $sidebar-desktop;</span><br><span class=\"line\">  z-index: $zindex-2;</span><br><span class=\"line\">  the-transition-ease-out();</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>图片存放位置是 <code>themes\\next\\source\\image\\</code> .</p>\n<h3 id=\"3-撰写博文\"><a href=\"#3-撰写博文\" class=\"headerlink\" title=\"3 撰写博文\"></a>3 撰写博文</h3><p>&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为<code>\\source\\_post</code>。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 <a href=\"https://markdown.com.cn/basic-syntax/\">链接</a>.<br>&emsp;&emsp;新建博文使用语法<code>hexo new [layout] title</code>.<br>&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: </span><br><span class=\"line\">title: Hexo Next 搭建博客相关</span><br><span class=\"line\">date: 2021-08-23 11:25:13</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- Next</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- [学习, coding]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。</p>\n<h3 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h3><p>&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” <code>hexo clean</code>(这个有时候可以不要)，<code>hexo g</code>(generate) <code>hexo d</code>(deploy).<br>&emsp;&emsp;此时同步源码则是在根目录下git push</p>\n<h3 id=\"TODO-LIST\"><a href=\"#TODO-LIST\" class=\"headerlink\" title=\"TODO LIST\"></a>TODO LIST</h3><p><em>关于前端或者blog相关</em></p>\n<ul>\n<li>继续学习和深入了解next相关</li>\n<li>关于撰写博客的细节</li>\n<li>学习git相关操作，主要是协作方面</li>\n<li>学习js，继续网站开发</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;<img src=\"itachi.jpg\"></p>\n<p>记录学习Hexo和Next搭建个人博客中的一些问题</p>","more":"<blockquote>\n<center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n</blockquote>\n<h3 id=\"1-Hexo与Next的安装\"><a href=\"#1-Hexo与Next的安装\" class=\"headerlink\" title=\"1 Hexo与Next的安装\"></a>1 Hexo与Next的安装</h3><p>&emsp;&emsp;此部分有很多教程，包括 <a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo官方文档</a>和<a href=\"https://theme-next.iissnan.com/getting-started.html\">Next官方文档</a>，完成安装并将其部署至github.io中即可。</p>\n<h3 id=\"2-玩转Next\"><a href=\"#2-玩转Next\" class=\"headerlink\" title=\"2 玩转Next\"></a>2 玩转Next</h3><p>&emsp;&emsp;此部分主要介绍如何丰富Next的设置。</p>\n<h4 id=\"2-1-主题设置\"><a href=\"#2-1-主题设置\" class=\"headerlink\" title=\"2.1 主题设置\"></a>2.1 主题设置</h4><p>&emsp;&emsp;在部署blog的文件夹内找到 <code>\\themes\\next\\_config.yml</code> 文件，在其中找到 <code># Schemes</code> 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">scheme: Mist</span><br><span class=\"line\">#scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br><span class=\"line\"></span><br><span class=\"line\"># Dark Mode</span><br><span class=\"line\">darkmode: false</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-个人栏-sidebar-设置\"><a href=\"#2-2-个人栏-sidebar-设置\" class=\"headerlink\" title=\"2.2 个人栏(sidebar)设置\"></a>2.2 个人栏(sidebar)设置</h4><p>&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 <code>_config.yml</code> 文件中更改一些基本信息，包括博客名称与描述等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: wanderland</span><br><span class=\"line\">subtitle: &#x27;&#x27;</span><br><span class=\"line\">description: 谦虚 学习 坚忍</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Shi</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：<br><code>themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl</code>，在siber的style中添加需要设置的背景图位置和加载方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sidebar &#123;</span><br><span class=\"line\">  background:url(/images/crane4.jpg);\t</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  background-position:center;</span><br><span class=\"line\">  background-repeat:no-repeat;</span><br><span class=\"line\">  width: $sidebar-desktop;</span><br><span class=\"line\">  z-index: $zindex-2;</span><br><span class=\"line\">  the-transition-ease-out();</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>图片存放位置是 <code>themes\\next\\source\\image\\</code> .</p>\n<h3 id=\"3-撰写博文\"><a href=\"#3-撰写博文\" class=\"headerlink\" title=\"3 撰写博文\"></a>3 撰写博文</h3><p>&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为<code>\\source\\_post</code>。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 <a href=\"https://markdown.com.cn/basic-syntax/\">链接</a>.<br>&emsp;&emsp;新建博文使用语法<code>hexo new [layout] title</code>.<br>&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: </span><br><span class=\"line\">title: Hexo Next 搭建博客相关</span><br><span class=\"line\">date: 2021-08-23 11:25:13</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- Next</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- [学习, coding]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。</p>\n<h3 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h3><p>&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” <code>hexo clean</code>(这个有时候可以不要)，<code>hexo g</code>(generate) <code>hexo d</code>(deploy).<br>&emsp;&emsp;此时同步源码则是在根目录下git push</p>\n<h3 id=\"TODO-LIST\"><a href=\"#TODO-LIST\" class=\"headerlink\" title=\"TODO LIST\"></a>TODO LIST</h3><p><em>关于前端或者blog相关</em></p>\n<ul>\n<li>继续学习和深入了解next相关</li>\n<li>关于撰写博客的细节</li>\n<li>学习git相关操作，主要是协作方面</li>\n<li>学习js，继续网站开发</li>\n</ul>"},{"layout":"post","title":"数组杂谈","date":"2021-08-31T01:45:41.000Z","_content":"\npython以及pytorch中许多都会涉及到数组或者列表，需加以区分。\n<!-- more -->\n### 总述\n常用数据结构包括**元组** **列表** **字典** **集合**等，这些属于内建函数，而numpy的数组**ndarray**也是在机器学习中常用的，下面会记录较为重要的**元组** **列表** **数组**\n\n### 元组\n元组是一种固定长度，不可变的对象序列。\n- `tuple()`将任意序列或者迭代器转换为元组\n```\nIn []: tuple([4, 0, 2])\nOut[]: (4, 0, 2)\n```\n\n- 用`+`号或者`*`号来链接元组\n```\nIn []: (4, None, 'foo') + (6, 0)\nOut[]: (4, None, 'foo', 6, 2)\n\nIn []: (4, 0, 2) * 2\nOut[]: (4, 0, 2, 4, 0, 2)\n```\n\n- 由于元组的内容与长度无法改变，因此实例方法较少。常见的有`count`方法，作用是计算某个数值在元组中出现的次数\n```\nIn []: a = (4, 2, 0, 2, 2)\nIn []: a.count(2)\nOut[]: 3\n```\n\n- 使用[i]索引获取元组指定位置i的对象\n\n### 列表\n与元组不同，列表长度可变，内容可修改。\n\n- 使用中括号[]或者list类型来定义列表\n```\nIn []:a_list = [2, 3, None]\nIn []:tup = 2, 3, None\nIn []:b_list = list(tup)\n```\n\n- 函数用法和tuple相似\n- 可以将迭代器或者生成器变为列表\n```\nIn []: gen = range(10)\nIn []: list(gen)\nOut[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n- 元素的增添或移除\n\t-- `.append()`将元素添加到列表尾部\n\t-- `.insert(loc, obj)`在loc位置添加obj\n\t-- `.remove()`移除第一个符合要求的值\n\t-- `.pop()`将特定元素移除并返回\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.append(5)\nOut[]: [1, 2, 3, 4, 5]\nIn []: a.insert(1, 999)\nOut[]: [1, 999, 2, 3, 4, 5]\n```\n\n- 列表的链接和移除\n\t-- 与元组类似，两个列表之间使用+号连接\n\t-- 若有已经定义的数据集，可以用extend向该列表添加元素\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.extend(['foo', None, (1,2)])\nIn []: a\nOut[]: [1, 2, 3, 4, 'foo', None, (1,2)]\n```\n\n- 排序 sort\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a.sort()\nIn []: a\nOut[]: [1, 2, 3, 4]\n```\nsort函数会有二级排序key\n```\nIn []: a = ['a', 'asd', 'asdf', 'as']\nIn []: a.sort(key=len)\nIn []: a\nOut[]: ['a', 'as', 'asd', 'asdf']\n```\n\n- 切片start包含，stop不包含\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a[-1:0]\nOut[]: [4]\nIn []: a[::2] #步长\nOut[]: [2,1]\nIn []: a[::-1] #相当于翻转\nOut[]: [4, 1, 2, 3]\n```\n\n### ndarray\nimport numpy as np\nnumpy方法比python内建方法快速、占用内存小，用C语言写成。\n较为重要的通用属性：shape属性表征*每一维度的数量*，ndim属性描述*数组的维数*，dtype属性描述*数组的数据类型*。\n- 生成ndarray\n\t-- 使用array函数\n```\nIn []: data_a = [1, 2, 3, 4]\nIn []: ary_a = np.array(data_a)\nIn []: a\nOut[]: array([[1, 2, 3, 4]])\n```\n\t-- 使用`np.zeros(num)`可以生成num数量够的全0数组，`np.ones(num)`同理。\n\t-- `np.arange()`为内建函数的range数组版\n\t默认类型为float64.\n- ndarray的数据类型\n使用astype方法显式转换数组\n```\nIn []: arr = np.array([1, 2, 3, 4])\nIn []: arr.dtype\nOut[]: dtype('int64')\nIn []: float_arr = arr.astype(np.float64)\nIn []: float_arr.dtype\nOut[]: dtype('float64')\n```\n- 基础切片与索引与列表同\n- 数组转置和换轴\n\t-- **transpose**方法\n\t-- **T**属性（转置）\n- 一元与二元通用函数：对数组每个元素进行计算","source":"_posts/about-list-tuple-array.md","raw":"---\nlayout: \ntitle: 数组杂谈\ndate: 2021-08-31 09:45:41\ntags:\n- python\n- tuple\n- list\n- ndarray\n- numpy\ncategories:\n- [学习, coding]\n---\n\npython以及pytorch中许多都会涉及到数组或者列表，需加以区分。\n<!-- more -->\n### 总述\n常用数据结构包括**元组** **列表** **字典** **集合**等，这些属于内建函数，而numpy的数组**ndarray**也是在机器学习中常用的，下面会记录较为重要的**元组** **列表** **数组**\n\n### 元组\n元组是一种固定长度，不可变的对象序列。\n- `tuple()`将任意序列或者迭代器转换为元组\n```\nIn []: tuple([4, 0, 2])\nOut[]: (4, 0, 2)\n```\n\n- 用`+`号或者`*`号来链接元组\n```\nIn []: (4, None, 'foo') + (6, 0)\nOut[]: (4, None, 'foo', 6, 2)\n\nIn []: (4, 0, 2) * 2\nOut[]: (4, 0, 2, 4, 0, 2)\n```\n\n- 由于元组的内容与长度无法改变，因此实例方法较少。常见的有`count`方法，作用是计算某个数值在元组中出现的次数\n```\nIn []: a = (4, 2, 0, 2, 2)\nIn []: a.count(2)\nOut[]: 3\n```\n\n- 使用[i]索引获取元组指定位置i的对象\n\n### 列表\n与元组不同，列表长度可变，内容可修改。\n\n- 使用中括号[]或者list类型来定义列表\n```\nIn []:a_list = [2, 3, None]\nIn []:tup = 2, 3, None\nIn []:b_list = list(tup)\n```\n\n- 函数用法和tuple相似\n- 可以将迭代器或者生成器变为列表\n```\nIn []: gen = range(10)\nIn []: list(gen)\nOut[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n- 元素的增添或移除\n\t-- `.append()`将元素添加到列表尾部\n\t-- `.insert(loc, obj)`在loc位置添加obj\n\t-- `.remove()`移除第一个符合要求的值\n\t-- `.pop()`将特定元素移除并返回\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.append(5)\nOut[]: [1, 2, 3, 4, 5]\nIn []: a.insert(1, 999)\nOut[]: [1, 999, 2, 3, 4, 5]\n```\n\n- 列表的链接和移除\n\t-- 与元组类似，两个列表之间使用+号连接\n\t-- 若有已经定义的数据集，可以用extend向该列表添加元素\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.extend(['foo', None, (1,2)])\nIn []: a\nOut[]: [1, 2, 3, 4, 'foo', None, (1,2)]\n```\n\n- 排序 sort\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a.sort()\nIn []: a\nOut[]: [1, 2, 3, 4]\n```\nsort函数会有二级排序key\n```\nIn []: a = ['a', 'asd', 'asdf', 'as']\nIn []: a.sort(key=len)\nIn []: a\nOut[]: ['a', 'as', 'asd', 'asdf']\n```\n\n- 切片start包含，stop不包含\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a[-1:0]\nOut[]: [4]\nIn []: a[::2] #步长\nOut[]: [2,1]\nIn []: a[::-1] #相当于翻转\nOut[]: [4, 1, 2, 3]\n```\n\n### ndarray\nimport numpy as np\nnumpy方法比python内建方法快速、占用内存小，用C语言写成。\n较为重要的通用属性：shape属性表征*每一维度的数量*，ndim属性描述*数组的维数*，dtype属性描述*数组的数据类型*。\n- 生成ndarray\n\t-- 使用array函数\n```\nIn []: data_a = [1, 2, 3, 4]\nIn []: ary_a = np.array(data_a)\nIn []: a\nOut[]: array([[1, 2, 3, 4]])\n```\n\t-- 使用`np.zeros(num)`可以生成num数量够的全0数组，`np.ones(num)`同理。\n\t-- `np.arange()`为内建函数的range数组版\n\t默认类型为float64.\n- ndarray的数据类型\n使用astype方法显式转换数组\n```\nIn []: arr = np.array([1, 2, 3, 4])\nIn []: arr.dtype\nOut[]: dtype('int64')\nIn []: float_arr = arr.astype(np.float64)\nIn []: float_arr.dtype\nOut[]: dtype('float64')\n```\n- 基础切片与索引与列表同\n- 数组转置和换轴\n\t-- **transpose**方法\n\t-- **T**属性（转置）\n- 一元与二元通用函数：对数组每个元素进行计算","slug":"about-list-tuple-array","published":1,"updated":"2021-09-01T08:27:06.148Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f790005iotw0zymadja","content":"<p>python以及pytorch中许多都会涉及到数组或者列表，需加以区分。</p>\n<span id=\"more\"></span>\n<h3 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h3><p>常用数据结构包括<strong>元组</strong> <strong>列表</strong> <strong>字典</strong> <strong>集合</strong>等，这些属于内建函数，而numpy的数组<strong>ndarray</strong>也是在机器学习中常用的，下面会记录较为重要的<strong>元组</strong> <strong>列表</strong> <strong>数组</strong></p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>元组是一种固定长度，不可变的对象序列。</p>\n<ul>\n<li><p><code>tuple()</code>将任意序列或者迭代器转换为元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: tuple([4, 0, 2])</span><br><span class=\"line\">Out[]: (4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>用<code>+</code>号或者<code>*</code>号来链接元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: (4, None, &#x27;foo&#x27;) + (6, 0)</span><br><span class=\"line\">Out[]: (4, None, &#x27;foo&#x27;, 6, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">In []: (4, 0, 2) * 2</span><br><span class=\"line\">Out[]: (4, 0, 2, 4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>由于元组的内容与长度无法改变，因此实例方法较少。常见的有<code>count</code>方法，作用是计算某个数值在元组中出现的次数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = (4, 2, 0, 2, 2)</span><br><span class=\"line\">In []: a.count(2)</span><br><span class=\"line\">Out[]: 3</span><br></pre></td></tr></table></figure></li>\n<li><p>使用[i]索引获取元组指定位置i的对象</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>与元组不同，列表长度可变，内容可修改。</p>\n<ul>\n<li><p>使用中括号[]或者list类型来定义列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []:a_list = [2, 3, None]</span><br><span class=\"line\">In []:tup = 2, 3, None</span><br><span class=\"line\">In []:b_list = list(tup)</span><br></pre></td></tr></table></figure></li>\n<li><p>函数用法和tuple相似</p>\n</li>\n<li><p>可以将迭代器或者生成器变为列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: gen = range(10)</span><br><span class=\"line\">In []: list(gen)</span><br><span class=\"line\">Out[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></li>\n<li><p>元素的增添或移除<br>  – <code>.append()</code>将元素添加到列表尾部<br>  – <code>.insert(loc, obj)</code>在loc位置添加obj<br>  – <code>.remove()</code>移除第一个符合要求的值<br>  – <code>.pop()</code>将特定元素移除并返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.append(5)</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, 5]</span><br><span class=\"line\">In []: a.insert(1, 999)</span><br><span class=\"line\">Out[]: [1, 999, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li>\n<li><p>列表的链接和移除<br>  – 与元组类似，两个列表之间使用+号连接<br>  – 若有已经定义的数据集，可以用extend向该列表添加元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.extend([&#x27;foo&#x27;, None, (1,2)])</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, &#x27;foo&#x27;, None, (1,2)]</span><br></pre></td></tr></table></figure></li>\n<li><p>排序 sort</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a.sort()</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p>sort函数会有二级排序key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [&#x27;a&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;, &#x27;as&#x27;]</span><br><span class=\"line\">In []: a.sort(key=len)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [&#x27;a&#x27;, &#x27;as&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;]</span><br></pre></td></tr></table></figure></li>\n<li><p>切片start包含，stop不包含</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a[-1:0]</span><br><span class=\"line\">Out[]: [4]</span><br><span class=\"line\">In []: a[::2] #步长</span><br><span class=\"line\">Out[]: [2,1]</span><br><span class=\"line\">In []: a[::-1] #相当于翻转</span><br><span class=\"line\">Out[]: [4, 1, 2, 3]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ndarray\"><a href=\"#ndarray\" class=\"headerlink\" title=\"ndarray\"></a>ndarray</h3><p>import numpy as np<br>numpy方法比python内建方法快速、占用内存小，用C语言写成。<br>较为重要的通用属性：shape属性表征<em>每一维度的数量</em>，ndim属性描述<em>数组的维数</em>，dtype属性描述<em>数组的数据类型</em>。</p>\n<ul>\n<li>生成ndarray<br>  – 使用array函数<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: data_a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: ary_a = np.array(data_a)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: array([[1, 2, 3, 4]])</span><br></pre></td></tr></table></figure>\n  – 使用<code>np.zeros(num)</code>可以生成num数量够的全0数组，<code>np.ones(num)</code>同理。<br>  – <code>np.arange()</code>为内建函数的range数组版<br>  默认类型为float64.</li>\n<li>ndarray的数据类型<br>使用astype方法显式转换数组<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: arr = np.array([1, 2, 3, 4])</span><br><span class=\"line\">In []: arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;int64&#x27;)</span><br><span class=\"line\">In []: float_arr = arr.astype(np.float64)</span><br><span class=\"line\">In []: float_arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;float64&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>基础切片与索引与列表同</li>\n<li>数组转置和换轴<br>  – <strong>transpose</strong>方法<br>  – <strong>T</strong>属性（转置）</li>\n<li>一元与二元通用函数：对数组每个元素进行计算</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>python以及pytorch中许多都会涉及到数组或者列表，需加以区分。</p>","more":"<h3 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h3><p>常用数据结构包括<strong>元组</strong> <strong>列表</strong> <strong>字典</strong> <strong>集合</strong>等，这些属于内建函数，而numpy的数组<strong>ndarray</strong>也是在机器学习中常用的，下面会记录较为重要的<strong>元组</strong> <strong>列表</strong> <strong>数组</strong></p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>元组是一种固定长度，不可变的对象序列。</p>\n<ul>\n<li><p><code>tuple()</code>将任意序列或者迭代器转换为元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: tuple([4, 0, 2])</span><br><span class=\"line\">Out[]: (4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>用<code>+</code>号或者<code>*</code>号来链接元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: (4, None, &#x27;foo&#x27;) + (6, 0)</span><br><span class=\"line\">Out[]: (4, None, &#x27;foo&#x27;, 6, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">In []: (4, 0, 2) * 2</span><br><span class=\"line\">Out[]: (4, 0, 2, 4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>由于元组的内容与长度无法改变，因此实例方法较少。常见的有<code>count</code>方法，作用是计算某个数值在元组中出现的次数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = (4, 2, 0, 2, 2)</span><br><span class=\"line\">In []: a.count(2)</span><br><span class=\"line\">Out[]: 3</span><br></pre></td></tr></table></figure></li>\n<li><p>使用[i]索引获取元组指定位置i的对象</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>与元组不同，列表长度可变，内容可修改。</p>\n<ul>\n<li><p>使用中括号[]或者list类型来定义列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []:a_list = [2, 3, None]</span><br><span class=\"line\">In []:tup = 2, 3, None</span><br><span class=\"line\">In []:b_list = list(tup)</span><br></pre></td></tr></table></figure></li>\n<li><p>函数用法和tuple相似</p>\n</li>\n<li><p>可以将迭代器或者生成器变为列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: gen = range(10)</span><br><span class=\"line\">In []: list(gen)</span><br><span class=\"line\">Out[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></li>\n<li><p>元素的增添或移除<br>  – <code>.append()</code>将元素添加到列表尾部<br>  – <code>.insert(loc, obj)</code>在loc位置添加obj<br>  – <code>.remove()</code>移除第一个符合要求的值<br>  – <code>.pop()</code>将特定元素移除并返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.append(5)</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, 5]</span><br><span class=\"line\">In []: a.insert(1, 999)</span><br><span class=\"line\">Out[]: [1, 999, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li>\n<li><p>列表的链接和移除<br>  – 与元组类似，两个列表之间使用+号连接<br>  – 若有已经定义的数据集，可以用extend向该列表添加元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.extend([&#x27;foo&#x27;, None, (1,2)])</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, &#x27;foo&#x27;, None, (1,2)]</span><br></pre></td></tr></table></figure></li>\n<li><p>排序 sort</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a.sort()</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p>sort函数会有二级排序key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [&#x27;a&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;, &#x27;as&#x27;]</span><br><span class=\"line\">In []: a.sort(key=len)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [&#x27;a&#x27;, &#x27;as&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;]</span><br></pre></td></tr></table></figure></li>\n<li><p>切片start包含，stop不包含</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a[-1:0]</span><br><span class=\"line\">Out[]: [4]</span><br><span class=\"line\">In []: a[::2] #步长</span><br><span class=\"line\">Out[]: [2,1]</span><br><span class=\"line\">In []: a[::-1] #相当于翻转</span><br><span class=\"line\">Out[]: [4, 1, 2, 3]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ndarray\"><a href=\"#ndarray\" class=\"headerlink\" title=\"ndarray\"></a>ndarray</h3><p>import numpy as np<br>numpy方法比python内建方法快速、占用内存小，用C语言写成。<br>较为重要的通用属性：shape属性表征<em>每一维度的数量</em>，ndim属性描述<em>数组的维数</em>，dtype属性描述<em>数组的数据类型</em>。</p>\n<ul>\n<li>生成ndarray<br>  – 使用array函数<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: data_a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: ary_a = np.array(data_a)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: array([[1, 2, 3, 4]])</span><br></pre></td></tr></table></figure>\n  – 使用<code>np.zeros(num)</code>可以生成num数量够的全0数组，<code>np.ones(num)</code>同理。<br>  – <code>np.arange()</code>为内建函数的range数组版<br>  默认类型为float64.</li>\n<li>ndarray的数据类型<br>使用astype方法显式转换数组<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: arr = np.array([1, 2, 3, 4])</span><br><span class=\"line\">In []: arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;int64&#x27;)</span><br><span class=\"line\">In []: float_arr = arr.astype(np.float64)</span><br><span class=\"line\">In []: float_arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;float64&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>基础切片与索引与列表同</li>\n<li>数组转置和换轴<br>  – <strong>transpose</strong>方法<br>  – <strong>T</strong>属性（转置）</li>\n<li>一元与二元通用函数：对数组每个元素进行计算</li>\n</ul>"},{"title":"about-plan","date":"2021-09-14T12:35:59.000Z","_content":"\n\n<!-- more -->","source":"_posts/about-plan.md","raw":"---\ntitle: about-plan\ndate: 2021-09-14 20:35:59\ntags:\ncategories:\n---\n\n\n<!-- more -->","slug":"about-plan","published":1,"updated":"2021-09-14T12:35:59.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw1v1f7b0007iotwado4eeil","content":"<span id=\"more\"></span>","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"matplotlib基础","date":"2021-08-31T13:40:52.000Z","_content":"\n学习matplotlib的应用\n<!-- more -->\n\n### 简单matplotlibAPI\n导入\n`In [0]: import matplotlib.pyplot as plt`\n简单的使用\n```\nIn [1]: import numpy as np\nIn [2]: data = np.arange(10)\nIn [3]: plt.plot(data)\n```\n\n#### 图片与子图\nmatplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。\n使用subplot生成2X2的子图并布置在左上角的位置\n```\nIn [4]: fig = plt.figure()\nIn [5]: ax1 = fig.add_subplot(2,2,1)\n```\n\n#### 画图\n- matplotlib主函数接收带有x和y轴的数组以及参数。\n`ax.plot(x,y,linestyle='--',color='g')`或者`ax.plot(x,y,'g--')`\n\n- 设置刻度标签和图例\n```\nticks = ax.set_xticks([0,250,500,750,1000])\nlabels = ax.set_xticklabels(['one','two','three','four','five'])\nax.set_title('My PLT')\nax.set_xlabel('Stage')\n```\n\n### 使用pandas\nSeries和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。\n#### Series.plot()方法参数\n|参数  |描述   |\n|:-----|:------|\n|label|图里标签|\n|ax   |子图对象|\n|style|样式   |\n|kind|area bar barh density hist kde line pie等|\n|logy|y轴对数缩放|\n|xticks|x的刻度值|\n|yticks|y的刻度值|\n|xlim|x轴范围|\n|ylim|y轴范围|\n\n#### DataFrame.plot()参数\n|参数  |描述   |\n|:-----|:------|\n|subplots|将df每一列绘制在独立子图中|\n|sharex|subplots=True共享x轴|\n|sharey|subplots=True共享y轴|\n|title|标题|\n\n#### 柱状图\nplot.bar()和plot.barh()分别绘制垂直和水平的柱状图","source":"_posts/about-matplotlib.md","raw":"---\nlayout: \ntitle: matplotlib基础\ndate: 2021-08-31 21:40:52\ntags:\n- python\n- matplotlib\ncategories:\n- [学习, coding]\n---\n\n学习matplotlib的应用\n<!-- more -->\n\n### 简单matplotlibAPI\n导入\n`In [0]: import matplotlib.pyplot as plt`\n简单的使用\n```\nIn [1]: import numpy as np\nIn [2]: data = np.arange(10)\nIn [3]: plt.plot(data)\n```\n\n#### 图片与子图\nmatplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。\n使用subplot生成2X2的子图并布置在左上角的位置\n```\nIn [4]: fig = plt.figure()\nIn [5]: ax1 = fig.add_subplot(2,2,1)\n```\n\n#### 画图\n- matplotlib主函数接收带有x和y轴的数组以及参数。\n`ax.plot(x,y,linestyle='--',color='g')`或者`ax.plot(x,y,'g--')`\n\n- 设置刻度标签和图例\n```\nticks = ax.set_xticks([0,250,500,750,1000])\nlabels = ax.set_xticklabels(['one','two','three','four','five'])\nax.set_title('My PLT')\nax.set_xlabel('Stage')\n```\n\n### 使用pandas\nSeries和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。\n#### Series.plot()方法参数\n|参数  |描述   |\n|:-----|:------|\n|label|图里标签|\n|ax   |子图对象|\n|style|样式   |\n|kind|area bar barh density hist kde line pie等|\n|logy|y轴对数缩放|\n|xticks|x的刻度值|\n|yticks|y的刻度值|\n|xlim|x轴范围|\n|ylim|y轴范围|\n\n#### DataFrame.plot()参数\n|参数  |描述   |\n|:-----|:------|\n|subplots|将df每一列绘制在独立子图中|\n|sharex|subplots=True共享x轴|\n|sharey|subplots=True共享y轴|\n|title|标题|\n\n#### 柱状图\nplot.bar()和plot.barh()分别绘制垂直和水平的柱状图","slug":"about-matplotlib","published":1,"updated":"2021-09-04T14:55:53.460Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7b0008iotwapncae2y","content":"<p>学习matplotlib的应用</p>\n<span id=\"more\"></span>\n\n<h3 id=\"简单matplotlibAPI\"><a href=\"#简单matplotlibAPI\" class=\"headerlink\" title=\"简单matplotlibAPI\"></a>简单matplotlibAPI</h3><p>导入<br><code>In [0]: import matplotlib.pyplot as plt</code><br>简单的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\">In [2]: data = np.arange(10)</span><br><span class=\"line\">In [3]: plt.plot(data)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片与子图\"><a href=\"#图片与子图\" class=\"headerlink\" title=\"图片与子图\"></a>图片与子图</h4><p>matplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。<br>使用subplot生成2X2的子图并布置在左上角的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: fig = plt.figure()</span><br><span class=\"line\">In [5]: ax1 = fig.add_subplot(2,2,1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h4><ul>\n<li><p>matplotlib主函数接收带有x和y轴的数组以及参数。<br><code>ax.plot(x,y,linestyle=&#39;--&#39;,color=&#39;g&#39;)</code>或者<code>ax.plot(x,y,&#39;g--&#39;)</code></p>\n</li>\n<li><p>设置刻度标签和图例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ticks = ax.set_xticks([0,250,500,750,1000])</span><br><span class=\"line\">labels = ax.set_xticklabels([&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;,&#x27;four&#x27;,&#x27;five&#x27;])</span><br><span class=\"line\">ax.set_title(&#x27;My PLT&#x27;)</span><br><span class=\"line\">ax.set_xlabel(&#x27;Stage&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用pandas\"><a href=\"#使用pandas\" class=\"headerlink\" title=\"使用pandas\"></a>使用pandas</h3><p>Series和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。</p>\n<h4 id=\"Series-plot-方法参数\"><a href=\"#Series-plot-方法参数\" class=\"headerlink\" title=\"Series.plot()方法参数\"></a>Series.plot()方法参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">label</td>\n<td align=\"left\">图里标签</td>\n</tr>\n<tr>\n<td align=\"left\">ax</td>\n<td align=\"left\">子图对象</td>\n</tr>\n<tr>\n<td align=\"left\">style</td>\n<td align=\"left\">样式</td>\n</tr>\n<tr>\n<td align=\"left\">kind</td>\n<td align=\"left\">area bar barh density hist kde line pie等</td>\n</tr>\n<tr>\n<td align=\"left\">logy</td>\n<td align=\"left\">y轴对数缩放</td>\n</tr>\n<tr>\n<td align=\"left\">xticks</td>\n<td align=\"left\">x的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">yticks</td>\n<td align=\"left\">y的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">xlim</td>\n<td align=\"left\">x轴范围</td>\n</tr>\n<tr>\n<td align=\"left\">ylim</td>\n<td align=\"left\">y轴范围</td>\n</tr>\n</tbody></table>\n<h4 id=\"DataFrame-plot-参数\"><a href=\"#DataFrame-plot-参数\" class=\"headerlink\" title=\"DataFrame.plot()参数\"></a>DataFrame.plot()参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">subplots</td>\n<td align=\"left\">将df每一列绘制在独立子图中</td>\n</tr>\n<tr>\n<td align=\"left\">sharex</td>\n<td align=\"left\">subplots=True共享x轴</td>\n</tr>\n<tr>\n<td align=\"left\">sharey</td>\n<td align=\"left\">subplots=True共享y轴</td>\n</tr>\n<tr>\n<td align=\"left\">title</td>\n<td align=\"left\">标题</td>\n</tr>\n</tbody></table>\n<h4 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h4><p>plot.bar()和plot.barh()分别绘制垂直和水平的柱状图</p>\n","site":{"data":{}},"excerpt":"<p>学习matplotlib的应用</p>","more":"<h3 id=\"简单matplotlibAPI\"><a href=\"#简单matplotlibAPI\" class=\"headerlink\" title=\"简单matplotlibAPI\"></a>简单matplotlibAPI</h3><p>导入<br><code>In [0]: import matplotlib.pyplot as plt</code><br>简单的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\">In [2]: data = np.arange(10)</span><br><span class=\"line\">In [3]: plt.plot(data)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片与子图\"><a href=\"#图片与子图\" class=\"headerlink\" title=\"图片与子图\"></a>图片与子图</h4><p>matplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。<br>使用subplot生成2X2的子图并布置在左上角的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: fig = plt.figure()</span><br><span class=\"line\">In [5]: ax1 = fig.add_subplot(2,2,1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h4><ul>\n<li><p>matplotlib主函数接收带有x和y轴的数组以及参数。<br><code>ax.plot(x,y,linestyle=&#39;--&#39;,color=&#39;g&#39;)</code>或者<code>ax.plot(x,y,&#39;g--&#39;)</code></p>\n</li>\n<li><p>设置刻度标签和图例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ticks = ax.set_xticks([0,250,500,750,1000])</span><br><span class=\"line\">labels = ax.set_xticklabels([&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;,&#x27;four&#x27;,&#x27;five&#x27;])</span><br><span class=\"line\">ax.set_title(&#x27;My PLT&#x27;)</span><br><span class=\"line\">ax.set_xlabel(&#x27;Stage&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用pandas\"><a href=\"#使用pandas\" class=\"headerlink\" title=\"使用pandas\"></a>使用pandas</h3><p>Series和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。</p>\n<h4 id=\"Series-plot-方法参数\"><a href=\"#Series-plot-方法参数\" class=\"headerlink\" title=\"Series.plot()方法参数\"></a>Series.plot()方法参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">label</td>\n<td align=\"left\">图里标签</td>\n</tr>\n<tr>\n<td align=\"left\">ax</td>\n<td align=\"left\">子图对象</td>\n</tr>\n<tr>\n<td align=\"left\">style</td>\n<td align=\"left\">样式</td>\n</tr>\n<tr>\n<td align=\"left\">kind</td>\n<td align=\"left\">area bar barh density hist kde line pie等</td>\n</tr>\n<tr>\n<td align=\"left\">logy</td>\n<td align=\"left\">y轴对数缩放</td>\n</tr>\n<tr>\n<td align=\"left\">xticks</td>\n<td align=\"left\">x的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">yticks</td>\n<td align=\"left\">y的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">xlim</td>\n<td align=\"left\">x轴范围</td>\n</tr>\n<tr>\n<td align=\"left\">ylim</td>\n<td align=\"left\">y轴范围</td>\n</tr>\n</tbody></table>\n<h4 id=\"DataFrame-plot-参数\"><a href=\"#DataFrame-plot-参数\" class=\"headerlink\" title=\"DataFrame.plot()参数\"></a>DataFrame.plot()参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">subplots</td>\n<td align=\"left\">将df每一列绘制在独立子图中</td>\n</tr>\n<tr>\n<td align=\"left\">sharex</td>\n<td align=\"left\">subplots=True共享x轴</td>\n</tr>\n<tr>\n<td align=\"left\">sharey</td>\n<td align=\"left\">subplots=True共享y轴</td>\n</tr>\n<tr>\n<td align=\"left\">title</td>\n<td align=\"left\">标题</td>\n</tr>\n</tbody></table>\n<h4 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h4><p>plot.bar()和plot.barh()分别绘制垂直和水平的柱状图</p>"},{"layout":"post","title":"python随笔","date":"2021-08-31T13:42:26.000Z","_content":"\npython学习的点滴细节问题\n<!-- more -->\n#### print\n`print('xxx', end='\\r')`输出后刷新到本行头","source":"_posts/about-python.md","raw":"---\nlayout:\ntitle: python随笔\ndate: 2021-08-31 21:42:26\ntags:\n- python\ncategories:\n- [学习, coding]\n---\n\npython学习的点滴细节问题\n<!-- more -->\n#### print\n`print('xxx', end='\\r')`输出后刷新到本行头","slug":"about-python","published":1,"updated":"2021-08-31T13:44:12.299Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7d000biotw74r34nb1","content":"<p>python学习的点滴细节问题</p>\n<span id=\"more\"></span>\n<h4 id=\"print\"><a href=\"#print\" class=\"headerlink\" title=\"print\"></a>print</h4><p><code>print(&#39;xxx&#39;, end=&#39;\\r&#39;)</code>输出后刷新到本行头</p>\n","site":{"data":{}},"excerpt":"<p>python学习的点滴细节问题</p>","more":"<h4 id=\"print\"><a href=\"#print\" class=\"headerlink\" title=\"print\"></a>print</h4><p><code>print(&#39;xxx&#39;, end=&#39;\\r&#39;)</code>输出后刷新到本行头</p>"},{"layout":"post","title":"about-tensorboard","date":"2021-09-05T03:35:08.000Z","_content":"\npytorch框架下的tensorboard使用\n<!-- more -->\n\ntensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。\n\n### tensorboard使用逻辑\n- 将代码运行过程中的，某些你关心的数据保存在一个文件夹中。\n这一步由writer完成\n- 再读取这个文件夹中的数据，用浏览器显示出来。 \n这一步通过tensorboard完成\n### 使用流程\n- 导入`from torch.utils.tensorboard import SummaryWriter`\n- 实例化`writer = SummaryWriter('./path/to/log')`\n- ","source":"_posts/about-tensorboard.md","raw":"---\nlayout: \ntitle: about-tensorboard\ndate: 2021-09-05 11:35:08\ntags:\n- tensorboard\n- pytorch\ncategories:\n- [学习, coding]\n---\n\npytorch框架下的tensorboard使用\n<!-- more -->\n\ntensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。\n\n### tensorboard使用逻辑\n- 将代码运行过程中的，某些你关心的数据保存在一个文件夹中。\n这一步由writer完成\n- 再读取这个文件夹中的数据，用浏览器显示出来。 \n这一步通过tensorboard完成\n### 使用流程\n- 导入`from torch.utils.tensorboard import SummaryWriter`\n- 实例化`writer = SummaryWriter('./path/to/log')`\n- ","slug":"about-tensorboard","published":1,"updated":"2021-09-07T03:17:58.678Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7e000ciotw96r95oth","content":"<p>pytorch框架下的tensorboard使用</p>\n<span id=\"more\"></span>\n\n<p>tensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。</p>\n<h3 id=\"tensorboard使用逻辑\"><a href=\"#tensorboard使用逻辑\" class=\"headerlink\" title=\"tensorboard使用逻辑\"></a>tensorboard使用逻辑</h3><ul>\n<li>将代码运行过程中的，某些你关心的数据保存在一个文件夹中。<br>这一步由writer完成</li>\n<li>再读取这个文件夹中的数据，用浏览器显示出来。<br>这一步通过tensorboard完成<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3></li>\n<li>导入<code>from torch.utils.tensorboard import SummaryWriter</code></li>\n<li>实例化<code>writer = SummaryWriter(&#39;./path/to/log&#39;)</code></li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>pytorch框架下的tensorboard使用</p>","more":"<p>tensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。</p>\n<h3 id=\"tensorboard使用逻辑\"><a href=\"#tensorboard使用逻辑\" class=\"headerlink\" title=\"tensorboard使用逻辑\"></a>tensorboard使用逻辑</h3><ul>\n<li>将代码运行过程中的，某些你关心的数据保存在一个文件夹中。<br>这一步由writer完成</li>\n<li>再读取这个文件夹中的数据，用浏览器显示出来。<br>这一步通过tensorboard完成<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3></li>\n<li>导入<code>from torch.utils.tensorboard import SummaryWriter</code></li>\n<li>实例化<code>writer = SummaryWriter(&#39;./path/to/log&#39;)</code></li>\n<li></li>\n</ul>"},{"layout":"post","title":"about-thinking-21.9.7","date":"2021-09-07T15:16:10.000Z","_content":"\n\n<!-- more -->\n新的目标，可能需要立足实际一点，整理思路。\n\n- 当前情况\n学术路线基本走不通；\n技术路线有一定条件和时间去争取；\n协会\n\n- 未来任务\n毕业\n工作\n\n- 思路\n手头项目完成好\n练拳练好\n看书\n多与学长师兄交流\n","source":"_posts/about-thinking-21-9-7.md","raw":"---\nlayout: \ntitle: about-thinking-21.9.7\ndate: 2021-09-07 23:16:10\ntags: \ncategories:\n- [生活, 感悟]\n---\n\n\n<!-- more -->\n新的目标，可能需要立足实际一点，整理思路。\n\n- 当前情况\n学术路线基本走不通；\n技术路线有一定条件和时间去争取；\n协会\n\n- 未来任务\n毕业\n工作\n\n- 思路\n手头项目完成好\n练拳练好\n看书\n多与学长师兄交流\n","slug":"about-thinking-21-9-7","published":1,"updated":"2021-11-16T08:36:43.772Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7f000fiotwfasc9plt","content":"<span id=\"more\"></span>\n<p>新的目标，可能需要立足实际一点，整理思路。</p>\n<ul>\n<li><p>当前情况<br>学术路线基本走不通；<br>技术路线有一定条件和时间去争取；<br>协会</p>\n</li>\n<li><p>未来任务<br>毕业<br>工作</p>\n</li>\n<li><p>思路<br>手头项目完成好<br>练拳练好<br>看书<br>多与学长师兄交流</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>新的目标，可能需要立足实际一点，整理思路。</p>\n<ul>\n<li><p>当前情况<br>学术路线基本走不通；<br>技术路线有一定条件和时间去争取；<br>协会</p>\n</li>\n<li><p>未来任务<br>毕业<br>工作</p>\n</li>\n<li><p>思路<br>手头项目完成好<br>练拳练好<br>看书<br>多与学长师兄交流</p>\n</li>\n</ul>"},{"layout":"post","title":"个人思考","date":"2021-08-30T13:56:30.000Z","_content":"\n加油！\n<!-- more -->\n\n马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。\n### 学习\n学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。\n### 拳\n好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、\n### 协会\n慢慢摸索，用心。\n### 读书\n多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）","source":"_posts/about-thinking-21-8-29.md","raw":"---\nlayout: \ntitle: 个人思考\ndate: 2021-08-30 21:56:30\ntags: \ncategories:\n- [生活, 感悟]\n---\n\n加油！\n<!-- more -->\n\n马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。\n### 学习\n学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。\n### 拳\n好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、\n### 协会\n慢慢摸索，用心。\n### 读书\n多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）","slug":"about-thinking-21-8-29","published":1,"updated":"2021-08-30T14:19:09.518Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7g000hiotwgto120qz","content":"<p>加油！</p>\n<span id=\"more\"></span>\n\n<p>马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。</p>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。</p>\n<h3 id=\"拳\"><a href=\"#拳\" class=\"headerlink\" title=\"拳\"></a>拳</h3><p>好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、</p>\n<h3 id=\"协会\"><a href=\"#协会\" class=\"headerlink\" title=\"协会\"></a>协会</h3><p>慢慢摸索，用心。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）</p>\n","site":{"data":{}},"excerpt":"<p>加油！</p>","more":"<p>马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。</p>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。</p>\n<h3 id=\"拳\"><a href=\"#拳\" class=\"headerlink\" title=\"拳\"></a>拳</h3><p>好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、</p>\n<h3 id=\"协会\"><a href=\"#协会\" class=\"headerlink\" title=\"协会\"></a>协会</h3><p>慢慢摸索，用心。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）</p>"},{"title":"Hello World","_content":"\nwelcome to hexo!\n\n<!-- more -->\n\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nwelcome to hexo!\n\n<!-- more -->\n\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-08-23T01:51:40.636Z","updated":"2021-08-25T14:09:29.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw1v1f7h000liotw0mlt9p6g","content":"<p>welcome to hexo!</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>welcome to hexo!</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"layout":"post","title":"使用tfrecords制作pytorch的dataloader 双框架混用","date":"2021-08-24T16:00:00.000Z","_content":"\n在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。\n<!-- more -->\n\n### 1 tfrecords文件读取\n\n#### 1.1 tfrecords文件的结构\n\nTFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。\ntfrecord内部包含了多个 `tf.train.Example`， 而 `Example` 是protocol buffer(protobuf) 数据标准的实现，在一个 `Example` 消息体中包含了一系列的 `tf.train.feature` 属性，而 每一个 `feature` 是一个 `key-value` 的键值对，其中，key 是string类型，而value 的取值有三种：\n-` bytes_list`: 可以存储string 和byte两种数据类型。\n-` float_list`: 可以存储float(float32)与double(float64) 两种数据类型 。\n- `int64_list`: 可以存储：bool, enum, int32, uint32, int64, uint64 。\n\n#### 1.2 数据写入\n\n此部分简单 实例，通过代码了解即可\n\n```\nwriter = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象\n\nfor data in dataes:\n    context = dataes[0]\n    question = dataes[1]\n    answer = dataes[2]\n\n    \"\"\" 2. 定义features \"\"\"\n   example = tf.train.Example (\n    features=tf.train.Features(\n        feature={\n            'name' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode('utf-8')])),\n            'label': tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),\n            'shape': tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),\n            'data' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))\n        }\n    )\n)\n\n    \n    \"\"\" 3. 序列化,写入\"\"\"\n    serialized = example.SerializeToString()\n    writer.write(serialized)\n```\n\n#### 1.3 数据读取\n\n通过写入的example指定参数解析tfrecord\n\n```\nreader = tf.data.TFRecordDataset(file_name)\n\nfeature_description = {\n    'name' : tf.io.FixedLenFeature([], tf.string, default_value='Nan'),\n    'label': tf.io.FixedLenFeature([] , tf.int64, default_value=-1),\n    'shape': tf.io.FixedLenFeature([3], tf.int64),\n    'data' : tf.io.FixedLenFeature([], tf.string)\n}\ndef _parse_function (exam_proto):\n    return tf.io.parse_single_example (exam_proto, feature_description)\n\nreader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch\nreader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据\nreader = reader.map (_parse_function) # 解析数据\nbatch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset\n\nshape = []\nbatch_data_x, batch_data_y = np.array([]), np.array([])\nfor item in batch.take(1): # 测试，只取1个batch\n    shape = item['shape'][0].numpy()\n    for data in item['data']: # 一个item就是一个batch\n        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)\n        batch_data_x = np.append (batch_data_x, img_data)\n    for label in item ['label']:\n        batch_data_y = np.append (batch_data_y, label.numpy())\n\n```\n\n### 2 读取tfrecord制作torch dataloader\n\n上代码\n\n```\ndef get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):\n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    if cache:\n        ds = ds.cache()\n\n    if repeat:\n        ds = ds.repeat()\n\n    if shuffle:\n        ds = ds.shuffle(1024 * 2)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n\n\n    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    ds = ds.batch(batch_size)\n    ds = ds.prefetch(AUTO)\n    return tfds.as_numpy(ds)\n```\n\n这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分**map**中的 `read_labeled_tfrecord` 就相当于上面的 `_parse_function`\n\n```\ntfrec_format = {\n    \"label\": tf.io.FixedLenFeature([], tf.int64),\n    \"data\": tf.io.FixedLenFeature([], tf.string),\n    \"id\": tf.io.FixedLenFeature([], tf.string)\n}\ndef read_labeled_tfrecord(example):\n    example = tf.io.parse_single_example(example, tfrec_format)\n    example['data'] = decode_wave(example['data'])\n    return example\n```\n\n解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 `raw = data.astype(np.float32).tobytes()` ，将三段4096长度的音频encode了，因此，解码函数为\n\n```\ndef decode_wave(wave):\n    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))\n    normalized_waves = []\n    for i in range(3):\n        normalized_waves.append(wave[i])\n    wave = tf.stack(normalized_waves, axis=0)\n    wave = tf.cast(wave, tf.float32)\n    return wave\n```\n\n再利用dataset制作dataloader，先上代码\n```\nclass TFRecordDataLoader:\n    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):\n        self.ds = get_dataset(\n            files, \n            batch_size=batch_size,\n            cache=cache,\n            repeat=repeat,\n            shuffle=shuffle,\n            labeled=labeled,\n            return_image_ids=return_image_ids)\n        \n        if train:\n            self.num_examples = count_data_items(files)\n        else:\n            self.num_examples = count_data_items_test(files)\n\n        self.batch_size = batch_size\n        self.labeled = labeled\n        self.return_image_ids = return_image_ids\n        self._iterator = None\n    \n    def __iter__(self):\n        if self._iterator is None:\n            self._iterator = iter(self.ds)\n        else:\n            self._reset()\n        return self._iterator\n\n    def _reset(self):\n        self._iterator = iter(self.ds)\n\n    def __next__(self):\n        batch = next(self._iterator)\n        return batch\n\n    def __len__(self):\n        n_batches = self.num_examples // self.batch_size\n        if self.num_examples % self.batch_size == 0:\n            return n_batches\n        else:\n            return n_batches + 1\n```\n\n其中最重要的几个方法涉及到了**iterator**，因为dataloader本身就是一个iterator，下面以此介绍\n\n- `__iter__(self)`:  `self._iterator = iter(self.ds)` 将可迭代对象加载为成迭代器。\n- `__next__(self)`: 获取下一个对象 `batch = next(self._iterator)`.\n- `__len__(self)`: 返回迭代器的长度。","source":"_posts/make-torchdataloader-with-tfrecs.md","raw":"---\nlayout: \ntitle: 使用tfrecords制作pytorch的dataloader 双框架混用\ndate: 2021-08-25\ntags:\n- tensorflow\n- tfrecords\n- pytorch\n- dataloader\n- iterator\ncategories:\n- [学习, coding]\n---\n\n在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。\n<!-- more -->\n\n### 1 tfrecords文件读取\n\n#### 1.1 tfrecords文件的结构\n\nTFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。\ntfrecord内部包含了多个 `tf.train.Example`， 而 `Example` 是protocol buffer(protobuf) 数据标准的实现，在一个 `Example` 消息体中包含了一系列的 `tf.train.feature` 属性，而 每一个 `feature` 是一个 `key-value` 的键值对，其中，key 是string类型，而value 的取值有三种：\n-` bytes_list`: 可以存储string 和byte两种数据类型。\n-` float_list`: 可以存储float(float32)与double(float64) 两种数据类型 。\n- `int64_list`: 可以存储：bool, enum, int32, uint32, int64, uint64 。\n\n#### 1.2 数据写入\n\n此部分简单 实例，通过代码了解即可\n\n```\nwriter = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象\n\nfor data in dataes:\n    context = dataes[0]\n    question = dataes[1]\n    answer = dataes[2]\n\n    \"\"\" 2. 定义features \"\"\"\n   example = tf.train.Example (\n    features=tf.train.Features(\n        feature={\n            'name' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode('utf-8')])),\n            'label': tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),\n            'shape': tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),\n            'data' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))\n        }\n    )\n)\n\n    \n    \"\"\" 3. 序列化,写入\"\"\"\n    serialized = example.SerializeToString()\n    writer.write(serialized)\n```\n\n#### 1.3 数据读取\n\n通过写入的example指定参数解析tfrecord\n\n```\nreader = tf.data.TFRecordDataset(file_name)\n\nfeature_description = {\n    'name' : tf.io.FixedLenFeature([], tf.string, default_value='Nan'),\n    'label': tf.io.FixedLenFeature([] , tf.int64, default_value=-1),\n    'shape': tf.io.FixedLenFeature([3], tf.int64),\n    'data' : tf.io.FixedLenFeature([], tf.string)\n}\ndef _parse_function (exam_proto):\n    return tf.io.parse_single_example (exam_proto, feature_description)\n\nreader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch\nreader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据\nreader = reader.map (_parse_function) # 解析数据\nbatch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset\n\nshape = []\nbatch_data_x, batch_data_y = np.array([]), np.array([])\nfor item in batch.take(1): # 测试，只取1个batch\n    shape = item['shape'][0].numpy()\n    for data in item['data']: # 一个item就是一个batch\n        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)\n        batch_data_x = np.append (batch_data_x, img_data)\n    for label in item ['label']:\n        batch_data_y = np.append (batch_data_y, label.numpy())\n\n```\n\n### 2 读取tfrecord制作torch dataloader\n\n上代码\n\n```\ndef get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):\n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    if cache:\n        ds = ds.cache()\n\n    if repeat:\n        ds = ds.repeat()\n\n    if shuffle:\n        ds = ds.shuffle(1024 * 2)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n\n\n    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    ds = ds.batch(batch_size)\n    ds = ds.prefetch(AUTO)\n    return tfds.as_numpy(ds)\n```\n\n这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分**map**中的 `read_labeled_tfrecord` 就相当于上面的 `_parse_function`\n\n```\ntfrec_format = {\n    \"label\": tf.io.FixedLenFeature([], tf.int64),\n    \"data\": tf.io.FixedLenFeature([], tf.string),\n    \"id\": tf.io.FixedLenFeature([], tf.string)\n}\ndef read_labeled_tfrecord(example):\n    example = tf.io.parse_single_example(example, tfrec_format)\n    example['data'] = decode_wave(example['data'])\n    return example\n```\n\n解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 `raw = data.astype(np.float32).tobytes()` ，将三段4096长度的音频encode了，因此，解码函数为\n\n```\ndef decode_wave(wave):\n    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))\n    normalized_waves = []\n    for i in range(3):\n        normalized_waves.append(wave[i])\n    wave = tf.stack(normalized_waves, axis=0)\n    wave = tf.cast(wave, tf.float32)\n    return wave\n```\n\n再利用dataset制作dataloader，先上代码\n```\nclass TFRecordDataLoader:\n    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):\n        self.ds = get_dataset(\n            files, \n            batch_size=batch_size,\n            cache=cache,\n            repeat=repeat,\n            shuffle=shuffle,\n            labeled=labeled,\n            return_image_ids=return_image_ids)\n        \n        if train:\n            self.num_examples = count_data_items(files)\n        else:\n            self.num_examples = count_data_items_test(files)\n\n        self.batch_size = batch_size\n        self.labeled = labeled\n        self.return_image_ids = return_image_ids\n        self._iterator = None\n    \n    def __iter__(self):\n        if self._iterator is None:\n            self._iterator = iter(self.ds)\n        else:\n            self._reset()\n        return self._iterator\n\n    def _reset(self):\n        self._iterator = iter(self.ds)\n\n    def __next__(self):\n        batch = next(self._iterator)\n        return batch\n\n    def __len__(self):\n        n_batches = self.num_examples // self.batch_size\n        if self.num_examples % self.batch_size == 0:\n            return n_batches\n        else:\n            return n_batches + 1\n```\n\n其中最重要的几个方法涉及到了**iterator**，因为dataloader本身就是一个iterator，下面以此介绍\n\n- `__iter__(self)`:  `self._iterator = iter(self.ds)` 将可迭代对象加载为成迭代器。\n- `__next__(self)`: 获取下一个对象 `batch = next(self._iterator)`.\n- `__len__(self)`: 返回迭代器的长度。","slug":"make-torchdataloader-with-tfrecs","published":1,"updated":"2021-08-25T14:08:45.140Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7j000miotw4emq6v38","content":"<p>在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-tfrecords文件读取\"><a href=\"#1-tfrecords文件读取\" class=\"headerlink\" title=\"1 tfrecords文件读取\"></a>1 tfrecords文件读取</h3><h4 id=\"1-1-tfrecords文件的结构\"><a href=\"#1-1-tfrecords文件的结构\" class=\"headerlink\" title=\"1.1 tfrecords文件的结构\"></a>1.1 tfrecords文件的结构</h4><p>TFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。<br>tfrecord内部包含了多个 <code>tf.train.Example</code>， 而 <code>Example</code> 是protocol buffer(protobuf) 数据标准的实现，在一个 <code>Example</code> 消息体中包含了一系列的 <code>tf.train.feature</code> 属性，而 每一个 <code>feature</code> 是一个 <code>key-value</code> 的键值对，其中，key 是string类型，而value 的取值有三种：<br>-<code> bytes_list</code>: 可以存储string 和byte两种数据类型。<br>-<code> float_list</code>: 可以存储float(float32)与double(float64) 两种数据类型 。</p>\n<ul>\n<li><code>int64_list</code>: 可以存储：bool, enum, int32, uint32, int64, uint64 。</li>\n</ul>\n<h4 id=\"1-2-数据写入\"><a href=\"#1-2-数据写入\" class=\"headerlink\" title=\"1.2 数据写入\"></a>1.2 数据写入</h4><p>此部分简单 实例，通过代码了解即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象</span><br><span class=\"line\"></span><br><span class=\"line\">for data in dataes:</span><br><span class=\"line\">    context = dataes[0]</span><br><span class=\"line\">    question = dataes[1]</span><br><span class=\"line\">    answer = dataes[2]</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot; 2. 定义features &quot;&quot;&quot;</span><br><span class=\"line\">   example = tf.train.Example (</span><br><span class=\"line\">    features=tf.train.Features(</span><br><span class=\"line\">        feature=&#123;</span><br><span class=\"line\">            &#x27;name&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode(&#x27;utf-8&#x27;)])),</span><br><span class=\"line\">            &#x27;label&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),</span><br><span class=\"line\">            &#x27;shape&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),</span><br><span class=\"line\">            &#x27;data&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &quot;&quot;&quot; 3. 序列化,写入&quot;&quot;&quot;</span><br><span class=\"line\">    serialized = example.SerializeToString()</span><br><span class=\"line\">    writer.write(serialized)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-数据读取\"><a href=\"#1-3-数据读取\" class=\"headerlink\" title=\"1.3 数据读取\"></a>1.3 数据读取</h4><p>通过写入的example指定参数解析tfrecord</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reader = tf.data.TFRecordDataset(file_name)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_description = &#123;</span><br><span class=\"line\">    &#x27;name&#x27; : tf.io.FixedLenFeature([], tf.string, default_value=&#x27;Nan&#x27;),</span><br><span class=\"line\">    &#x27;label&#x27;: tf.io.FixedLenFeature([] , tf.int64, default_value=-1),</span><br><span class=\"line\">    &#x27;shape&#x27;: tf.io.FixedLenFeature([3], tf.int64),</span><br><span class=\"line\">    &#x27;data&#x27; : tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def _parse_function (exam_proto):</span><br><span class=\"line\">    return tf.io.parse_single_example (exam_proto, feature_description)</span><br><span class=\"line\"></span><br><span class=\"line\">reader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch</span><br><span class=\"line\">reader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据</span><br><span class=\"line\">reader = reader.map (_parse_function) # 解析数据</span><br><span class=\"line\">batch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset</span><br><span class=\"line\"></span><br><span class=\"line\">shape = []</span><br><span class=\"line\">batch_data_x, batch_data_y = np.array([]), np.array([])</span><br><span class=\"line\">for item in batch.take(1): # 测试，只取1个batch</span><br><span class=\"line\">    shape = item[&#x27;shape&#x27;][0].numpy()</span><br><span class=\"line\">    for data in item[&#x27;data&#x27;]: # 一个item就是一个batch</span><br><span class=\"line\">        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)</span><br><span class=\"line\">        batch_data_x = np.append (batch_data_x, img_data)</span><br><span class=\"line\">    for label in item [&#x27;label&#x27;]:</span><br><span class=\"line\">        batch_data_y = np.append (batch_data_y, label.numpy())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-读取tfrecord制作torch-dataloader\"><a href=\"#2-读取tfrecord制作torch-dataloader\" class=\"headerlink\" title=\"2 读取tfrecord制作torch dataloader\"></a>2 读取tfrecord制作torch dataloader</h3><p>上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)</span><br><span class=\"line\">    if cache:</span><br><span class=\"line\">        ds = ds.cache()</span><br><span class=\"line\"></span><br><span class=\"line\">    if repeat:</span><br><span class=\"line\">        ds = ds.repeat()</span><br><span class=\"line\"></span><br><span class=\"line\">    if shuffle:</span><br><span class=\"line\">        ds = ds.shuffle(1024 * 2)</span><br><span class=\"line\">        opt = tf.data.Options()</span><br><span class=\"line\">        opt.experimental_deterministic = False</span><br><span class=\"line\">        ds = ds.with_options(opt)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)</span><br><span class=\"line\">    ds = ds.batch(batch_size)</span><br><span class=\"line\">    ds = ds.prefetch(AUTO)</span><br><span class=\"line\">    return tfds.as_numpy(ds)</span><br></pre></td></tr></table></figure>\n\n<p>这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分<strong>map</strong>中的 <code>read_labeled_tfrecord</code> 就相当于上面的 <code>_parse_function</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfrec_format = &#123;</span><br><span class=\"line\">    &quot;label&quot;: tf.io.FixedLenFeature([], tf.int64),</span><br><span class=\"line\">    &quot;data&quot;: tf.io.FixedLenFeature([], tf.string),</span><br><span class=\"line\">    &quot;id&quot;: tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def read_labeled_tfrecord(example):</span><br><span class=\"line\">    example = tf.io.parse_single_example(example, tfrec_format)</span><br><span class=\"line\">    example[&#x27;data&#x27;] = decode_wave(example[&#x27;data&#x27;])</span><br><span class=\"line\">    return example</span><br></pre></td></tr></table></figure>\n\n<p>解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 <code>raw = data.astype(np.float32).tobytes()</code> ，将三段4096长度的音频encode了，因此，解码函数为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def decode_wave(wave):</span><br><span class=\"line\">    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))</span><br><span class=\"line\">    normalized_waves = []</span><br><span class=\"line\">    for i in range(3):</span><br><span class=\"line\">        normalized_waves.append(wave[i])</span><br><span class=\"line\">    wave = tf.stack(normalized_waves, axis=0)</span><br><span class=\"line\">    wave = tf.cast(wave, tf.float32)</span><br><span class=\"line\">    return wave</span><br></pre></td></tr></table></figure>\n\n<p>再利用dataset制作dataloader，先上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TFRecordDataLoader:</span><br><span class=\"line\">    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">        self.ds = get_dataset(</span><br><span class=\"line\">            files, </span><br><span class=\"line\">            batch_size=batch_size,</span><br><span class=\"line\">            cache=cache,</span><br><span class=\"line\">            repeat=repeat,</span><br><span class=\"line\">            shuffle=shuffle,</span><br><span class=\"line\">            labeled=labeled,</span><br><span class=\"line\">            return_image_ids=return_image_ids)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if train:</span><br><span class=\"line\">            self.num_examples = count_data_items(files)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.num_examples = count_data_items_test(files)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.batch_size = batch_size</span><br><span class=\"line\">        self.labeled = labeled</span><br><span class=\"line\">        self.return_image_ids = return_image_ids</span><br><span class=\"line\">        self._iterator = None</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        if self._iterator is None:</span><br><span class=\"line\">            self._iterator = iter(self.ds)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self._reset()</span><br><span class=\"line\">        return self._iterator</span><br><span class=\"line\"></span><br><span class=\"line\">    def _reset(self):</span><br><span class=\"line\">        self._iterator = iter(self.ds)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        batch = next(self._iterator)</span><br><span class=\"line\">        return batch</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        n_batches = self.num_examples // self.batch_size</span><br><span class=\"line\">        if self.num_examples % self.batch_size == 0:</span><br><span class=\"line\">            return n_batches</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return n_batches + 1</span><br></pre></td></tr></table></figure>\n\n<p>其中最重要的几个方法涉及到了<strong>iterator</strong>，因为dataloader本身就是一个iterator，下面以此介绍</p>\n<ul>\n<li><code>__iter__(self)</code>:  <code>self._iterator = iter(self.ds)</code> 将可迭代对象加载为成迭代器。</li>\n<li><code>__next__(self)</code>: 获取下一个对象 <code>batch = next(self._iterator)</code>.</li>\n<li><code>__len__(self)</code>: 返回迭代器的长度。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。</p>","more":"<h3 id=\"1-tfrecords文件读取\"><a href=\"#1-tfrecords文件读取\" class=\"headerlink\" title=\"1 tfrecords文件读取\"></a>1 tfrecords文件读取</h3><h4 id=\"1-1-tfrecords文件的结构\"><a href=\"#1-1-tfrecords文件的结构\" class=\"headerlink\" title=\"1.1 tfrecords文件的结构\"></a>1.1 tfrecords文件的结构</h4><p>TFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。<br>tfrecord内部包含了多个 <code>tf.train.Example</code>， 而 <code>Example</code> 是protocol buffer(protobuf) 数据标准的实现，在一个 <code>Example</code> 消息体中包含了一系列的 <code>tf.train.feature</code> 属性，而 每一个 <code>feature</code> 是一个 <code>key-value</code> 的键值对，其中，key 是string类型，而value 的取值有三种：<br>-<code> bytes_list</code>: 可以存储string 和byte两种数据类型。<br>-<code> float_list</code>: 可以存储float(float32)与double(float64) 两种数据类型 。</p>\n<ul>\n<li><code>int64_list</code>: 可以存储：bool, enum, int32, uint32, int64, uint64 。</li>\n</ul>\n<h4 id=\"1-2-数据写入\"><a href=\"#1-2-数据写入\" class=\"headerlink\" title=\"1.2 数据写入\"></a>1.2 数据写入</h4><p>此部分简单 实例，通过代码了解即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象</span><br><span class=\"line\"></span><br><span class=\"line\">for data in dataes:</span><br><span class=\"line\">    context = dataes[0]</span><br><span class=\"line\">    question = dataes[1]</span><br><span class=\"line\">    answer = dataes[2]</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot; 2. 定义features &quot;&quot;&quot;</span><br><span class=\"line\">   example = tf.train.Example (</span><br><span class=\"line\">    features=tf.train.Features(</span><br><span class=\"line\">        feature=&#123;</span><br><span class=\"line\">            &#x27;name&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode(&#x27;utf-8&#x27;)])),</span><br><span class=\"line\">            &#x27;label&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),</span><br><span class=\"line\">            &#x27;shape&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),</span><br><span class=\"line\">            &#x27;data&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &quot;&quot;&quot; 3. 序列化,写入&quot;&quot;&quot;</span><br><span class=\"line\">    serialized = example.SerializeToString()</span><br><span class=\"line\">    writer.write(serialized)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-数据读取\"><a href=\"#1-3-数据读取\" class=\"headerlink\" title=\"1.3 数据读取\"></a>1.3 数据读取</h4><p>通过写入的example指定参数解析tfrecord</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reader = tf.data.TFRecordDataset(file_name)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_description = &#123;</span><br><span class=\"line\">    &#x27;name&#x27; : tf.io.FixedLenFeature([], tf.string, default_value=&#x27;Nan&#x27;),</span><br><span class=\"line\">    &#x27;label&#x27;: tf.io.FixedLenFeature([] , tf.int64, default_value=-1),</span><br><span class=\"line\">    &#x27;shape&#x27;: tf.io.FixedLenFeature([3], tf.int64),</span><br><span class=\"line\">    &#x27;data&#x27; : tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def _parse_function (exam_proto):</span><br><span class=\"line\">    return tf.io.parse_single_example (exam_proto, feature_description)</span><br><span class=\"line\"></span><br><span class=\"line\">reader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch</span><br><span class=\"line\">reader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据</span><br><span class=\"line\">reader = reader.map (_parse_function) # 解析数据</span><br><span class=\"line\">batch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset</span><br><span class=\"line\"></span><br><span class=\"line\">shape = []</span><br><span class=\"line\">batch_data_x, batch_data_y = np.array([]), np.array([])</span><br><span class=\"line\">for item in batch.take(1): # 测试，只取1个batch</span><br><span class=\"line\">    shape = item[&#x27;shape&#x27;][0].numpy()</span><br><span class=\"line\">    for data in item[&#x27;data&#x27;]: # 一个item就是一个batch</span><br><span class=\"line\">        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)</span><br><span class=\"line\">        batch_data_x = np.append (batch_data_x, img_data)</span><br><span class=\"line\">    for label in item [&#x27;label&#x27;]:</span><br><span class=\"line\">        batch_data_y = np.append (batch_data_y, label.numpy())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-读取tfrecord制作torch-dataloader\"><a href=\"#2-读取tfrecord制作torch-dataloader\" class=\"headerlink\" title=\"2 读取tfrecord制作torch dataloader\"></a>2 读取tfrecord制作torch dataloader</h3><p>上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)</span><br><span class=\"line\">    if cache:</span><br><span class=\"line\">        ds = ds.cache()</span><br><span class=\"line\"></span><br><span class=\"line\">    if repeat:</span><br><span class=\"line\">        ds = ds.repeat()</span><br><span class=\"line\"></span><br><span class=\"line\">    if shuffle:</span><br><span class=\"line\">        ds = ds.shuffle(1024 * 2)</span><br><span class=\"line\">        opt = tf.data.Options()</span><br><span class=\"line\">        opt.experimental_deterministic = False</span><br><span class=\"line\">        ds = ds.with_options(opt)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)</span><br><span class=\"line\">    ds = ds.batch(batch_size)</span><br><span class=\"line\">    ds = ds.prefetch(AUTO)</span><br><span class=\"line\">    return tfds.as_numpy(ds)</span><br></pre></td></tr></table></figure>\n\n<p>这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分<strong>map</strong>中的 <code>read_labeled_tfrecord</code> 就相当于上面的 <code>_parse_function</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfrec_format = &#123;</span><br><span class=\"line\">    &quot;label&quot;: tf.io.FixedLenFeature([], tf.int64),</span><br><span class=\"line\">    &quot;data&quot;: tf.io.FixedLenFeature([], tf.string),</span><br><span class=\"line\">    &quot;id&quot;: tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def read_labeled_tfrecord(example):</span><br><span class=\"line\">    example = tf.io.parse_single_example(example, tfrec_format)</span><br><span class=\"line\">    example[&#x27;data&#x27;] = decode_wave(example[&#x27;data&#x27;])</span><br><span class=\"line\">    return example</span><br></pre></td></tr></table></figure>\n\n<p>解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 <code>raw = data.astype(np.float32).tobytes()</code> ，将三段4096长度的音频encode了，因此，解码函数为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def decode_wave(wave):</span><br><span class=\"line\">    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))</span><br><span class=\"line\">    normalized_waves = []</span><br><span class=\"line\">    for i in range(3):</span><br><span class=\"line\">        normalized_waves.append(wave[i])</span><br><span class=\"line\">    wave = tf.stack(normalized_waves, axis=0)</span><br><span class=\"line\">    wave = tf.cast(wave, tf.float32)</span><br><span class=\"line\">    return wave</span><br></pre></td></tr></table></figure>\n\n<p>再利用dataset制作dataloader，先上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TFRecordDataLoader:</span><br><span class=\"line\">    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">        self.ds = get_dataset(</span><br><span class=\"line\">            files, </span><br><span class=\"line\">            batch_size=batch_size,</span><br><span class=\"line\">            cache=cache,</span><br><span class=\"line\">            repeat=repeat,</span><br><span class=\"line\">            shuffle=shuffle,</span><br><span class=\"line\">            labeled=labeled,</span><br><span class=\"line\">            return_image_ids=return_image_ids)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if train:</span><br><span class=\"line\">            self.num_examples = count_data_items(files)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.num_examples = count_data_items_test(files)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.batch_size = batch_size</span><br><span class=\"line\">        self.labeled = labeled</span><br><span class=\"line\">        self.return_image_ids = return_image_ids</span><br><span class=\"line\">        self._iterator = None</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        if self._iterator is None:</span><br><span class=\"line\">            self._iterator = iter(self.ds)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self._reset()</span><br><span class=\"line\">        return self._iterator</span><br><span class=\"line\"></span><br><span class=\"line\">    def _reset(self):</span><br><span class=\"line\">        self._iterator = iter(self.ds)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        batch = next(self._iterator)</span><br><span class=\"line\">        return batch</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        n_batches = self.num_examples // self.batch_size</span><br><span class=\"line\">        if self.num_examples % self.batch_size == 0:</span><br><span class=\"line\">            return n_batches</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return n_batches + 1</span><br></pre></td></tr></table></figure>\n\n<p>其中最重要的几个方法涉及到了<strong>iterator</strong>，因为dataloader本身就是一个iterator，下面以此介绍</p>\n<ul>\n<li><code>__iter__(self)</code>:  <code>self._iterator = iter(self.ds)</code> 将可迭代对象加载为成迭代器。</li>\n<li><code>__next__(self)</code>: 获取下一个对象 <code>batch = next(self._iterator)</code>.</li>\n<li><code>__len__(self)</code>: 返回迭代器的长度。</li>\n</ul>"},{"layout":"post","title":"about-torch-dataenhance","date":"2021-09-07T03:18:29.000Z","_content":"\ntorch中使用数据增强的一些技巧和方法。\n<!-- more -->\n\n### 对tensor进行shuffle\n#### 对所有element随机shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.nelement())\nt = t.view(-1)[idx].view(t.size())\nprint(t)\n```\n\n#### 按照某一特定维度进行shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.shape[1])\nt = t[:, idx].view(t.size())\nprint(t)\n```\n\n把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。","source":"_posts/about-torch-dataenhance.md","raw":"---\nlayout: \ntitle: about-torch-dataenhance\ndate: 2021-09-07 11:18:29\ntags:\n- torch\n- dataenhance\ncategories:\n- [学习, coding]\n---\n\ntorch中使用数据增强的一些技巧和方法。\n<!-- more -->\n\n### 对tensor进行shuffle\n#### 对所有element随机shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.nelement())\nt = t.view(-1)[idx].view(t.size())\nprint(t)\n```\n\n#### 按照某一特定维度进行shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.shape[1])\nt = t[:, idx].view(t.size())\nprint(t)\n```\n\n把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。","slug":"about-torch-dataenhance","published":1,"updated":"2021-09-07T03:25:37.613Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7k000piotw62ubcuo4","content":"<p>torch中使用数据增强的一些技巧和方法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"对tensor进行shuffle\"><a href=\"#对tensor进行shuffle\" class=\"headerlink\" title=\"对tensor进行shuffle\"></a>对tensor进行shuffle</h3><h4 id=\"对所有element随机shuffle\"><a href=\"#对所有element随机shuffle\" class=\"headerlink\" title=\"对所有element随机shuffle\"></a>对所有element随机shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.nelement())</span><br><span class=\"line\">t = t.view(-1)[idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按照某一特定维度进行shuffle\"><a href=\"#按照某一特定维度进行shuffle\" class=\"headerlink\" title=\"按照某一特定维度进行shuffle\"></a>按照某一特定维度进行shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.shape[1])</span><br><span class=\"line\">t = t[:, idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<p>把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。</p>\n","site":{"data":{}},"excerpt":"<p>torch中使用数据增强的一些技巧和方法。</p>","more":"<h3 id=\"对tensor进行shuffle\"><a href=\"#对tensor进行shuffle\" class=\"headerlink\" title=\"对tensor进行shuffle\"></a>对tensor进行shuffle</h3><h4 id=\"对所有element随机shuffle\"><a href=\"#对所有element随机shuffle\" class=\"headerlink\" title=\"对所有element随机shuffle\"></a>对所有element随机shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.nelement())</span><br><span class=\"line\">t = t.view(-1)[idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按照某一特定维度进行shuffle\"><a href=\"#按照某一特定维度进行shuffle\" class=\"headerlink\" title=\"按照某一特定维度进行shuffle\"></a>按照某一特定维度进行shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.shape[1])</span><br><span class=\"line\">t = t[:, idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<p>把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。</p>"},{"layout":"post","title":"迭代器与生成器 Iterator andgenerator","date":"2021-08-24T16:00:00.000Z","_content":"关于iterator和generator的区别于联系。\n<!-- more -->\n### 引言\n\n简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：\n- 迭代器 --> 生成器\n- 序列（字符串、列表、元组）\n- 字典\n\n### 1 生成器\n\n&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。\n\n&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.\n\n&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用**yield**会暂停，而可以使用 `next()` 函数和 `send()` 函数恢复生成器。\n\n&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。\n\n```\n#列表生成式\nlis = [x*x for x in range(10)]\nprint(lis)\n#生成器\ngenerator_ex = (x*x for x in range(10))\nprint(generator_ex)\n \n结果：\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n<generator object <genexpr> at 0x000002A4CBF9EBA0>\n```\n\n&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是`<generator object <genexpr> at 0x000002A4CBF9EBA0>`，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。\n\n用generator实现斐波那契数列\n\n```\ndef fib(max):\n    n,a,b =0,0,1\n    while n < max:\n        yield b\n        a,b =b,a+b\n        n = n+1\n    return 'done'\n \na = fib(10)\nprint(fib(10))\n# out:<generator object fib at 0x0000023A21A34FC0>\n\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:2\n\nfor i in fib(6):\n    print(i)\n# out:1;1;2;3;5;8\n```\n\n### 2 迭代器\n\n- **可迭代对象**（Iterable）\n集合数据类型，如list,tuple,dict,set,str等\n- **迭代器**（Iterator）\nPython中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。\n\n&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断\n\n```\n>>> from collections import Iterable\n>>> isinstance([], Iterable)\nTrue\n>>> isinstance({}, Iterable)\nTrue\n>>> isinstance('abc', Iterable)\nTrue\n>>> isinstance((x for x in range(10)), Iterable)\nTrue\n>>> isinstance(100, Iterable)\nFalse\n```\n\n```\n>>> from collections import Iterator\n>>> isinstance((x for x in range(10)), Iterator)\nTrue\n>>> isinstance([], Iterator)\nFalse\n>>> isinstance({}, Iterator)\nFalse\n>>> isinstance('abc', Iterator)\nFalse\n```\n\n","source":"_posts/iterator-and-generator.md","raw":"---\nlayout: \ntitle: 迭代器与生成器 Iterator andgenerator\ndate: 2021-08-25\ntags:\n- python\n- dataloader\n- pytorch\ncategories:\n- [学习, coding]\n---\n关于iterator和generator的区别于联系。\n<!-- more -->\n### 引言\n\n简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：\n- 迭代器 --> 生成器\n- 序列（字符串、列表、元组）\n- 字典\n\n### 1 生成器\n\n&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。\n\n&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.\n\n&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用**yield**会暂停，而可以使用 `next()` 函数和 `send()` 函数恢复生成器。\n\n&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。\n\n```\n#列表生成式\nlis = [x*x for x in range(10)]\nprint(lis)\n#生成器\ngenerator_ex = (x*x for x in range(10))\nprint(generator_ex)\n \n结果：\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n<generator object <genexpr> at 0x000002A4CBF9EBA0>\n```\n\n&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是`<generator object <genexpr> at 0x000002A4CBF9EBA0>`，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。\n\n用generator实现斐波那契数列\n\n```\ndef fib(max):\n    n,a,b =0,0,1\n    while n < max:\n        yield b\n        a,b =b,a+b\n        n = n+1\n    return 'done'\n \na = fib(10)\nprint(fib(10))\n# out:<generator object fib at 0x0000023A21A34FC0>\n\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:2\n\nfor i in fib(6):\n    print(i)\n# out:1;1;2;3;5;8\n```\n\n### 2 迭代器\n\n- **可迭代对象**（Iterable）\n集合数据类型，如list,tuple,dict,set,str等\n- **迭代器**（Iterator）\nPython中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。\n\n&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断\n\n```\n>>> from collections import Iterable\n>>> isinstance([], Iterable)\nTrue\n>>> isinstance({}, Iterable)\nTrue\n>>> isinstance('abc', Iterable)\nTrue\n>>> isinstance((x for x in range(10)), Iterable)\nTrue\n>>> isinstance(100, Iterable)\nFalse\n```\n\n```\n>>> from collections import Iterator\n>>> isinstance((x for x in range(10)), Iterator)\nTrue\n>>> isinstance([], Iterator)\nFalse\n>>> isinstance({}, Iterator)\nFalse\n>>> isinstance('abc', Iterator)\nFalse\n```\n\n","slug":"iterator-and-generator","published":1,"updated":"2021-08-25T14:08:15.604Z","comments":1,"photos":[],"link":"","_id":"ckw1v1f7w002hiotw875pgczt","content":"<p>关于iterator和generator的区别于联系。</p>\n<span id=\"more\"></span>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：</p>\n<ul>\n<li>迭代器 –&gt; 生成器</li>\n<li>序列（字符串、列表、元组）</li>\n<li>字典</li>\n</ul>\n<h3 id=\"1-生成器\"><a href=\"#1-生成器\" class=\"headerlink\" title=\"1 生成器\"></a>1 生成器</h3><p>&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.</p>\n<p>&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用<strong>yield</strong>会暂停，而可以使用 <code>next()</code> 函数和 <code>send()</code> 函数恢复生成器。</p>\n<p>&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列表生成式</span><br><span class=\"line\">lis = [x*x for x in range(10)]</span><br><span class=\"line\">print(lis)</span><br><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex = (x*x for x in range(10))</span><br><span class=\"line\">print(generator_ex)</span><br><span class=\"line\"> </span><br><span class=\"line\">结果：</span><br><span class=\"line\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是<code>&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</code>，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。</p>\n<p>用generator实现斐波那契数列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b =0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b =b,a+b</span><br><span class=\"line\">        n = n+1</span><br><span class=\"line\">    return &#x27;done&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">a = fib(10)</span><br><span class=\"line\">print(fib(10))</span><br><span class=\"line\"># out:&lt;generator object fib at 0x0000023A21A34FC0&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:2</span><br><span class=\"line\"></span><br><span class=\"line\">for i in fib(6):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"># out:1;1;2;3;5;8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-迭代器\"><a href=\"#2-迭代器\" class=\"headerlink\" title=\"2 迭代器\"></a>2 迭代器</h3><ul>\n<li><strong>可迭代对象</strong>（Iterable）<br>集合数据类型，如list,tuple,dict,set,str等</li>\n<li><strong>迭代器</strong>（Iterator）<br>Python中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。</li>\n</ul>\n<p>&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>关于iterator和generator的区别于联系。</p>","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：</p>\n<ul>\n<li>迭代器 –&gt; 生成器</li>\n<li>序列（字符串、列表、元组）</li>\n<li>字典</li>\n</ul>\n<h3 id=\"1-生成器\"><a href=\"#1-生成器\" class=\"headerlink\" title=\"1 生成器\"></a>1 生成器</h3><p>&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.</p>\n<p>&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用<strong>yield</strong>会暂停，而可以使用 <code>next()</code> 函数和 <code>send()</code> 函数恢复生成器。</p>\n<p>&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列表生成式</span><br><span class=\"line\">lis = [x*x for x in range(10)]</span><br><span class=\"line\">print(lis)</span><br><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex = (x*x for x in range(10))</span><br><span class=\"line\">print(generator_ex)</span><br><span class=\"line\"> </span><br><span class=\"line\">结果：</span><br><span class=\"line\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是<code>&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</code>，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。</p>\n<p>用generator实现斐波那契数列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b =0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b =b,a+b</span><br><span class=\"line\">        n = n+1</span><br><span class=\"line\">    return &#x27;done&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">a = fib(10)</span><br><span class=\"line\">print(fib(10))</span><br><span class=\"line\"># out:&lt;generator object fib at 0x0000023A21A34FC0&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:2</span><br><span class=\"line\"></span><br><span class=\"line\">for i in fib(6):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"># out:1;1;2;3;5;8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-迭代器\"><a href=\"#2-迭代器\" class=\"headerlink\" title=\"2 迭代器\"></a>2 迭代器</h3><ul>\n<li><strong>可迭代对象</strong>（Iterable）<br>集合数据类型，如list,tuple,dict,set,str等</li>\n<li><strong>迭代器</strong>（Iterator）<br>Python中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。</li>\n</ul>\n<p>&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/about-hexo/itachi.jpg","slug":"itachi.jpg","post":"ckw1v1f770003iotwgqz75y89","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckw1v1f750001iotw66s84adk","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7m000uiotwhhnp5og0"},{"post_id":"ckw1v1f750001iotw66s84adk","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7m000viotwa8zubwtm"},{"post_id":"ckw1v1f7j000miotw4emq6v38","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7n000xiotwht0922i1"},{"post_id":"ckw1v1f7j000miotw4emq6v38","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7n000ziotw7kl0f0lf"},{"post_id":"ckw1v1f7k000piotw62ubcuo4","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7n0011iotw52b8b5hd"},{"post_id":"ckw1v1f7k000piotw62ubcuo4","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7o0013iotwgtks90fe"},{"post_id":"ckw1v1f7b0008iotwapncae2y","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7o0015iotwenjgf2jm"},{"post_id":"ckw1v1f7b0008iotwapncae2y","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7p0017iotweenzfwwp"},{"post_id":"ckw1v1f7d000biotw74r34nb1","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7p0019iotwhzq99u92"},{"post_id":"ckw1v1f7d000biotw74r34nb1","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7p001biotw1jcabyzq"},{"post_id":"ckw1v1f770003iotwgqz75y89","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7q001eiotw9bvsh4fp"},{"post_id":"ckw1v1f770003iotwgqz75y89","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7q001hiotwf1u82u2i"},{"post_id":"ckw1v1f7e000ciotw96r95oth","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7r001kiotwcty38m28"},{"post_id":"ckw1v1f7e000ciotw96r95oth","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7r001miotwh5up9fuj"},{"post_id":"ckw1v1f790005iotw0zymadja","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7r001qiotwhltlcrav"},{"post_id":"ckw1v1f790005iotw0zymadja","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7s001siotw6ahaevev"},{"post_id":"ckw1v1f7f000fiotwfasc9plt","category_id":"ckw1v1f7o0014iotw4xp499ar","_id":"ckw1v1f7s001viotw9p5t0v3v"},{"post_id":"ckw1v1f7f000fiotwfasc9plt","category_id":"ckw1v1f7q001iiotwfhoae90h","_id":"ckw1v1f7t001yiotwef2m9f8b"},{"post_id":"ckw1v1f7g000hiotwgto120qz","category_id":"ckw1v1f7o0014iotw4xp499ar","_id":"ckw1v1f7t001ziotw4nwya5t3"},{"post_id":"ckw1v1f7g000hiotwgto120qz","category_id":"ckw1v1f7q001iiotwfhoae90h","_id":"ckw1v1f7t0020iotw0f9ufb3w"},{"post_id":"ckw1v1f7w002hiotw875pgczt","category_id":"ckw1v1f7a0006iotw6iwhd9jx","_id":"ckw1v1f7x002liotw3szb2tv3"},{"post_id":"ckw1v1f7w002hiotw875pgczt","category_id":"ckw1v1f7h000jiotwbbgherg4","_id":"ckw1v1f7y002miotw6f60f68u"}],"PostTag":[{"post_id":"ckw1v1f750001iotw66s84adk","tag_id":"ckw1v1f780004iotwb961evgl","_id":"ckw1v1f7g000giotw876odmqw"},{"post_id":"ckw1v1f750001iotw66s84adk","tag_id":"ckw1v1f7c0009iotw02wwcyvu","_id":"ckw1v1f7h000iiotw64w5f8rf"},{"post_id":"ckw1v1f770003iotwgqz75y89","tag_id":"ckw1v1f7f000eiotwbjaqcv0n","_id":"ckw1v1f7l000qiotwgovibq54"},{"post_id":"ckw1v1f770003iotwgqz75y89","tag_id":"ckw1v1f7h000kiotw1y9jclz7","_id":"ckw1v1f7l000siotw0riobvef"},{"post_id":"ckw1v1f790005iotw0zymadja","tag_id":"ckw1v1f7k000oiotw5ziw2d26","_id":"ckw1v1f7q001diotw2hg1h68e"},{"post_id":"ckw1v1f790005iotw0zymadja","tag_id":"ckw1v1f7m000tiotw3ob58wpz","_id":"ckw1v1f7q001fiotwe7ey9kub"},{"post_id":"ckw1v1f790005iotw0zymadja","tag_id":"ckw1v1f7n000yiotw5zop6mvw","_id":"ckw1v1f7r001jiotw2ehthsu1"},{"post_id":"ckw1v1f790005iotw0zymadja","tag_id":"ckw1v1f7o0012iotw0o9w2rmi","_id":"ckw1v1f7r001liotwdur7digm"},{"post_id":"ckw1v1f790005iotw0zymadja","tag_id":"ckw1v1f7o0016iotw446w0jaz","_id":"ckw1v1f7r001oiotw8g2bdrvu"},{"post_id":"ckw1v1f7b0008iotwapncae2y","tag_id":"ckw1v1f7k000oiotw5ziw2d26","_id":"ckw1v1f7s001riotw1on693va"},{"post_id":"ckw1v1f7b0008iotwapncae2y","tag_id":"ckw1v1f7q001giotw1qmq0pn8","_id":"ckw1v1f7s001uiotwezila6kw"},{"post_id":"ckw1v1f7d000biotw74r34nb1","tag_id":"ckw1v1f7k000oiotw5ziw2d26","_id":"ckw1v1f7s001wiotwfb6g2rsq"},{"post_id":"ckw1v1f7e000ciotw96r95oth","tag_id":"ckw1v1f7s001tiotw8ocgcgo6","_id":"ckw1v1f7t0022iotw33926trn"},{"post_id":"ckw1v1f7e000ciotw96r95oth","tag_id":"ckw1v1f7s001xiotwdjq4fdz5","_id":"ckw1v1f7t0023iotwfifk4k6b"},{"post_id":"ckw1v1f7j000miotw4emq6v38","tag_id":"ckw1v1f7t0021iotw3kmdfgcz","_id":"ckw1v1f7u0029iotwdy9v0y56"},{"post_id":"ckw1v1f7j000miotw4emq6v38","tag_id":"ckw1v1f7t0024iotw13wkegoa","_id":"ckw1v1f7v002aiotw920bgsfu"},{"post_id":"ckw1v1f7j000miotw4emq6v38","tag_id":"ckw1v1f7s001xiotwdjq4fdz5","_id":"ckw1v1f7v002ciotwbhlbet52"},{"post_id":"ckw1v1f7j000miotw4emq6v38","tag_id":"ckw1v1f7u0026iotw4zaq3ghi","_id":"ckw1v1f7v002diotw6u2za9uy"},{"post_id":"ckw1v1f7j000miotw4emq6v38","tag_id":"ckw1v1f7u0027iotwfsr7a5ns","_id":"ckw1v1f7v002eiotwg4mk0q3t"},{"post_id":"ckw1v1f7k000piotw62ubcuo4","tag_id":"ckw1v1f7u0028iotw8a1oehb5","_id":"ckw1v1f7v002fiotwc5tt99ew"},{"post_id":"ckw1v1f7k000piotw62ubcuo4","tag_id":"ckw1v1f7v002biotwh6w51ho8","_id":"ckw1v1f7v002giotweap44mx9"},{"post_id":"ckw1v1f7w002hiotw875pgczt","tag_id":"ckw1v1f7k000oiotw5ziw2d26","_id":"ckw1v1f7x002iiotw0nf49b8e"},{"post_id":"ckw1v1f7w002hiotw875pgczt","tag_id":"ckw1v1f7u0026iotw4zaq3ghi","_id":"ckw1v1f7x002jiotwaremezj5"},{"post_id":"ckw1v1f7w002hiotw875pgczt","tag_id":"ckw1v1f7s001xiotwdjq4fdz5","_id":"ckw1v1f7x002kiotw9tf48jfg"}],"Tag":[{"name":"git","_id":"ckw1v1f780004iotwb961evgl"},{"name":"github","_id":"ckw1v1f7c0009iotw02wwcyvu"},{"name":"Hexo","_id":"ckw1v1f7f000eiotwbjaqcv0n"},{"name":"Next","_id":"ckw1v1f7h000kiotw1y9jclz7"},{"name":"python","_id":"ckw1v1f7k000oiotw5ziw2d26"},{"name":"tuple","_id":"ckw1v1f7m000tiotw3ob58wpz"},{"name":"list","_id":"ckw1v1f7n000yiotw5zop6mvw"},{"name":"ndarray","_id":"ckw1v1f7o0012iotw0o9w2rmi"},{"name":"numpy","_id":"ckw1v1f7o0016iotw446w0jaz"},{"name":"matplotlib","_id":"ckw1v1f7q001giotw1qmq0pn8"},{"name":"tensorboard","_id":"ckw1v1f7s001tiotw8ocgcgo6"},{"name":"pytorch","_id":"ckw1v1f7s001xiotwdjq4fdz5"},{"name":"tensorflow","_id":"ckw1v1f7t0021iotw3kmdfgcz"},{"name":"tfrecords","_id":"ckw1v1f7t0024iotw13wkegoa"},{"name":"dataloader","_id":"ckw1v1f7u0026iotw4zaq3ghi"},{"name":"iterator","_id":"ckw1v1f7u0027iotwfsr7a5ns"},{"name":"torch","_id":"ckw1v1f7u0028iotw8a1oehb5"},{"name":"dataenhance","_id":"ckw1v1f7v002biotwh6w51ho8"}]}}