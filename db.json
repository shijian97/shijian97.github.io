{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane.jpg","path":"images/crane.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane2.jpg","path":"images/crane2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane3.jpg","path":"images/crane3.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/crane4.jpg","path":"images/crane4.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-taiji.png","path":"images/favicon-16x16-taiji.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-taiji.png","path":"images/favicon-32x32-taiji.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/jiraiya.jpg","path":"images/jiraiya.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/about-cppSTL.md","hash":"32e61372a4e1dedd0fbaae2e07495e6cb98c60b6","modified":1637684351391},{"_id":"source/_posts/about-git.md","hash":"199c6d42c1852b78a754ddaa6bd93e3094a3069b","modified":1637557514655},{"_id":"source/_posts/about-list-tuple-array.md","hash":"0fe7f6200ef1cccd89e98d13a01f6f74acf5b76d","modified":1637557514655},{"_id":"source/_posts/about-matplotlib.md","hash":"8ab210ae08695772782226282d503a35ccee787b","modified":1637557514655},{"_id":"source/_posts/about-hexo.md","hash":"c149ff4eceb83e1eb3a2eb25018b4481aaaaea4d","modified":1637557514655},{"_id":"source/_posts/about-plan.md","hash":"ff495e2e62d93f94f17a38801b330df085d4848e","modified":1637557514655},{"_id":"source/_posts/about-python.md","hash":"75e41e3e05b5b120f85e34c96634a06ce8a04016","modified":1637557514655},{"_id":"source/_posts/about-tensorboard.md","hash":"d2da7cde290fd931d20106d44c031d27703caac2","modified":1637557514655},{"_id":"source/_posts/about-thinking-21-8-29.md","hash":"d0e2ca5131fb1a400f9e8ea484caf3574257970a","modified":1637557514655},{"_id":"source/_posts/about-thinking-21-9-7.md","hash":"76c1fd41686f16f196568ce2b995f4ff15890d84","modified":1637557514655},{"_id":"source/_posts/about-torch-dataenhance.md","hash":"696ce83d2f9dd394b342e4d96b5c2dc0d4a4b2b7","modified":1637557514655},{"_id":"source/_posts/hello-world.md","hash":"e77279ccee188f032078449b9a241f94b3a3cb87","modified":1637557514655},{"_id":"source/_posts/iterator-and-generator.md","hash":"9125ddf789859c03243283a5f807fe18ab73a969","modified":1637557514655},{"_id":"source/_posts/make-torchdataloader-with-tfrecs.md","hash":"e632491bf066a0e6317032054f347a4a1df0f03d","modified":1637557514655},{"_id":"source/categories/index.md","hash":"e07ab52c8674b400a127ab89d2fb935494938da1","modified":1637557514655},{"_id":"source/tags/index.md","hash":"fb6b0b8cf04b10d2aac6c6ab8e465bfe61cbe067","modified":1637557514655},{"_id":"source/_posts/itachi.jpg","hash":"14f2f9af2bc0b53ec1f53141273c4898f75c646b","modified":1637557514655},{"_id":"source/_posts/about-hexo/itachi.jpg","hash":"14f2f9af2bc0b53ec1f53141273c4898f75c646b","modified":1637557514655},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1637557514680},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1637557514680},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1637557514680},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1637557514680},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1637557514680},{"_id":"themes/next/_config.yml","hash":"bfdbbec463956ed944fe98aea1ae7192eb696fae","modified":1639237542995},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1637557514680},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1637557514680},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1637557514685},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1637557514705},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1637557514680},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1637557514680},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1637557514680},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1637557514680},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1637557514680},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1637557514680},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1637557514680},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1637557514680},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1637557514685},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1637557514685},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1637557514685},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1637557514685},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1637557514685},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1637557514685},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1637557514685},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1637557514680},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1637557514685},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1637557514685},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1637557514685},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1637557514685},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1637557514685},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1637557514685},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1637557514685},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1637557514685},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1637557514685},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1637557514685},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1637557514685},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1637557514685},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1637557514685},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1637557514685},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1637557514685},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1637557514685},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1637557514705},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1637557514705},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1637557514705},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1637557514705},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1637557514705},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1637557514705},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1637557514710},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1637557514680},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1637557514680},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1637557514680},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1637557514685},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1637557514685},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1637557514685},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1637557514685},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1637557514685},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1637557514685},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1637557514685},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1637557514685},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1637557514695},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1637557514695},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1637557514695},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1637557514695},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1637557514695},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1637557514695},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1637557514695},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1637557514695},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1637557514695},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1637557514695},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1637557514695},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1637557514705},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1637557514710},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1637557514710},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1637557514710},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1637557514710},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1637557514710},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1637557514710},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1637557514710},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1637557514710},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1637557514710},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1637557514710},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1637557514710},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1637557514710},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1637557514710},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1637557514710},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1637557514710},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1637557514710},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1637557514710},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1637557514710},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1637557514710},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1637557514710},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1637557514725},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1637557514730},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637557514730},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637557514730},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637557514730},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1637557514730},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1637557514730},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1637557514730},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1637557514730},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1637557514735},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1637557514735},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1637557514735},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637557514735},{"_id":"themes/next/source/images/favicon-16x16-taiji.png","hash":"aa2582201f8ab617ff204678f43d304c99e1c664","modified":1637557514735},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637557514735},{"_id":"themes/next/source/images/favicon-32x32-taiji.png","hash":"4f75f0109a64a60d418e23d913bff6a567a7369f","modified":1637557514735},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1637557514740},{"_id":"themes/next/source/images/jiraiya.jpg","hash":"08f21ef4360ef35e5cf390a8e0fb3401c928650f","modified":1637557514735},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637557514740},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637557514740},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637557514740},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637557514740},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637557514740},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637557514740},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1637557514685},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637557514740},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1637557514685},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1637557514685},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1637557514685},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1637557514685},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1637557514685},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1637557514685},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1637557514695},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1637557514695},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1637557514695},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1637557514695},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1637557514695},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1637557514695},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1637557514695},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1637557514695},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1637557514695},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1637557514695},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1637557514695},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1637557514695},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637557514695},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637557514695},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1637557514695},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1637557514695},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1637557514695},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1637557514695},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1637557514695},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1637557514695},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1637557514695},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1637557514695},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1637557514695},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1637557514695},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1637557514695},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1637557514695},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1637557514695},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1637557514695},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1637557514695},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1637557514695},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1637557514695},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1637557514695},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1637557514695},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1637557514695},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1637557514695},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1637557514705},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1637557514705},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1637557514705},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1637557514705},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1637557514705},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1637557514705},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1637557514705},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1637557514705},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1637557514705},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1637557514705},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1637557514705},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1637557514705},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1637557514705},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1637557514705},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1637557514710},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1637557514710},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1637557514710},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1637557514730},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1637557514730},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1637557514730},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1637557514730},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1637557514730},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637557514740},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637557514740},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637557514745},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637557514745},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1637557514710},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1637557514715},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1637557514720},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1637557514720},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1637557514720},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1637557514720},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1637557514725},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"3f9d7a43310f9c9f4a33ede8ecbc5432cd1b833e","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1637557514730},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1637557514730},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637557514740},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637557514740},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1637557514715},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1637557514715},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1637557514720},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1637557514715},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1637557514720},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1637557514720},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1637557514720},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1637557514720},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1637557514725},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1637557514725},{"_id":"themes/next/source/images/crane.jpg","hash":"c70da733647035074964ac0e2086b9e0d98e9735","modified":1637557514735},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637557514740},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637557514740},{"_id":"themes/next/source/images/crane4.jpg","hash":"4eb50f5f21185a7db8cebcd7aec074a0f5735cb9","modified":1637557514735},{"_id":"themes/next/source/images/crane2.jpg","hash":"b78fc9a700b230eab0b8acce85089e0f9441ff29","modified":1637557514735},{"_id":"themes/next/source/images/crane3.jpg","hash":"2cadea401cbcd09c2d84f61c2281a08a32f34118","modified":1637557514735},{"_id":"public/categories/index.html","hash":"4a035fe6da898a55f02676156c910b7bf2942b2a","modified":1639237605833},{"_id":"public/tags/index.html","hash":"3fb67877c97a14e4ab2fb3b5259b472b8ce9c511","modified":1639237605833},{"_id":"public/2021/11/22/hello-world/index.html","hash":"830a324003b7868daa5c7c2b1f2b02a88cbf9378","modified":1639237605833},{"_id":"public/2021/09/14/about-plan/index.html","hash":"19e4bab842a73b5db3d6371ce2bae009f59b4cc5","modified":1639237605833},{"_id":"public/2021/09/07/about-thinking-21-9-7/index.html","hash":"430b2f0b82d989e975fc422a67fb159dbf767609","modified":1639237605833},{"_id":"public/2021/09/07/about-torch-dataenhance/index.html","hash":"a2b7025289e20198a6bd9ec25a8bb9d1e99eaeaa","modified":1639237605833},{"_id":"public/2021/09/05/about-tensorboard/index.html","hash":"349c2ba4f7790aec0d722d2ec8885e914d8842cc","modified":1639237605833},{"_id":"public/2021/08/31/about-python/index.html","hash":"ee5ff96c5ebc4c6e24a5727599b7eaa3fb4df623","modified":1639237605833},{"_id":"public/2021/08/30/about-thinking-21-8-29/index.html","hash":"801ad211d36ccbe2de8dfb61757a42f75378e223","modified":1639237605833},{"_id":"public/2021/08/24/about-git/index.html","hash":"dee871001a6f9cfb90949390504b95490228758d","modified":1639237605833},{"_id":"public/archives/page/2/index.html","hash":"05cf9b534c29583c15c46a11ea5b25f9b2fa7685","modified":1639237605833},{"_id":"public/archives/index.html","hash":"aa7f68a0c4a9bbdbaa5bbff1669cdb0b5cbd6c6e","modified":1639237605833},{"_id":"public/archives/2021/index.html","hash":"15ea8402f49f82a0654b1b31026a7478649f5dc3","modified":1639237605833},{"_id":"public/archives/2021/page/2/index.html","hash":"71d65bb34bfd2339245b4584edebc95a754eeb08","modified":1639237605833},{"_id":"public/archives/2021/08/index.html","hash":"9855c79024ef7990d192a5c83435ae60458f6954","modified":1639237605833},{"_id":"public/archives/2021/09/index.html","hash":"21d98a253cce87f202a4100438d11137185756f4","modified":1639237605833},{"_id":"public/archives/2021/11/index.html","hash":"930a3f1aab54dd501b2643ed9731932ff46be0f9","modified":1639237605833},{"_id":"public/categories/学习/index.html","hash":"a178878f2414b0b82977fcdf968b48f1608c09ba","modified":1639237605833},{"_id":"public/categories/学习/coding/index.html","hash":"cd53aba88994ccb4d167a29c5735c3b23e71b81a","modified":1639237605833},{"_id":"public/categories/生活/index.html","hash":"d9a4b58af1bcdfcf3c6b88eef1a3371713622804","modified":1639237605833},{"_id":"public/categories/生活/感悟/index.html","hash":"9d9e8b98c0986e5ecf3c0541d0c4fd88414148fe","modified":1639237605833},{"_id":"public/tags/C/index.html","hash":"2fb55c2e9958ae882a1fc3bbd3a601abfc1fea9f","modified":1639237605833},{"_id":"public/tags/STL/index.html","hash":"0ff2ed4e11e8958e3f19cd8e4a2c2dbb31fe66eb","modified":1639237605833},{"_id":"public/tags/git/index.html","hash":"6e4f50753a3deb5b86cfc194b774c6f836e5279b","modified":1639237605833},{"_id":"public/tags/github/index.html","hash":"fcf306870eaf8be9051a64d783eb98e435f8cb67","modified":1639237605833},{"_id":"public/tags/Hexo/index.html","hash":"d00c68d3f3451ba161210f07796f1fdaf5bb95f5","modified":1639237605833},{"_id":"public/tags/Next/index.html","hash":"5767daeb54e05214b6726a5f63304f333e49b4e0","modified":1639237605833},{"_id":"public/tags/python/index.html","hash":"691c89af93a2dba170ad625b536e0eeaccbbce21","modified":1639237605833},{"_id":"public/tags/tuple/index.html","hash":"ea495f6c72098d00370ae291796f3c558b8a7f98","modified":1639237605833},{"_id":"public/tags/list/index.html","hash":"d0a991d3b11db5c54d636aea77399d2bd0ce70bf","modified":1639237605833},{"_id":"public/tags/ndarray/index.html","hash":"3ad2961e799fd5c0b30e3db03433e62a8200b2d2","modified":1639237605833},{"_id":"public/tags/numpy/index.html","hash":"484712880725495d068e8fbc9d6019a8a99e7b38","modified":1639237605833},{"_id":"public/tags/matplotlib/index.html","hash":"01c6b9a5fa6930f09692ca0090f7a05f34869027","modified":1639237605833},{"_id":"public/tags/tensorboard/index.html","hash":"dc4f55fd959622e78c5a2ad1a47491e78361135b","modified":1639237605833},{"_id":"public/tags/pytorch/index.html","hash":"702cb7447a87fb52b9d62507a626a34ff63250b1","modified":1639237605833},{"_id":"public/tags/torch/index.html","hash":"5b9b7db7540a57374760772813681990c5077dcb","modified":1639237605833},{"_id":"public/tags/dataenhance/index.html","hash":"2c672ba23dc469b21c8ae89ebb2258be063169b8","modified":1639237605833},{"_id":"public/tags/dataloader/index.html","hash":"a2094aab811c23f44319fbc13add495e35d3e19c","modified":1639237605833},{"_id":"public/tags/tensorflow/index.html","hash":"3c06a9cd9ccd00003548cbcabc4c32c860b07214","modified":1639237605833},{"_id":"public/tags/tfrecords/index.html","hash":"ddea89b752fe48d7ba2c3eb16dc96ce47f74714a","modified":1639237605833},{"_id":"public/tags/iterator/index.html","hash":"55cbccf3f32d2a18fb78420bcdb9eb19b7a0de77","modified":1639237605833},{"_id":"public/2021/11/22/about-cppSTL/index.html","hash":"5fab42bbaff3cbb4f5b0c774c9dcd1abffd6714e","modified":1639237605833},{"_id":"public/2021/08/31/about-matplotlib/index.html","hash":"6bc329471273f5d655e68dde1c7bbead8999a730","modified":1639237605833},{"_id":"public/2021/08/31/about-list-tuple-array/index.html","hash":"18a099d3b37d3a6e4851141578ec55c514ef542c","modified":1639237605833},{"_id":"public/2021/08/25/iterator-and-generator/index.html","hash":"d1b4a866481a013d03730e2687e5e3726f2a02a0","modified":1639237605833},{"_id":"public/2021/08/25/make-torchdataloader-with-tfrecs/index.html","hash":"43fa78f5670217e223d1cee6d4b0b2bf3b06a755","modified":1639237605833},{"_id":"public/2021/08/23/about-hexo/index.html","hash":"84b03c1a17f33178997bdac9eba413dc6c2653a6","modified":1639237605833},{"_id":"public/index.html","hash":"eceefba474036c99b50a083b4392ce030c4140b7","modified":1639239131698},{"_id":"public/page/2/index.html","hash":"c17cd04ab5ebfa5f8f4c239225df8bbd0f4c11c5","modified":1639237605833},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1637683895034},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1637683895034},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637683895034},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1637683895034},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1637683895034},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1637683895034},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1637683895034},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1637683895034},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1637683895034},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1637683895034},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1637683895034},{"_id":"public/images/favicon-16x16-taiji.png","hash":"aa2582201f8ab617ff204678f43d304c99e1c664","modified":1637683895034},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1637683895034},{"_id":"public/images/favicon-32x32-taiji.png","hash":"4f75f0109a64a60d418e23d913bff6a567a7369f","modified":1637683895034},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1637683895034},{"_id":"public/images/jiraiya.jpg","hash":"08f21ef4360ef35e5cf390a8e0fb3401c928650f","modified":1637683895034},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637683895034},{"_id":"public/images/crane.jpg","hash":"c70da733647035074964ac0e2086b9e0d98e9735","modified":1637683895034},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637683895034},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637683895034},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637683895034},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637683895034},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637683895034},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637683895034},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637683895034},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637683895034},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637683895034},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637683895034},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637683895034},{"_id":"public/css/main.css","hash":"de2c872bd85b2ebe767748c4e6825d19ba98bb9a","modified":1637683895034},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637683895034},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637683895034},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637683895034},{"_id":"public/images/crane4.jpg","hash":"4eb50f5f21185a7db8cebcd7aec074a0f5735cb9","modified":1637683895034},{"_id":"public/2021/08/23/about-hexo/itachi.jpg","hash":"14f2f9af2bc0b53ec1f53141273c4898f75c646b","modified":1637683895034},{"_id":"public/images/crane2.jpg","hash":"b78fc9a700b230eab0b8acce85089e0f9441ff29","modified":1637683895034},{"_id":"public/images/crane3.jpg","hash":"2cadea401cbcd09c2d84f61c2281a08a32f34118","modified":1637683895034},{"_id":"source/_posts/about-camera-para-and-exif.md","hash":"847e078371a7b5a5c30fcb3b71fd602654a3e723","modified":1639238585337},{"_id":"public/2021/12/11/about-camera-para-and-exif/index.html","hash":"9ba2b07bfd1ffad8e8f3330f39182ac6ceb897d5","modified":1639239131698},{"_id":"public/archives/2021/12/index.html","hash":"bf9ac58871b01f27a3fb98ec40f138e693151758","modified":1639237605833},{"_id":"public/categories/学习/page/2/index.html","hash":"8e2a79dd76b662c05c17f2da1a4abf4b43d6fb92","modified":1639237605833},{"_id":"public/categories/学习/coding/page/2/index.html","hash":"996ad4c0df376d4ef4f34603dd427e3a535a07ff","modified":1639237605833},{"_id":"public/tags/相机内参/index.html","hash":"69113dd281146d934e7460d60ebcffc051bb2027","modified":1639237605833},{"_id":"public/tags/EXIF/index.html","hash":"65d2d0659e960cf3fcb4153fb9bf6e91b7e1c047","modified":1639237605833}],"Category":[{"name":"学习","_id":"ckwcapgz000064cvhf3ybhtk3"},{"name":"coding","parent":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgz5000j4cvh7cm236xx"},{"name":"生活","_id":"ckwcapgzc001g4cvh1ysvgy95"},{"name":"感悟","parent":"ckwcapgzc001g4cvh1ysvgy95","_id":"ckwcapgzd001o4cvh048sau1h"}],"Data":[],"Page":[{"title":"分类","date":"2021-08-23T07:30:16.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-08-23 15:30:16\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-11-22T05:05:14.655Z","path":"categories/index.html","layout":"page","_id":"ckwcapgyt00004cvhbagf7ki3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-08-23T07:30:36.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-08-23 15:30:36\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-11-22T05:05:14.655Z","path":"tags/index.html","layout":"page","_id":"ckwcapgyx00024cvh7ifx0hdj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C++STL容器","date":"2021-11-22T05:22:58.000Z","_content":"\nC++中STL常见容器的一些常用方法。\n<!-- more -->\n\n### 顺序容器\n顺序容器有以下三种：可变长动态数组 vector、双端队列 deque、双向链表 list。\n它们之所以被称为顺序容器，是因为元素在容器中的位置同元素的值无关，即容器不是排序的。将元素插入容器时，指定在什么位置（尾部、头部或中间某处）插入，元素就会位于什么位置。\n\n#### vector\n头文件 `include<vector>`\n初始化 `vector<struc> vec;`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| vec.size() | 返回vector长度 | int |\n| vec.empty() | 判断vector是否为空 | bool |\n| vec.push_back(x) | 尾部添加元素 | 无返回值 |\n| vec.pop_back() | 删除尾部元素 | 无返回值 |\n| vec.begin() | 指向首位置的迭代器 | vector<struc>::iterator iter = vec.begin() |\n| vec.end() | 返回最后一个元素的下一个位置的迭代器 | 同上 |\n| vec.front() | 返回第一个元素的引用 | struc |\n| vec.back() | 返回最后一个元素的引用 | struc |\n| vec[0] | 返回首位置的值 | struc |\n\n#### deque（双端队列）\n头文件 `include<deque>`\n初始化 `deque<struc> deq;`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| deq.size() | 返回deque长度 | int |\n| deq.empty() | 判断deque是否为空 | bool |\n| deq.push_back(x) | 尾部添加元素 | 无返回值 |\n| deq.push_front(x) | 头部添加元素 | 无返回值 |\n| deq.pop_back() | 删除尾部元素 | 无返回值 |\n| deq.pop_front() | 删除头部元素 | 无返回值 |\n| deq.begin() | 指向首位置的迭代器 | deque<struc>::iterator iter = deq.begin() |\n| deq.end() | 返回最后一个元素的下一个位置的迭代器 | 同上 |\n| deq.front() | 返回第一个元素的引用 | struc |\n| deq.back() | 返回最后一个元素的引用 | struc |\n\n#### list\n头文件 `include<list>`\n初始化 `list<struc> li;`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| li.size() | 返回li长度 | int |\n| li.empty() | 判断li是否为空 | bool |\n| li.push_back(x) | 尾部添加元素 | 无返回值 |\n| li.push_front(x) | 头部添加元素 | 无返回值 |\n| li.pop_back() | 删除尾部元素 | 无返回值 |\n| li.pop_front() | 删除头部元素 | 无返回值 |\n| li.begin() | 指向首位置的双向迭代器 | list<struc>::iterator iter = li.begin() |\n| li.end() | 返回最后一个元素的下一个位置的双向迭代器 | 同上 |\n| li.front() | 返回第一个元素的引用 | struc |\n| li.back() | 返回最后一个元素的引用 | struc |\n\n顺序容器总结有如下常用成员函数\nfront()：返回容器中第一个元素的引用。\nback()：返回容器中最后一个元素的引用。\npush_back()：在容器末尾增加新元素。\npop_back()：删除容器末尾的元素。\ninsert(...)：插入一个或多个元素。该函数参数较复杂，此处省略。\n\n### 容器适配器\n栈 stack、队列 queue、优先级队列 priority_queue。\n\n#### queue\n特点：先进先出\n\n头文件 `include<queue>`\n初始化 `queue<struc> que`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| que.size() | 返回que长度 | int |\n","source":"_posts/about-cppSTL.md","raw":"---\ntitle: C++STL容器\ndate: 2021-11-22 13:22:58\ntags:\n- C++\n- STL\ncategories:\n- [学习, coding]\n---\n\nC++中STL常见容器的一些常用方法。\n<!-- more -->\n\n### 顺序容器\n顺序容器有以下三种：可变长动态数组 vector、双端队列 deque、双向链表 list。\n它们之所以被称为顺序容器，是因为元素在容器中的位置同元素的值无关，即容器不是排序的。将元素插入容器时，指定在什么位置（尾部、头部或中间某处）插入，元素就会位于什么位置。\n\n#### vector\n头文件 `include<vector>`\n初始化 `vector<struc> vec;`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| vec.size() | 返回vector长度 | int |\n| vec.empty() | 判断vector是否为空 | bool |\n| vec.push_back(x) | 尾部添加元素 | 无返回值 |\n| vec.pop_back() | 删除尾部元素 | 无返回值 |\n| vec.begin() | 指向首位置的迭代器 | vector<struc>::iterator iter = vec.begin() |\n| vec.end() | 返回最后一个元素的下一个位置的迭代器 | 同上 |\n| vec.front() | 返回第一个元素的引用 | struc |\n| vec.back() | 返回最后一个元素的引用 | struc |\n| vec[0] | 返回首位置的值 | struc |\n\n#### deque（双端队列）\n头文件 `include<deque>`\n初始化 `deque<struc> deq;`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| deq.size() | 返回deque长度 | int |\n| deq.empty() | 判断deque是否为空 | bool |\n| deq.push_back(x) | 尾部添加元素 | 无返回值 |\n| deq.push_front(x) | 头部添加元素 | 无返回值 |\n| deq.pop_back() | 删除尾部元素 | 无返回值 |\n| deq.pop_front() | 删除头部元素 | 无返回值 |\n| deq.begin() | 指向首位置的迭代器 | deque<struc>::iterator iter = deq.begin() |\n| deq.end() | 返回最后一个元素的下一个位置的迭代器 | 同上 |\n| deq.front() | 返回第一个元素的引用 | struc |\n| deq.back() | 返回最后一个元素的引用 | struc |\n\n#### list\n头文件 `include<list>`\n初始化 `list<struc> li;`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| li.size() | 返回li长度 | int |\n| li.empty() | 判断li是否为空 | bool |\n| li.push_back(x) | 尾部添加元素 | 无返回值 |\n| li.push_front(x) | 头部添加元素 | 无返回值 |\n| li.pop_back() | 删除尾部元素 | 无返回值 |\n| li.pop_front() | 删除头部元素 | 无返回值 |\n| li.begin() | 指向首位置的双向迭代器 | list<struc>::iterator iter = li.begin() |\n| li.end() | 返回最后一个元素的下一个位置的双向迭代器 | 同上 |\n| li.front() | 返回第一个元素的引用 | struc |\n| li.back() | 返回最后一个元素的引用 | struc |\n\n顺序容器总结有如下常用成员函数\nfront()：返回容器中第一个元素的引用。\nback()：返回容器中最后一个元素的引用。\npush_back()：在容器末尾增加新元素。\npop_back()：删除容器末尾的元素。\ninsert(...)：插入一个或多个元素。该函数参数较复杂，此处省略。\n\n### 容器适配器\n栈 stack、队列 queue、优先级队列 priority_queue。\n\n#### queue\n特点：先进先出\n\n头文件 `include<queue>`\n初始化 `queue<struc> que`\n\n| 函数名  | 作用   | 返回值   |\n| :-----| :-----| :--------|\n| que.size() | 返回que长度 | int |\n","slug":"about-cppSTL","published":1,"updated":"2021-11-23T16:19:11.391Z","_id":"ckwcapgyv00014cvh56448oos","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C++中STL常见容器的一些常用方法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"顺序容器\"><a href=\"#顺序容器\" class=\"headerlink\" title=\"顺序容器\"></a>顺序容器</h3><p>顺序容器有以下三种：可变长动态数组 vector、双端队列 deque、双向链表 list。<br>它们之所以被称为顺序容器，是因为元素在容器中的位置同元素的值无关，即容器不是排序的。将元素插入容器时，指定在什么位置（尾部、头部或中间某处）插入，元素就会位于什么位置。</p>\n<h4 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h4><p>头文件 <code>include&lt;vector&gt;</code><br>初始化 <code>vector&lt;struc&gt; vec;</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">vec.size()</td>\n<td align=\"left\">返回vector长度</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">vec.empty()</td>\n<td align=\"left\">判断vector是否为空</td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">vec.push_back(x)</td>\n<td align=\"left\">尾部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">vec.pop_back()</td>\n<td align=\"left\">删除尾部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">vec.begin()</td>\n<td align=\"left\">指向首位置的迭代器</td>\n<td align=\"left\">vector<struc>::iterator iter = vec.begin()</td>\n</tr>\n<tr>\n<td align=\"left\">vec.end()</td>\n<td align=\"left\">返回最后一个元素的下一个位置的迭代器</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">vec.front()</td>\n<td align=\"left\">返回第一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">vec.back()</td>\n<td align=\"left\">返回最后一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">vec[0]</td>\n<td align=\"left\">返回首位置的值</td>\n<td align=\"left\">struc</td>\n</tr>\n</tbody></table>\n<h4 id=\"deque（双端队列）\"><a href=\"#deque（双端队列）\" class=\"headerlink\" title=\"deque（双端队列）\"></a>deque（双端队列）</h4><p>头文件 <code>include&lt;deque&gt;</code><br>初始化 <code>deque&lt;struc&gt; deq;</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">deq.size()</td>\n<td align=\"left\">返回deque长度</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">deq.empty()</td>\n<td align=\"left\">判断deque是否为空</td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">deq.push_back(x)</td>\n<td align=\"left\">尾部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.push_front(x)</td>\n<td align=\"left\">头部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.pop_back()</td>\n<td align=\"left\">删除尾部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.pop_front()</td>\n<td align=\"left\">删除头部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.begin()</td>\n<td align=\"left\">指向首位置的迭代器</td>\n<td align=\"left\">deque<struc>::iterator iter = deq.begin()</td>\n</tr>\n<tr>\n<td align=\"left\">deq.end()</td>\n<td align=\"left\">返回最后一个元素的下一个位置的迭代器</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">deq.front()</td>\n<td align=\"left\">返回第一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">deq.back()</td>\n<td align=\"left\">返回最后一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n</tbody></table>\n<h4 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h4><p>头文件 <code>include&lt;list&gt;</code><br>初始化 <code>list&lt;struc&gt; li;</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">li.size()</td>\n<td align=\"left\">返回li长度</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">li.empty()</td>\n<td align=\"left\">判断li是否为空</td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">li.push_back(x)</td>\n<td align=\"left\">尾部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.push_front(x)</td>\n<td align=\"left\">头部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.pop_back()</td>\n<td align=\"left\">删除尾部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.pop_front()</td>\n<td align=\"left\">删除头部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.begin()</td>\n<td align=\"left\">指向首位置的双向迭代器</td>\n<td align=\"left\">list<struc>::iterator iter = li.begin()</td>\n</tr>\n<tr>\n<td align=\"left\">li.end()</td>\n<td align=\"left\">返回最后一个元素的下一个位置的双向迭代器</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">li.front()</td>\n<td align=\"left\">返回第一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">li.back()</td>\n<td align=\"left\">返回最后一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n</tbody></table>\n<p>顺序容器总结有如下常用成员函数<br>front()：返回容器中第一个元素的引用。<br>back()：返回容器中最后一个元素的引用。<br>push_back()：在容器末尾增加新元素。<br>pop_back()：删除容器末尾的元素。<br>insert(…)：插入一个或多个元素。该函数参数较复杂，此处省略。</p>\n<h3 id=\"容器适配器\"><a href=\"#容器适配器\" class=\"headerlink\" title=\"容器适配器\"></a>容器适配器</h3><p>栈 stack、队列 queue、优先级队列 priority_queue。</p>\n<h4 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h4><p>特点：先进先出</p>\n<p>头文件 <code>include&lt;queue&gt;</code><br>初始化 <code>queue&lt;struc&gt; que</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">que.size()</td>\n<td align=\"left\">返回que长度</td>\n<td align=\"left\">int</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>C++中STL常见容器的一些常用方法。</p>","more":"<h3 id=\"顺序容器\"><a href=\"#顺序容器\" class=\"headerlink\" title=\"顺序容器\"></a>顺序容器</h3><p>顺序容器有以下三种：可变长动态数组 vector、双端队列 deque、双向链表 list。<br>它们之所以被称为顺序容器，是因为元素在容器中的位置同元素的值无关，即容器不是排序的。将元素插入容器时，指定在什么位置（尾部、头部或中间某处）插入，元素就会位于什么位置。</p>\n<h4 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h4><p>头文件 <code>include&lt;vector&gt;</code><br>初始化 <code>vector&lt;struc&gt; vec;</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">vec.size()</td>\n<td align=\"left\">返回vector长度</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">vec.empty()</td>\n<td align=\"left\">判断vector是否为空</td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">vec.push_back(x)</td>\n<td align=\"left\">尾部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">vec.pop_back()</td>\n<td align=\"left\">删除尾部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">vec.begin()</td>\n<td align=\"left\">指向首位置的迭代器</td>\n<td align=\"left\">vector<struc>::iterator iter = vec.begin()</td>\n</tr>\n<tr>\n<td align=\"left\">vec.end()</td>\n<td align=\"left\">返回最后一个元素的下一个位置的迭代器</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">vec.front()</td>\n<td align=\"left\">返回第一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">vec.back()</td>\n<td align=\"left\">返回最后一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">vec[0]</td>\n<td align=\"left\">返回首位置的值</td>\n<td align=\"left\">struc</td>\n</tr>\n</tbody></table>\n<h4 id=\"deque（双端队列）\"><a href=\"#deque（双端队列）\" class=\"headerlink\" title=\"deque（双端队列）\"></a>deque（双端队列）</h4><p>头文件 <code>include&lt;deque&gt;</code><br>初始化 <code>deque&lt;struc&gt; deq;</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">deq.size()</td>\n<td align=\"left\">返回deque长度</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">deq.empty()</td>\n<td align=\"left\">判断deque是否为空</td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">deq.push_back(x)</td>\n<td align=\"left\">尾部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.push_front(x)</td>\n<td align=\"left\">头部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.pop_back()</td>\n<td align=\"left\">删除尾部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.pop_front()</td>\n<td align=\"left\">删除头部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">deq.begin()</td>\n<td align=\"left\">指向首位置的迭代器</td>\n<td align=\"left\">deque<struc>::iterator iter = deq.begin()</td>\n</tr>\n<tr>\n<td align=\"left\">deq.end()</td>\n<td align=\"left\">返回最后一个元素的下一个位置的迭代器</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">deq.front()</td>\n<td align=\"left\">返回第一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">deq.back()</td>\n<td align=\"left\">返回最后一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n</tbody></table>\n<h4 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h4><p>头文件 <code>include&lt;list&gt;</code><br>初始化 <code>list&lt;struc&gt; li;</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">li.size()</td>\n<td align=\"left\">返回li长度</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">li.empty()</td>\n<td align=\"left\">判断li是否为空</td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">li.push_back(x)</td>\n<td align=\"left\">尾部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.push_front(x)</td>\n<td align=\"left\">头部添加元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.pop_back()</td>\n<td align=\"left\">删除尾部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.pop_front()</td>\n<td align=\"left\">删除头部元素</td>\n<td align=\"left\">无返回值</td>\n</tr>\n<tr>\n<td align=\"left\">li.begin()</td>\n<td align=\"left\">指向首位置的双向迭代器</td>\n<td align=\"left\">list<struc>::iterator iter = li.begin()</td>\n</tr>\n<tr>\n<td align=\"left\">li.end()</td>\n<td align=\"left\">返回最后一个元素的下一个位置的双向迭代器</td>\n<td align=\"left\">同上</td>\n</tr>\n<tr>\n<td align=\"left\">li.front()</td>\n<td align=\"left\">返回第一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n<tr>\n<td align=\"left\">li.back()</td>\n<td align=\"left\">返回最后一个元素的引用</td>\n<td align=\"left\">struc</td>\n</tr>\n</tbody></table>\n<p>顺序容器总结有如下常用成员函数<br>front()：返回容器中第一个元素的引用。<br>back()：返回容器中最后一个元素的引用。<br>push_back()：在容器末尾增加新元素。<br>pop_back()：删除容器末尾的元素。<br>insert(…)：插入一个或多个元素。该函数参数较复杂，此处省略。</p>\n<h3 id=\"容器适配器\"><a href=\"#容器适配器\" class=\"headerlink\" title=\"容器适配器\"></a>容器适配器</h3><p>栈 stack、队列 queue、优先级队列 priority_queue。</p>\n<h4 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h4><p>特点：先进先出</p>\n<p>头文件 <code>include&lt;queue&gt;</code><br>初始化 <code>queue&lt;struc&gt; que</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">que.size()</td>\n<td align=\"left\">返回que长度</td>\n<td align=\"left\">int</td>\n</tr>\n</tbody></table>"},{"layout":"post","title":"git相关知识","date":"2021-08-23T16:00:00.000Z","_content":"\n记录学习git的一些问题\n<!-- more -->\n\n###  1 工作区、暂存区、版本库\n基本概念：\n- **工作区**：PC中的目录\n- **暂存区**：称为stage或index，一般存放在`.git`目录下的index文件中，故也称其为索引\n- **版本库**：工作区的隐藏文件`.git`不算工作区而是版本库\n&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。\n\n### 2 Git基本操作\n预先说明，几个库：*workspace*, *staging area*, *local repository*, *remote reposity*\n- **git pull**：*remote reposity* ->*workspace* \n- **git add**：*workspace*->*staging area*\n- **git commit**：*staging area*->*local repository*\n- **git push**：*local repository*->*remote reposity*\n- git fetch/clone：*remote reposity*->*local repository*\n- git checkout：*local repository*->*workspace*\n- git reset：回退版本\n- git rm：删除工作区文件\n\n远程操作\n- **git remote**\n添加远程库：`git remote add [shortname] [url]`这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。\n更改仓库名：`git remote rename old_name new_name`\n- **git pull**\n从远程获取并合并在本地： `git pull <远程主机名> <远程分支名>:<本地分支名>`当与本地的当前分支合并时可以省略本地分支名。\n其等价于 `git fech`和 `git merge`\n- **git push**\n上传本地分支版本至远程并合并：`git push <远程主机名> <本地分支名>:<远程分支名>`\n如果本地分支名与远程分支名相同，则可以省略冒号 `git push <远程主机名> <本地分支名>`\n\n### 3 git 分支管理\n此部分为git最有特点的一部分...","source":"_posts/about-git.md","raw":"---\nlayout: \ntitle: git相关知识\ndate: 2021-08-24\ntags:\n- git\n- github\ncategories:\n- [学习, coding]\n---\n\n记录学习git的一些问题\n<!-- more -->\n\n###  1 工作区、暂存区、版本库\n基本概念：\n- **工作区**：PC中的目录\n- **暂存区**：称为stage或index，一般存放在`.git`目录下的index文件中，故也称其为索引\n- **版本库**：工作区的隐藏文件`.git`不算工作区而是版本库\n&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。\n\n### 2 Git基本操作\n预先说明，几个库：*workspace*, *staging area*, *local repository*, *remote reposity*\n- **git pull**：*remote reposity* ->*workspace* \n- **git add**：*workspace*->*staging area*\n- **git commit**：*staging area*->*local repository*\n- **git push**：*local repository*->*remote reposity*\n- git fetch/clone：*remote reposity*->*local repository*\n- git checkout：*local repository*->*workspace*\n- git reset：回退版本\n- git rm：删除工作区文件\n\n远程操作\n- **git remote**\n添加远程库：`git remote add [shortname] [url]`这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。\n更改仓库名：`git remote rename old_name new_name`\n- **git pull**\n从远程获取并合并在本地： `git pull <远程主机名> <远程分支名>:<本地分支名>`当与本地的当前分支合并时可以省略本地分支名。\n其等价于 `git fech`和 `git merge`\n- **git push**\n上传本地分支版本至远程并合并：`git push <远程主机名> <本地分支名>:<远程分支名>`\n如果本地分支名与远程分支名相同，则可以省略冒号 `git push <远程主机名> <本地分支名>`\n\n### 3 git 分支管理\n此部分为git最有特点的一部分...","slug":"about-git","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgyy00034cvh8wb1hc6v","content":"<p>记录学习git的一些问题</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-工作区、暂存区、版本库\"><a href=\"#1-工作区、暂存区、版本库\" class=\"headerlink\" title=\"1 工作区、暂存区、版本库\"></a>1 工作区、暂存区、版本库</h3><p>基本概念：</p>\n<ul>\n<li><strong>工作区</strong>：PC中的目录</li>\n<li><strong>暂存区</strong>：称为stage或index，一般存放在<code>.git</code>目录下的index文件中，故也称其为索引</li>\n<li><strong>版本库</strong>：工作区的隐藏文件<code>.git</code>不算工作区而是版本库<br>&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。</li>\n</ul>\n<h3 id=\"2-Git基本操作\"><a href=\"#2-Git基本操作\" class=\"headerlink\" title=\"2 Git基本操作\"></a>2 Git基本操作</h3><p>预先说明，几个库：<em>workspace</em>, <em>staging area</em>, <em>local repository</em>, <em>remote reposity</em></p>\n<ul>\n<li><strong>git pull</strong>：<em>remote reposity</em> -&gt;<em>workspace</em> </li>\n<li><strong>git add</strong>：<em>workspace</em>-&gt;<em>staging area</em></li>\n<li><strong>git commit</strong>：<em>staging area</em>-&gt;<em>local repository</em></li>\n<li><strong>git push</strong>：<em>local repository</em>-&gt;<em>remote reposity</em></li>\n<li>git fetch/clone：<em>remote reposity</em>-&gt;<em>local repository</em></li>\n<li>git checkout：<em>local repository</em>-&gt;<em>workspace</em></li>\n<li>git reset：回退版本</li>\n<li>git rm：删除工作区文件</li>\n</ul>\n<p>远程操作</p>\n<ul>\n<li><strong>git remote</strong><br>添加远程库：<code>git remote add [shortname] [url]</code>这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。<br>更改仓库名：<code>git remote rename old_name new_name</code></li>\n<li><strong>git pull</strong><br>从远程获取并合并在本地： <code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code>当与本地的当前分支合并时可以省略本地分支名。<br>其等价于 <code>git fech</code>和 <code>git merge</code></li>\n<li><strong>git push</strong><br>上传本地分支版本至远程并合并：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code><br>如果本地分支名与远程分支名相同，则可以省略冒号 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code></li>\n</ul>\n<h3 id=\"3-git-分支管理\"><a href=\"#3-git-分支管理\" class=\"headerlink\" title=\"3 git 分支管理\"></a>3 git 分支管理</h3><p>此部分为git最有特点的一部分…</p>\n","site":{"data":{}},"excerpt":"<p>记录学习git的一些问题</p>","more":"<h3 id=\"1-工作区、暂存区、版本库\"><a href=\"#1-工作区、暂存区、版本库\" class=\"headerlink\" title=\"1 工作区、暂存区、版本库\"></a>1 工作区、暂存区、版本库</h3><p>基本概念：</p>\n<ul>\n<li><strong>工作区</strong>：PC中的目录</li>\n<li><strong>暂存区</strong>：称为stage或index，一般存放在<code>.git</code>目录下的index文件中，故也称其为索引</li>\n<li><strong>版本库</strong>：工作区的隐藏文件<code>.git</code>不算工作区而是版本库<br>&emsp;&emsp;add指令将工作区提交到暂存区，commit指令将暂存区提交到版本库。</li>\n</ul>\n<h3 id=\"2-Git基本操作\"><a href=\"#2-Git基本操作\" class=\"headerlink\" title=\"2 Git基本操作\"></a>2 Git基本操作</h3><p>预先说明，几个库：<em>workspace</em>, <em>staging area</em>, <em>local repository</em>, <em>remote reposity</em></p>\n<ul>\n<li><strong>git pull</strong>：<em>remote reposity</em> -&gt;<em>workspace</em> </li>\n<li><strong>git add</strong>：<em>workspace</em>-&gt;<em>staging area</em></li>\n<li><strong>git commit</strong>：<em>staging area</em>-&gt;<em>local repository</em></li>\n<li><strong>git push</strong>：<em>local repository</em>-&gt;<em>remote reposity</em></li>\n<li>git fetch/clone：<em>remote reposity</em>-&gt;<em>local repository</em></li>\n<li>git checkout：<em>local repository</em>-&gt;<em>workspace</em></li>\n<li>git reset：回退版本</li>\n<li>git rm：删除工作区文件</li>\n</ul>\n<p>远程操作</p>\n<ul>\n<li><strong>git remote</strong><br>添加远程库：<code>git remote add [shortname] [url]</code>这里的shortname一般为origin，指代的就是url的远程库，一般把github作为远程库。<br>更改仓库名：<code>git remote rename old_name new_name</code></li>\n<li><strong>git pull</strong><br>从远程获取并合并在本地： <code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code>当与本地的当前分支合并时可以省略本地分支名。<br>其等价于 <code>git fech</code>和 <code>git merge</code></li>\n<li><strong>git push</strong><br>上传本地分支版本至远程并合并：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code><br>如果本地分支名与远程分支名相同，则可以省略冒号 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code></li>\n</ul>\n<h3 id=\"3-git-分支管理\"><a href=\"#3-git-分支管理\" class=\"headerlink\" title=\"3 git 分支管理\"></a>3 git 分支管理</h3><p>此部分为git最有特点的一部分…</p>"},{"layout":"post","title":"Hexo Next 搭建博客相关","date":"2021-08-23T03:25:13.000Z","_content":"\n&emsp;&emsp;![](itachi.jpg)\n\n记录学习Hexo和Next搭建个人博客中的一些问题\n<!-- more -->\n> <center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n### 1 Hexo与Next的安装\n&emsp;&emsp;此部分有很多教程，包括 [Hexo官方文档](https://hexo.io/zh-cn/docs/index.html)和[Next官方文档](https://theme-next.iissnan.com/getting-started.html)，完成安装并将其部署至github.io中即可。\n### 2 玩转Next\n&emsp;&emsp;此部分主要介绍如何丰富Next的设置。\n#### 2.1 主题设置\n&emsp;&emsp;在部署blog的文件夹内找到 `\\themes\\next\\_config.yml` 文件，在其中找到 `# Schemes` 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。\n```\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n\n# Dark Mode\ndarkmode: false\n```\n#### 2.2 个人栏(sidebar)设置\n&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 `_config.yml` 文件中更改一些基本信息，包括博客名称与描述等\n```\n# Site\ntitle: wanderland\nsubtitle: ''\ndescription: 谦虚 学习 坚忍\nkeywords:\nauthor: Shi\nlanguage: zh-CN\ntimezone: ''\n```\n&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：\n`themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl`，在siber的style中添加需要设置的背景图位置和加载方式\n\n```\n.sidebar {\n  background:url(/images/crane4.jpg);\t\n  background-size: cover;\n  background-position:center;\n  background-repeat:no-repeat;\n  width: $sidebar-desktop;\n  z-index: $zindex-2;\n  the-transition-ease-out();\n  ......\n  }\n```\n图片存放位置是 `themes\\next\\source\\image\\` .\n\n### 3 撰写博文\n&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为`\\source\\_post`。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 [链接](https://markdown.com.cn/basic-syntax/).\n&emsp;&emsp;新建博文使用语法`hexo new [layout] title`. \n&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文\n\n```\n---\nlayout: \ntitle: Hexo Next 搭建博客相关\ndate: 2021-08-23 11:25:13\ntags:\n- Hexo\n- Next\ncategories:\n- [学习, coding]\n---\n```\n&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。\n\n### Git相关\n&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” `hexo clean`(这个有时候可以不要)，`hexo g`(generate) `hexo d`(deploy).\n&emsp;&emsp;此时同步源码则是在根目录下git push\n\n### TODO LIST\n*关于前端或者blog相关*\n- 继续学习和深入了解next相关\n- 关于撰写博客的细节\n- 学习git相关操作，主要是协作方面\n- 学习js，继续网站开发\n","source":"_posts/about-hexo.md","raw":"---\nlayout: \ntitle: Hexo Next 搭建博客相关\ndate: 2021-08-23 11:25:13\ntags:\n- Hexo\n- Next\ncategories:\n- [学习, coding]\n---\n\n&emsp;&emsp;![](itachi.jpg)\n\n记录学习Hexo和Next搭建个人博客中的一些问题\n<!-- more -->\n> <center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n### 1 Hexo与Next的安装\n&emsp;&emsp;此部分有很多教程，包括 [Hexo官方文档](https://hexo.io/zh-cn/docs/index.html)和[Next官方文档](https://theme-next.iissnan.com/getting-started.html)，完成安装并将其部署至github.io中即可。\n### 2 玩转Next\n&emsp;&emsp;此部分主要介绍如何丰富Next的设置。\n#### 2.1 主题设置\n&emsp;&emsp;在部署blog的文件夹内找到 `\\themes\\next\\_config.yml` 文件，在其中找到 `# Schemes` 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。\n```\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n\n# Dark Mode\ndarkmode: false\n```\n#### 2.2 个人栏(sidebar)设置\n&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 `_config.yml` 文件中更改一些基本信息，包括博客名称与描述等\n```\n# Site\ntitle: wanderland\nsubtitle: ''\ndescription: 谦虚 学习 坚忍\nkeywords:\nauthor: Shi\nlanguage: zh-CN\ntimezone: ''\n```\n&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：\n`themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl`，在siber的style中添加需要设置的背景图位置和加载方式\n\n```\n.sidebar {\n  background:url(/images/crane4.jpg);\t\n  background-size: cover;\n  background-position:center;\n  background-repeat:no-repeat;\n  width: $sidebar-desktop;\n  z-index: $zindex-2;\n  the-transition-ease-out();\n  ......\n  }\n```\n图片存放位置是 `themes\\next\\source\\image\\` .\n\n### 3 撰写博文\n&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为`\\source\\_post`。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 [链接](https://markdown.com.cn/basic-syntax/).\n&emsp;&emsp;新建博文使用语法`hexo new [layout] title`. \n&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文\n\n```\n---\nlayout: \ntitle: Hexo Next 搭建博客相关\ndate: 2021-08-23 11:25:13\ntags:\n- Hexo\n- Next\ncategories:\n- [学习, coding]\n---\n```\n&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。\n\n### Git相关\n&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” `hexo clean`(这个有时候可以不要)，`hexo g`(generate) `hexo d`(deploy).\n&emsp;&emsp;此时同步源码则是在根目录下git push\n\n### TODO LIST\n*关于前端或者blog相关*\n- 继续学习和深入了解next相关\n- 关于撰写博客的细节\n- 学习git相关操作，主要是协作方面\n- 学习js，继续网站开发\n","slug":"about-hexo","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz000054cvh0bike1b0","content":"<p>&emsp;&emsp;<img src=\"itachi.jpg\"></p>\n<p>记录学习Hexo和Next搭建个人博客中的一些问题</p>\n<span id=\"more\"></span>\n<blockquote>\n<center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n</blockquote>\n<h3 id=\"1-Hexo与Next的安装\"><a href=\"#1-Hexo与Next的安装\" class=\"headerlink\" title=\"1 Hexo与Next的安装\"></a>1 Hexo与Next的安装</h3><p>&emsp;&emsp;此部分有很多教程，包括 <a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo官方文档</a>和<a href=\"https://theme-next.iissnan.com/getting-started.html\">Next官方文档</a>，完成安装并将其部署至github.io中即可。</p>\n<h3 id=\"2-玩转Next\"><a href=\"#2-玩转Next\" class=\"headerlink\" title=\"2 玩转Next\"></a>2 玩转Next</h3><p>&emsp;&emsp;此部分主要介绍如何丰富Next的设置。</p>\n<h4 id=\"2-1-主题设置\"><a href=\"#2-1-主题设置\" class=\"headerlink\" title=\"2.1 主题设置\"></a>2.1 主题设置</h4><p>&emsp;&emsp;在部署blog的文件夹内找到 <code>\\themes\\next\\_config.yml</code> 文件，在其中找到 <code># Schemes</code> 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">scheme: Mist</span><br><span class=\"line\">#scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br><span class=\"line\"></span><br><span class=\"line\"># Dark Mode</span><br><span class=\"line\">darkmode: false</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-个人栏-sidebar-设置\"><a href=\"#2-2-个人栏-sidebar-设置\" class=\"headerlink\" title=\"2.2 个人栏(sidebar)设置\"></a>2.2 个人栏(sidebar)设置</h4><p>&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 <code>_config.yml</code> 文件中更改一些基本信息，包括博客名称与描述等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: wanderland</span><br><span class=\"line\">subtitle: &#x27;&#x27;</span><br><span class=\"line\">description: 谦虚 学习 坚忍</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Shi</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：<br><code>themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl</code>，在siber的style中添加需要设置的背景图位置和加载方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sidebar &#123;</span><br><span class=\"line\">  background:url(/images/crane4.jpg);\t</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  background-position:center;</span><br><span class=\"line\">  background-repeat:no-repeat;</span><br><span class=\"line\">  width: $sidebar-desktop;</span><br><span class=\"line\">  z-index: $zindex-2;</span><br><span class=\"line\">  the-transition-ease-out();</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>图片存放位置是 <code>themes\\next\\source\\image\\</code> .</p>\n<h3 id=\"3-撰写博文\"><a href=\"#3-撰写博文\" class=\"headerlink\" title=\"3 撰写博文\"></a>3 撰写博文</h3><p>&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为<code>\\source\\_post</code>。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 <a href=\"https://markdown.com.cn/basic-syntax/\">链接</a>.<br>&emsp;&emsp;新建博文使用语法<code>hexo new [layout] title</code>.<br>&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: </span><br><span class=\"line\">title: Hexo Next 搭建博客相关</span><br><span class=\"line\">date: 2021-08-23 11:25:13</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- Next</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- [学习, coding]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。</p>\n<h3 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h3><p>&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” <code>hexo clean</code>(这个有时候可以不要)，<code>hexo g</code>(generate) <code>hexo d</code>(deploy).<br>&emsp;&emsp;此时同步源码则是在根目录下git push</p>\n<h3 id=\"TODO-LIST\"><a href=\"#TODO-LIST\" class=\"headerlink\" title=\"TODO LIST\"></a>TODO LIST</h3><p><em>关于前端或者blog相关</em></p>\n<ul>\n<li>继续学习和深入了解next相关</li>\n<li>关于撰写博客的细节</li>\n<li>学习git相关操作，主要是协作方面</li>\n<li>学习js，继续网站开发</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;<img src=\"itachi.jpg\"></p>\n<p>记录学习Hexo和Next搭建个人博客中的一些问题</p>","more":"<blockquote>\n<center> 要提倡谦虚、学习和坚忍的精神。 —— 毛主席</center>\n</blockquote>\n<h3 id=\"1-Hexo与Next的安装\"><a href=\"#1-Hexo与Next的安装\" class=\"headerlink\" title=\"1 Hexo与Next的安装\"></a>1 Hexo与Next的安装</h3><p>&emsp;&emsp;此部分有很多教程，包括 <a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo官方文档</a>和<a href=\"https://theme-next.iissnan.com/getting-started.html\">Next官方文档</a>，完成安装并将其部署至github.io中即可。</p>\n<h3 id=\"2-玩转Next\"><a href=\"#2-玩转Next\" class=\"headerlink\" title=\"2 玩转Next\"></a>2 玩转Next</h3><p>&emsp;&emsp;此部分主要介绍如何丰富Next的设置。</p>\n<h4 id=\"2-1-主题设置\"><a href=\"#2-1-主题设置\" class=\"headerlink\" title=\"2.1 主题设置\"></a>2.1 主题设置</h4><p>&emsp;&emsp;在部署blog的文件夹内找到 <code>\\themes\\next\\_config.yml</code> 文件，在其中找到 <code># Schemes</code> 主题，选择下面四种主题取消一种注释即可（这里选择的是第二个mist主题）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">scheme: Mist</span><br><span class=\"line\">#scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br><span class=\"line\"></span><br><span class=\"line\"># Dark Mode</span><br><span class=\"line\">darkmode: false</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-个人栏-sidebar-设置\"><a href=\"#2-2-个人栏-sidebar-设置\" class=\"headerlink\" title=\"2.2 个人栏(sidebar)设置\"></a>2.2 个人栏(sidebar)设置</h4><p>&emsp;&emsp;首先简单设置一下个人信息，在根目录下的 <code>_config.yml</code> 文件中更改一些基本信息，包括博客名称与描述等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: wanderland</span><br><span class=\"line\">subtitle: &#x27;&#x27;</span><br><span class=\"line\">description: 谦虚 学习 坚忍</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Shi</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接着可以设置个人栏中的背景，文件路径为：<br><code>themes\\next\\source\\css\\_schemes\\Muse\\_sidebar.styl</code>，在siber的style中添加需要设置的背景图位置和加载方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sidebar &#123;</span><br><span class=\"line\">  background:url(/images/crane4.jpg);\t</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  background-position:center;</span><br><span class=\"line\">  background-repeat:no-repeat;</span><br><span class=\"line\">  width: $sidebar-desktop;</span><br><span class=\"line\">  z-index: $zindex-2;</span><br><span class=\"line\">  the-transition-ease-out();</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>图片存放位置是 <code>themes\\next\\source\\image\\</code> .</p>\n<h3 id=\"3-撰写博文\"><a href=\"#3-撰写博文\" class=\"headerlink\" title=\"3 撰写博文\"></a>3 撰写博文</h3><p>&emsp;&emsp;博客撰写使用的是Markdown，编辑器为Typora，最后存放位置为<code>\\source\\_post</code>。Markdown的语法也较为简单，可以掌握简单的分级标题、列表以及代码样式即可。Markdown的语法查询也有对应的 <a href=\"https://markdown.com.cn/basic-syntax/\">链接</a>.<br>&emsp;&emsp;新建博文使用语法<code>hexo new [layout] title</code>.<br>&emsp;&emsp;对于博文来讲，可以设置tags和categories用来区分和查找，一般是在博文的头部插入layout，例如本篇博文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: </span><br><span class=\"line\">title: Hexo Next 搭建博客相关</span><br><span class=\"line\">date: 2021-08-23 11:25:13</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- Next</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- [学习, coding]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中tags的设置是相互独立的，而categories的设置是有层级的，由上到下依次细化，而一篇博文同时也可以归属于多个分类，此时通过上面展示的中括号将分类层级以此键入。</p>\n<h3 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h3><p>&emsp;&emsp;最基本的是撰写博客之后的提交，hexo“三部曲” <code>hexo clean</code>(这个有时候可以不要)，<code>hexo g</code>(generate) <code>hexo d</code>(deploy).<br>&emsp;&emsp;此时同步源码则是在根目录下git push</p>\n<h3 id=\"TODO-LIST\"><a href=\"#TODO-LIST\" class=\"headerlink\" title=\"TODO LIST\"></a>TODO LIST</h3><p><em>关于前端或者blog相关</em></p>\n<ul>\n<li>继续学习和深入了解next相关</li>\n<li>关于撰写博客的细节</li>\n<li>学习git相关操作，主要是协作方面</li>\n<li>学习js，继续网站开发</li>\n</ul>"},{"layout":"post","title":"数组杂谈","date":"2021-08-31T01:45:41.000Z","_content":"\npython以及pytorch中许多都会涉及到数组或者列表，需加以区分。\n<!-- more -->\n### 总述\n常用数据结构包括**元组** **列表** **字典** **集合**等，这些属于内建函数，而numpy的数组**ndarray**也是在机器学习中常用的，下面会记录较为重要的**元组** **列表** **数组**\n\n### 元组\n元组是一种固定长度，不可变的对象序列。\n- `tuple()`将任意序列或者迭代器转换为元组\n```\nIn []: tuple([4, 0, 2])\nOut[]: (4, 0, 2)\n```\n\n- 用`+`号或者`*`号来链接元组\n```\nIn []: (4, None, 'foo') + (6, 0)\nOut[]: (4, None, 'foo', 6, 2)\n\nIn []: (4, 0, 2) * 2\nOut[]: (4, 0, 2, 4, 0, 2)\n```\n\n- 由于元组的内容与长度无法改变，因此实例方法较少。常见的有`count`方法，作用是计算某个数值在元组中出现的次数\n```\nIn []: a = (4, 2, 0, 2, 2)\nIn []: a.count(2)\nOut[]: 3\n```\n\n- 使用[i]索引获取元组指定位置i的对象\n\n### 列表\n与元组不同，列表长度可变，内容可修改。\n\n- 使用中括号[]或者list类型来定义列表\n```\nIn []:a_list = [2, 3, None]\nIn []:tup = 2, 3, None\nIn []:b_list = list(tup)\n```\n\n- 函数用法和tuple相似\n- 可以将迭代器或者生成器变为列表\n```\nIn []: gen = range(10)\nIn []: list(gen)\nOut[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n- 元素的增添或移除\n\t-- `.append()`将元素添加到列表尾部\n\t-- `.insert(loc, obj)`在loc位置添加obj\n\t-- `.remove()`移除第一个符合要求的值\n\t-- `.pop()`将特定元素移除并返回\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.append(5)\nOut[]: [1, 2, 3, 4, 5]\nIn []: a.insert(1, 999)\nOut[]: [1, 999, 2, 3, 4, 5]\n```\n\n- 列表的链接和移除\n\t-- 与元组类似，两个列表之间使用+号连接\n\t-- 若有已经定义的数据集，可以用extend向该列表添加元素\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.extend(['foo', None, (1,2)])\nIn []: a\nOut[]: [1, 2, 3, 4, 'foo', None, (1,2)]\n```\n\n- 排序 sort\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a.sort()\nIn []: a\nOut[]: [1, 2, 3, 4]\n```\nsort函数会有二级排序key\n```\nIn []: a = ['a', 'asd', 'asdf', 'as']\nIn []: a.sort(key=len)\nIn []: a\nOut[]: ['a', 'as', 'asd', 'asdf']\n```\n\n- 切片start包含，stop不包含\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a[-1:0]\nOut[]: [4]\nIn []: a[::2] #步长\nOut[]: [2,1]\nIn []: a[::-1] #相当于翻转\nOut[]: [4, 1, 2, 3]\n```\n\n### ndarray\nimport numpy as np\nnumpy方法比python内建方法快速、占用内存小，用C语言写成。\n较为重要的通用属性：shape属性表征*每一维度的数量*，ndim属性描述*数组的维数*，dtype属性描述*数组的数据类型*。\n- 生成ndarray\n\t-- 使用array函数\n```\nIn []: data_a = [1, 2, 3, 4]\nIn []: ary_a = np.array(data_a)\nIn []: a\nOut[]: array([[1, 2, 3, 4]])\n```\n\t-- 使用`np.zeros(num)`可以生成num数量够的全0数组，`np.ones(num)`同理。\n\t-- `np.arange()`为内建函数的range数组版\n\t默认类型为float64.\n- ndarray的数据类型\n使用astype方法显式转换数组\n```\nIn []: arr = np.array([1, 2, 3, 4])\nIn []: arr.dtype\nOut[]: dtype('int64')\nIn []: float_arr = arr.astype(np.float64)\nIn []: float_arr.dtype\nOut[]: dtype('float64')\n```\n- 基础切片与索引与列表同\n- 数组转置和换轴\n\t-- **transpose**方法\n\t-- **T**属性（转置）\n- 一元与二元通用函数：对数组每个元素进行计算","source":"_posts/about-list-tuple-array.md","raw":"---\nlayout: \ntitle: 数组杂谈\ndate: 2021-08-31 09:45:41\ntags:\n- python\n- tuple\n- list\n- ndarray\n- numpy\ncategories:\n- [学习, coding]\n---\n\npython以及pytorch中许多都会涉及到数组或者列表，需加以区分。\n<!-- more -->\n### 总述\n常用数据结构包括**元组** **列表** **字典** **集合**等，这些属于内建函数，而numpy的数组**ndarray**也是在机器学习中常用的，下面会记录较为重要的**元组** **列表** **数组**\n\n### 元组\n元组是一种固定长度，不可变的对象序列。\n- `tuple()`将任意序列或者迭代器转换为元组\n```\nIn []: tuple([4, 0, 2])\nOut[]: (4, 0, 2)\n```\n\n- 用`+`号或者`*`号来链接元组\n```\nIn []: (4, None, 'foo') + (6, 0)\nOut[]: (4, None, 'foo', 6, 2)\n\nIn []: (4, 0, 2) * 2\nOut[]: (4, 0, 2, 4, 0, 2)\n```\n\n- 由于元组的内容与长度无法改变，因此实例方法较少。常见的有`count`方法，作用是计算某个数值在元组中出现的次数\n```\nIn []: a = (4, 2, 0, 2, 2)\nIn []: a.count(2)\nOut[]: 3\n```\n\n- 使用[i]索引获取元组指定位置i的对象\n\n### 列表\n与元组不同，列表长度可变，内容可修改。\n\n- 使用中括号[]或者list类型来定义列表\n```\nIn []:a_list = [2, 3, None]\nIn []:tup = 2, 3, None\nIn []:b_list = list(tup)\n```\n\n- 函数用法和tuple相似\n- 可以将迭代器或者生成器变为列表\n```\nIn []: gen = range(10)\nIn []: list(gen)\nOut[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n- 元素的增添或移除\n\t-- `.append()`将元素添加到列表尾部\n\t-- `.insert(loc, obj)`在loc位置添加obj\n\t-- `.remove()`移除第一个符合要求的值\n\t-- `.pop()`将特定元素移除并返回\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.append(5)\nOut[]: [1, 2, 3, 4, 5]\nIn []: a.insert(1, 999)\nOut[]: [1, 999, 2, 3, 4, 5]\n```\n\n- 列表的链接和移除\n\t-- 与元组类似，两个列表之间使用+号连接\n\t-- 若有已经定义的数据集，可以用extend向该列表添加元素\n```\nIn []: a = [1, 2, 3, 4]\nIn []: a.extend(['foo', None, (1,2)])\nIn []: a\nOut[]: [1, 2, 3, 4, 'foo', None, (1,2)]\n```\n\n- 排序 sort\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a.sort()\nIn []: a\nOut[]: [1, 2, 3, 4]\n```\nsort函数会有二级排序key\n```\nIn []: a = ['a', 'asd', 'asdf', 'as']\nIn []: a.sort(key=len)\nIn []: a\nOut[]: ['a', 'as', 'asd', 'asdf']\n```\n\n- 切片start包含，stop不包含\n```\nIn []: a = [2, 3, 1, 4]\nIn []: a[-1:0]\nOut[]: [4]\nIn []: a[::2] #步长\nOut[]: [2,1]\nIn []: a[::-1] #相当于翻转\nOut[]: [4, 1, 2, 3]\n```\n\n### ndarray\nimport numpy as np\nnumpy方法比python内建方法快速、占用内存小，用C语言写成。\n较为重要的通用属性：shape属性表征*每一维度的数量*，ndim属性描述*数组的维数*，dtype属性描述*数组的数据类型*。\n- 生成ndarray\n\t-- 使用array函数\n```\nIn []: data_a = [1, 2, 3, 4]\nIn []: ary_a = np.array(data_a)\nIn []: a\nOut[]: array([[1, 2, 3, 4]])\n```\n\t-- 使用`np.zeros(num)`可以生成num数量够的全0数组，`np.ones(num)`同理。\n\t-- `np.arange()`为内建函数的range数组版\n\t默认类型为float64.\n- ndarray的数据类型\n使用astype方法显式转换数组\n```\nIn []: arr = np.array([1, 2, 3, 4])\nIn []: arr.dtype\nOut[]: dtype('int64')\nIn []: float_arr = arr.astype(np.float64)\nIn []: float_arr.dtype\nOut[]: dtype('float64')\n```\n- 基础切片与索引与列表同\n- 数组转置和换轴\n\t-- **transpose**方法\n\t-- **T**属性（转置）\n- 一元与二元通用函数：对数组每个元素进行计算","slug":"about-list-tuple-array","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz100074cvh3l1fgfql","content":"<p>python以及pytorch中许多都会涉及到数组或者列表，需加以区分。</p>\n<span id=\"more\"></span>\n<h3 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h3><p>常用数据结构包括<strong>元组</strong> <strong>列表</strong> <strong>字典</strong> <strong>集合</strong>等，这些属于内建函数，而numpy的数组<strong>ndarray</strong>也是在机器学习中常用的，下面会记录较为重要的<strong>元组</strong> <strong>列表</strong> <strong>数组</strong></p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>元组是一种固定长度，不可变的对象序列。</p>\n<ul>\n<li><p><code>tuple()</code>将任意序列或者迭代器转换为元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: tuple([4, 0, 2])</span><br><span class=\"line\">Out[]: (4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>用<code>+</code>号或者<code>*</code>号来链接元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: (4, None, &#x27;foo&#x27;) + (6, 0)</span><br><span class=\"line\">Out[]: (4, None, &#x27;foo&#x27;, 6, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">In []: (4, 0, 2) * 2</span><br><span class=\"line\">Out[]: (4, 0, 2, 4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>由于元组的内容与长度无法改变，因此实例方法较少。常见的有<code>count</code>方法，作用是计算某个数值在元组中出现的次数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = (4, 2, 0, 2, 2)</span><br><span class=\"line\">In []: a.count(2)</span><br><span class=\"line\">Out[]: 3</span><br></pre></td></tr></table></figure></li>\n<li><p>使用[i]索引获取元组指定位置i的对象</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>与元组不同，列表长度可变，内容可修改。</p>\n<ul>\n<li><p>使用中括号[]或者list类型来定义列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []:a_list = [2, 3, None]</span><br><span class=\"line\">In []:tup = 2, 3, None</span><br><span class=\"line\">In []:b_list = list(tup)</span><br></pre></td></tr></table></figure></li>\n<li><p>函数用法和tuple相似</p>\n</li>\n<li><p>可以将迭代器或者生成器变为列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: gen = range(10)</span><br><span class=\"line\">In []: list(gen)</span><br><span class=\"line\">Out[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></li>\n<li><p>元素的增添或移除<br>  – <code>.append()</code>将元素添加到列表尾部<br>  – <code>.insert(loc, obj)</code>在loc位置添加obj<br>  – <code>.remove()</code>移除第一个符合要求的值<br>  – <code>.pop()</code>将特定元素移除并返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.append(5)</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, 5]</span><br><span class=\"line\">In []: a.insert(1, 999)</span><br><span class=\"line\">Out[]: [1, 999, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li>\n<li><p>列表的链接和移除<br>  – 与元组类似，两个列表之间使用+号连接<br>  – 若有已经定义的数据集，可以用extend向该列表添加元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.extend([&#x27;foo&#x27;, None, (1,2)])</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, &#x27;foo&#x27;, None, (1,2)]</span><br></pre></td></tr></table></figure></li>\n<li><p>排序 sort</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a.sort()</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p>sort函数会有二级排序key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [&#x27;a&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;, &#x27;as&#x27;]</span><br><span class=\"line\">In []: a.sort(key=len)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [&#x27;a&#x27;, &#x27;as&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;]</span><br></pre></td></tr></table></figure></li>\n<li><p>切片start包含，stop不包含</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a[-1:0]</span><br><span class=\"line\">Out[]: [4]</span><br><span class=\"line\">In []: a[::2] #步长</span><br><span class=\"line\">Out[]: [2,1]</span><br><span class=\"line\">In []: a[::-1] #相当于翻转</span><br><span class=\"line\">Out[]: [4, 1, 2, 3]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ndarray\"><a href=\"#ndarray\" class=\"headerlink\" title=\"ndarray\"></a>ndarray</h3><p>import numpy as np<br>numpy方法比python内建方法快速、占用内存小，用C语言写成。<br>较为重要的通用属性：shape属性表征<em>每一维度的数量</em>，ndim属性描述<em>数组的维数</em>，dtype属性描述<em>数组的数据类型</em>。</p>\n<ul>\n<li>生成ndarray<br>  – 使用array函数<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: data_a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: ary_a = np.array(data_a)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: array([[1, 2, 3, 4]])</span><br></pre></td></tr></table></figure>\n  – 使用<code>np.zeros(num)</code>可以生成num数量够的全0数组，<code>np.ones(num)</code>同理。<br>  – <code>np.arange()</code>为内建函数的range数组版<br>  默认类型为float64.</li>\n<li>ndarray的数据类型<br>使用astype方法显式转换数组<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: arr = np.array([1, 2, 3, 4])</span><br><span class=\"line\">In []: arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;int64&#x27;)</span><br><span class=\"line\">In []: float_arr = arr.astype(np.float64)</span><br><span class=\"line\">In []: float_arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;float64&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>基础切片与索引与列表同</li>\n<li>数组转置和换轴<br>  – <strong>transpose</strong>方法<br>  – <strong>T</strong>属性（转置）</li>\n<li>一元与二元通用函数：对数组每个元素进行计算</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>python以及pytorch中许多都会涉及到数组或者列表，需加以区分。</p>","more":"<h3 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h3><p>常用数据结构包括<strong>元组</strong> <strong>列表</strong> <strong>字典</strong> <strong>集合</strong>等，这些属于内建函数，而numpy的数组<strong>ndarray</strong>也是在机器学习中常用的，下面会记录较为重要的<strong>元组</strong> <strong>列表</strong> <strong>数组</strong></p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>元组是一种固定长度，不可变的对象序列。</p>\n<ul>\n<li><p><code>tuple()</code>将任意序列或者迭代器转换为元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: tuple([4, 0, 2])</span><br><span class=\"line\">Out[]: (4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>用<code>+</code>号或者<code>*</code>号来链接元组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: (4, None, &#x27;foo&#x27;) + (6, 0)</span><br><span class=\"line\">Out[]: (4, None, &#x27;foo&#x27;, 6, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">In []: (4, 0, 2) * 2</span><br><span class=\"line\">Out[]: (4, 0, 2, 4, 0, 2)</span><br></pre></td></tr></table></figure></li>\n<li><p>由于元组的内容与长度无法改变，因此实例方法较少。常见的有<code>count</code>方法，作用是计算某个数值在元组中出现的次数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = (4, 2, 0, 2, 2)</span><br><span class=\"line\">In []: a.count(2)</span><br><span class=\"line\">Out[]: 3</span><br></pre></td></tr></table></figure></li>\n<li><p>使用[i]索引获取元组指定位置i的对象</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>与元组不同，列表长度可变，内容可修改。</p>\n<ul>\n<li><p>使用中括号[]或者list类型来定义列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []:a_list = [2, 3, None]</span><br><span class=\"line\">In []:tup = 2, 3, None</span><br><span class=\"line\">In []:b_list = list(tup)</span><br></pre></td></tr></table></figure></li>\n<li><p>函数用法和tuple相似</p>\n</li>\n<li><p>可以将迭代器或者生成器变为列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: gen = range(10)</span><br><span class=\"line\">In []: list(gen)</span><br><span class=\"line\">Out[]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></li>\n<li><p>元素的增添或移除<br>  – <code>.append()</code>将元素添加到列表尾部<br>  – <code>.insert(loc, obj)</code>在loc位置添加obj<br>  – <code>.remove()</code>移除第一个符合要求的值<br>  – <code>.pop()</code>将特定元素移除并返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.append(5)</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, 5]</span><br><span class=\"line\">In []: a.insert(1, 999)</span><br><span class=\"line\">Out[]: [1, 999, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li>\n<li><p>列表的链接和移除<br>  – 与元组类似，两个列表之间使用+号连接<br>  – 若有已经定义的数据集，可以用extend向该列表添加元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: a.extend([&#x27;foo&#x27;, None, (1,2)])</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4, &#x27;foo&#x27;, None, (1,2)]</span><br></pre></td></tr></table></figure></li>\n<li><p>排序 sort</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a.sort()</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p>sort函数会有二级排序key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [&#x27;a&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;, &#x27;as&#x27;]</span><br><span class=\"line\">In []: a.sort(key=len)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: [&#x27;a&#x27;, &#x27;as&#x27;, &#x27;asd&#x27;, &#x27;asdf&#x27;]</span><br></pre></td></tr></table></figure></li>\n<li><p>切片start包含，stop不包含</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: a = [2, 3, 1, 4]</span><br><span class=\"line\">In []: a[-1:0]</span><br><span class=\"line\">Out[]: [4]</span><br><span class=\"line\">In []: a[::2] #步长</span><br><span class=\"line\">Out[]: [2,1]</span><br><span class=\"line\">In []: a[::-1] #相当于翻转</span><br><span class=\"line\">Out[]: [4, 1, 2, 3]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ndarray\"><a href=\"#ndarray\" class=\"headerlink\" title=\"ndarray\"></a>ndarray</h3><p>import numpy as np<br>numpy方法比python内建方法快速、占用内存小，用C语言写成。<br>较为重要的通用属性：shape属性表征<em>每一维度的数量</em>，ndim属性描述<em>数组的维数</em>，dtype属性描述<em>数组的数据类型</em>。</p>\n<ul>\n<li>生成ndarray<br>  – 使用array函数<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: data_a = [1, 2, 3, 4]</span><br><span class=\"line\">In []: ary_a = np.array(data_a)</span><br><span class=\"line\">In []: a</span><br><span class=\"line\">Out[]: array([[1, 2, 3, 4]])</span><br></pre></td></tr></table></figure>\n  – 使用<code>np.zeros(num)</code>可以生成num数量够的全0数组，<code>np.ones(num)</code>同理。<br>  – <code>np.arange()</code>为内建函数的range数组版<br>  默认类型为float64.</li>\n<li>ndarray的数据类型<br>使用astype方法显式转换数组<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In []: arr = np.array([1, 2, 3, 4])</span><br><span class=\"line\">In []: arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;int64&#x27;)</span><br><span class=\"line\">In []: float_arr = arr.astype(np.float64)</span><br><span class=\"line\">In []: float_arr.dtype</span><br><span class=\"line\">Out[]: dtype(&#x27;float64&#x27;)</span><br></pre></td></tr></table></figure></li>\n<li>基础切片与索引与列表同</li>\n<li>数组转置和换轴<br>  – <strong>transpose</strong>方法<br>  – <strong>T</strong>属性（转置）</li>\n<li>一元与二元通用函数：对数组每个元素进行计算</li>\n</ul>"},{"layout":"post","title":"matplotlib基础","date":"2021-08-31T13:40:52.000Z","_content":"\n学习matplotlib的应用\n<!-- more -->\n\n### 简单matplotlibAPI\n导入\n`In [0]: import matplotlib.pyplot as plt`\n简单的使用\n```\nIn [1]: import numpy as np\nIn [2]: data = np.arange(10)\nIn [3]: plt.plot(data)\n```\n\n#### 图片与子图\nmatplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。\n使用subplot生成2X2的子图并布置在左上角的位置\n```\nIn [4]: fig = plt.figure()\nIn [5]: ax1 = fig.add_subplot(2,2,1)\n```\n\n#### 画图\n- matplotlib主函数接收带有x和y轴的数组以及参数。\n`ax.plot(x,y,linestyle='--',color='g')`或者`ax.plot(x,y,'g--')`\n\n- 设置刻度标签和图例\n```\nticks = ax.set_xticks([0,250,500,750,1000])\nlabels = ax.set_xticklabels(['one','two','three','four','five'])\nax.set_title('My PLT')\nax.set_xlabel('Stage')\n```\n\n### 使用pandas\nSeries和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。\n#### Series.plot()方法参数\n|参数  |描述   |\n|:-----|:------|\n|label|图里标签|\n|ax   |子图对象|\n|style|样式   |\n|kind|area bar barh density hist kde line pie等|\n|logy|y轴对数缩放|\n|xticks|x的刻度值|\n|yticks|y的刻度值|\n|xlim|x轴范围|\n|ylim|y轴范围|\n\n#### DataFrame.plot()参数\n|参数  |描述   |\n|:-----|:------|\n|subplots|将df每一列绘制在独立子图中|\n|sharex|subplots=True共享x轴|\n|sharey|subplots=True共享y轴|\n|title|标题|\n\n#### 柱状图\nplot.bar()和plot.barh()分别绘制垂直和水平的柱状图","source":"_posts/about-matplotlib.md","raw":"---\nlayout: \ntitle: matplotlib基础\ndate: 2021-08-31 21:40:52\ntags:\n- python\n- matplotlib\ncategories:\n- [学习, coding]\n---\n\n学习matplotlib的应用\n<!-- more -->\n\n### 简单matplotlibAPI\n导入\n`In [0]: import matplotlib.pyplot as plt`\n简单的使用\n```\nIn [1]: import numpy as np\nIn [2]: data = np.arange(10)\nIn [3]: plt.plot(data)\n```\n\n#### 图片与子图\nmatplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。\n使用subplot生成2X2的子图并布置在左上角的位置\n```\nIn [4]: fig = plt.figure()\nIn [5]: ax1 = fig.add_subplot(2,2,1)\n```\n\n#### 画图\n- matplotlib主函数接收带有x和y轴的数组以及参数。\n`ax.plot(x,y,linestyle='--',color='g')`或者`ax.plot(x,y,'g--')`\n\n- 设置刻度标签和图例\n```\nticks = ax.set_xticks([0,250,500,750,1000])\nlabels = ax.set_xticklabels(['one','two','three','four','five'])\nax.set_title('My PLT')\nax.set_xlabel('Stage')\n```\n\n### 使用pandas\nSeries和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。\n#### Series.plot()方法参数\n|参数  |描述   |\n|:-----|:------|\n|label|图里标签|\n|ax   |子图对象|\n|style|样式   |\n|kind|area bar barh density hist kde line pie等|\n|logy|y轴对数缩放|\n|xticks|x的刻度值|\n|yticks|y的刻度值|\n|xlim|x轴范围|\n|ylim|y轴范围|\n\n#### DataFrame.plot()参数\n|参数  |描述   |\n|:-----|:------|\n|subplots|将df每一列绘制在独立子图中|\n|sharex|subplots=True共享x轴|\n|sharey|subplots=True共享y轴|\n|title|标题|\n\n#### 柱状图\nplot.bar()和plot.barh()分别绘制垂直和水平的柱状图","slug":"about-matplotlib","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz100084cvhhfcv0cu9","content":"<p>学习matplotlib的应用</p>\n<span id=\"more\"></span>\n\n<h3 id=\"简单matplotlibAPI\"><a href=\"#简单matplotlibAPI\" class=\"headerlink\" title=\"简单matplotlibAPI\"></a>简单matplotlibAPI</h3><p>导入<br><code>In [0]: import matplotlib.pyplot as plt</code><br>简单的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\">In [2]: data = np.arange(10)</span><br><span class=\"line\">In [3]: plt.plot(data)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片与子图\"><a href=\"#图片与子图\" class=\"headerlink\" title=\"图片与子图\"></a>图片与子图</h4><p>matplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。<br>使用subplot生成2X2的子图并布置在左上角的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: fig = plt.figure()</span><br><span class=\"line\">In [5]: ax1 = fig.add_subplot(2,2,1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h4><ul>\n<li><p>matplotlib主函数接收带有x和y轴的数组以及参数。<br><code>ax.plot(x,y,linestyle=&#39;--&#39;,color=&#39;g&#39;)</code>或者<code>ax.plot(x,y,&#39;g--&#39;)</code></p>\n</li>\n<li><p>设置刻度标签和图例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ticks = ax.set_xticks([0,250,500,750,1000])</span><br><span class=\"line\">labels = ax.set_xticklabels([&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;,&#x27;four&#x27;,&#x27;five&#x27;])</span><br><span class=\"line\">ax.set_title(&#x27;My PLT&#x27;)</span><br><span class=\"line\">ax.set_xlabel(&#x27;Stage&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用pandas\"><a href=\"#使用pandas\" class=\"headerlink\" title=\"使用pandas\"></a>使用pandas</h3><p>Series和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。</p>\n<h4 id=\"Series-plot-方法参数\"><a href=\"#Series-plot-方法参数\" class=\"headerlink\" title=\"Series.plot()方法参数\"></a>Series.plot()方法参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">label</td>\n<td align=\"left\">图里标签</td>\n</tr>\n<tr>\n<td align=\"left\">ax</td>\n<td align=\"left\">子图对象</td>\n</tr>\n<tr>\n<td align=\"left\">style</td>\n<td align=\"left\">样式</td>\n</tr>\n<tr>\n<td align=\"left\">kind</td>\n<td align=\"left\">area bar barh density hist kde line pie等</td>\n</tr>\n<tr>\n<td align=\"left\">logy</td>\n<td align=\"left\">y轴对数缩放</td>\n</tr>\n<tr>\n<td align=\"left\">xticks</td>\n<td align=\"left\">x的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">yticks</td>\n<td align=\"left\">y的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">xlim</td>\n<td align=\"left\">x轴范围</td>\n</tr>\n<tr>\n<td align=\"left\">ylim</td>\n<td align=\"left\">y轴范围</td>\n</tr>\n</tbody></table>\n<h4 id=\"DataFrame-plot-参数\"><a href=\"#DataFrame-plot-参数\" class=\"headerlink\" title=\"DataFrame.plot()参数\"></a>DataFrame.plot()参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">subplots</td>\n<td align=\"left\">将df每一列绘制在独立子图中</td>\n</tr>\n<tr>\n<td align=\"left\">sharex</td>\n<td align=\"left\">subplots=True共享x轴</td>\n</tr>\n<tr>\n<td align=\"left\">sharey</td>\n<td align=\"left\">subplots=True共享y轴</td>\n</tr>\n<tr>\n<td align=\"left\">title</td>\n<td align=\"left\">标题</td>\n</tr>\n</tbody></table>\n<h4 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h4><p>plot.bar()和plot.barh()分别绘制垂直和水平的柱状图</p>\n","site":{"data":{}},"excerpt":"<p>学习matplotlib的应用</p>","more":"<h3 id=\"简单matplotlibAPI\"><a href=\"#简单matplotlibAPI\" class=\"headerlink\" title=\"简单matplotlibAPI\"></a>简单matplotlibAPI</h3><p>导入<br><code>In [0]: import matplotlib.pyplot as plt</code><br>简单的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import numpy as np</span><br><span class=\"line\">In [2]: data = np.arange(10)</span><br><span class=\"line\">In [3]: plt.plot(data)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片与子图\"><a href=\"#图片与子图\" class=\"headerlink\" title=\"图片与子图\"></a>图片与子图</h4><p>matplotlib绘制的图片位于Figure对象中，使用plt.figure生成一个新图片。<br>使用subplot生成2X2的子图并布置在左上角的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [4]: fig = plt.figure()</span><br><span class=\"line\">In [5]: ax1 = fig.add_subplot(2,2,1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h4><ul>\n<li><p>matplotlib主函数接收带有x和y轴的数组以及参数。<br><code>ax.plot(x,y,linestyle=&#39;--&#39;,color=&#39;g&#39;)</code>或者<code>ax.plot(x,y,&#39;g--&#39;)</code></p>\n</li>\n<li><p>设置刻度标签和图例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ticks = ax.set_xticks([0,250,500,750,1000])</span><br><span class=\"line\">labels = ax.set_xticklabels([&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;,&#x27;four&#x27;,&#x27;five&#x27;])</span><br><span class=\"line\">ax.set_title(&#x27;My PLT&#x27;)</span><br><span class=\"line\">ax.set_xlabel(&#x27;Stage&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用pandas\"><a href=\"#使用pandas\" class=\"headerlink\" title=\"使用pandas\"></a>使用pandas</h3><p>Series和DataFrame都有一个plot属性，用于绘制图形，默认为折线图，有一些简单的方法参数。</p>\n<h4 id=\"Series-plot-方法参数\"><a href=\"#Series-plot-方法参数\" class=\"headerlink\" title=\"Series.plot()方法参数\"></a>Series.plot()方法参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">label</td>\n<td align=\"left\">图里标签</td>\n</tr>\n<tr>\n<td align=\"left\">ax</td>\n<td align=\"left\">子图对象</td>\n</tr>\n<tr>\n<td align=\"left\">style</td>\n<td align=\"left\">样式</td>\n</tr>\n<tr>\n<td align=\"left\">kind</td>\n<td align=\"left\">area bar barh density hist kde line pie等</td>\n</tr>\n<tr>\n<td align=\"left\">logy</td>\n<td align=\"left\">y轴对数缩放</td>\n</tr>\n<tr>\n<td align=\"left\">xticks</td>\n<td align=\"left\">x的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">yticks</td>\n<td align=\"left\">y的刻度值</td>\n</tr>\n<tr>\n<td align=\"left\">xlim</td>\n<td align=\"left\">x轴范围</td>\n</tr>\n<tr>\n<td align=\"left\">ylim</td>\n<td align=\"left\">y轴范围</td>\n</tr>\n</tbody></table>\n<h4 id=\"DataFrame-plot-参数\"><a href=\"#DataFrame-plot-参数\" class=\"headerlink\" title=\"DataFrame.plot()参数\"></a>DataFrame.plot()参数</h4><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">subplots</td>\n<td align=\"left\">将df每一列绘制在独立子图中</td>\n</tr>\n<tr>\n<td align=\"left\">sharex</td>\n<td align=\"left\">subplots=True共享x轴</td>\n</tr>\n<tr>\n<td align=\"left\">sharey</td>\n<td align=\"left\">subplots=True共享y轴</td>\n</tr>\n<tr>\n<td align=\"left\">title</td>\n<td align=\"left\">标题</td>\n</tr>\n</tbody></table>\n<h4 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h4><p>plot.bar()和plot.barh()分别绘制垂直和水平的柱状图</p>"},{"title":"about-plan","date":"2021-09-14T12:35:59.000Z","_content":"\n\n<!-- more -->","source":"_posts/about-plan.md","raw":"---\ntitle: about-plan\ndate: 2021-09-14 20:35:59\ntags:\ncategories:\n---\n\n\n<!-- more -->","slug":"about-plan","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwcapgz3000b4cvh5ev63bag","content":"<span id=\"more\"></span>","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"python随笔","date":"2021-08-31T13:42:26.000Z","_content":"\npython学习的点滴细节问题\n<!-- more -->\n#### print\n`print('xxx', end='\\r')`输出后刷新到本行头","source":"_posts/about-python.md","raw":"---\nlayout:\ntitle: python随笔\ndate: 2021-08-31 21:42:26\ntags:\n- python\ncategories:\n- [学习, coding]\n---\n\npython学习的点滴细节问题\n<!-- more -->\n#### print\n`print('xxx', end='\\r')`输出后刷新到本行头","slug":"about-python","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz3000c4cvh613c4bj0","content":"<p>python学习的点滴细节问题</p>\n<span id=\"more\"></span>\n<h4 id=\"print\"><a href=\"#print\" class=\"headerlink\" title=\"print\"></a>print</h4><p><code>print(&#39;xxx&#39;, end=&#39;\\r&#39;)</code>输出后刷新到本行头</p>\n","site":{"data":{}},"excerpt":"<p>python学习的点滴细节问题</p>","more":"<h4 id=\"print\"><a href=\"#print\" class=\"headerlink\" title=\"print\"></a>print</h4><p><code>print(&#39;xxx&#39;, end=&#39;\\r&#39;)</code>输出后刷新到本行头</p>"},{"layout":"post","title":"about-tensorboard","date":"2021-09-05T03:35:08.000Z","_content":"\npytorch框架下的tensorboard使用\n<!-- more -->\n\ntensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。\n\n### tensorboard使用逻辑\n- 将代码运行过程中的，某些你关心的数据保存在一个文件夹中。\n这一步由writer完成\n- 再读取这个文件夹中的数据，用浏览器显示出来。 \n这一步通过tensorboard完成\n### 使用流程\n- 导入`from torch.utils.tensorboard import SummaryWriter`\n- 实例化`writer = SummaryWriter('./path/to/log')`\n- ","source":"_posts/about-tensorboard.md","raw":"---\nlayout: \ntitle: about-tensorboard\ndate: 2021-09-05 11:35:08\ntags:\n- tensorboard\n- pytorch\ncategories:\n- [学习, coding]\n---\n\npytorch框架下的tensorboard使用\n<!-- more -->\n\ntensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。\n\n### tensorboard使用逻辑\n- 将代码运行过程中的，某些你关心的数据保存在一个文件夹中。\n这一步由writer完成\n- 再读取这个文件夹中的数据，用浏览器显示出来。 \n这一步通过tensorboard完成\n### 使用流程\n- 导入`from torch.utils.tensorboard import SummaryWriter`\n- 实例化`writer = SummaryWriter('./path/to/log')`\n- ","slug":"about-tensorboard","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz4000f4cvh1vy1aejv","content":"<p>pytorch框架下的tensorboard使用</p>\n<span id=\"more\"></span>\n\n<p>tensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。</p>\n<h3 id=\"tensorboard使用逻辑\"><a href=\"#tensorboard使用逻辑\" class=\"headerlink\" title=\"tensorboard使用逻辑\"></a>tensorboard使用逻辑</h3><ul>\n<li>将代码运行过程中的，某些你关心的数据保存在一个文件夹中。<br>这一步由writer完成</li>\n<li>再读取这个文件夹中的数据，用浏览器显示出来。<br>这一步通过tensorboard完成<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3></li>\n<li>导入<code>from torch.utils.tensorboard import SummaryWriter</code></li>\n<li>实例化<code>writer = SummaryWriter(&#39;./path/to/log&#39;)</code></li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>pytorch框架下的tensorboard使用</p>","more":"<p>tensorboard原本是tensorflow的可视化工具，pytorch从1.2.0开始支持tensorboard。之前的版本也可以使用tensorboardX代替。</p>\n<h3 id=\"tensorboard使用逻辑\"><a href=\"#tensorboard使用逻辑\" class=\"headerlink\" title=\"tensorboard使用逻辑\"></a>tensorboard使用逻辑</h3><ul>\n<li>将代码运行过程中的，某些你关心的数据保存在一个文件夹中。<br>这一步由writer完成</li>\n<li>再读取这个文件夹中的数据，用浏览器显示出来。<br>这一步通过tensorboard完成<h3 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h3></li>\n<li>导入<code>from torch.utils.tensorboard import SummaryWriter</code></li>\n<li>实例化<code>writer = SummaryWriter(&#39;./path/to/log&#39;)</code></li>\n<li></li>\n</ul>"},{"layout":"post","title":"个人思考","date":"2021-08-30T13:56:30.000Z","_content":"\n加油！\n<!-- more -->\n\n马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。\n### 学习\n学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。\n### 拳\n好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、\n### 协会\n慢慢摸索，用心。\n### 读书\n多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）","source":"_posts/about-thinking-21-8-29.md","raw":"---\nlayout: \ntitle: 个人思考\ndate: 2021-08-30 21:56:30\ntags: \ncategories:\n- [生活, 感悟]\n---\n\n加油！\n<!-- more -->\n\n马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。\n### 学习\n学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。\n### 拳\n好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、\n### 协会\n慢慢摸索，用心。\n### 读书\n多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）","slug":"about-thinking-21-8-29","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz5000h4cvhfves6f8g","content":"<p>加油！</p>\n<span id=\"more\"></span>\n\n<p>马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。</p>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。</p>\n<h3 id=\"拳\"><a href=\"#拳\" class=\"headerlink\" title=\"拳\"></a>拳</h3><p>好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、</p>\n<h3 id=\"协会\"><a href=\"#协会\" class=\"headerlink\" title=\"协会\"></a>协会</h3><p>慢慢摸索，用心。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）</p>\n","site":{"data":{}},"excerpt":"<p>加油！</p>","more":"<p>马上又是新的一学期了，也要进入研究生生涯承上启下，最关键的一年了。这一年，或者说只有半年，决定了我该往哪个方向走，决定了我以后会走到什么地方。</p>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>学习是一个最重要的任务，但是项目、科研、比赛的平衡很难把握，现在只能说是兵来将挡水来土掩，碰上什么事情解决什么事情，还没有一个长远的规划。方法当然是要好好搞科研，争取发一篇文章，但是应该怎么做呢？还需要思考。</p>\n<h3 id=\"拳\"><a href=\"#拳\" class=\"headerlink\" title=\"拳\"></a>拳</h3><p>好好练拳没什么说的，保证每天的质量，静定，练拳的时候就要放下一切、</p>\n<h3 id=\"协会\"><a href=\"#协会\" class=\"headerlink\" title=\"协会\"></a>协会</h3><p>慢慢摸索，用心。</p>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>多读书，勤思考，多记录，多积累，深体会，目标：《毛泽东传》，配合毛选，传统文化一本（易经或者春秋，或者东周列国志）</p>"},{"layout":"post","title":"about-thinking-21.9.7","date":"2021-09-07T15:16:10.000Z","_content":"\n\n<!-- more -->\n新的目标，可能需要立足实际一点，整理思路。\n\n- 当前情况\n学术路线基本走不通；\n技术路线有一定条件和时间去争取；\n协会\n\n- 未来任务\n毕业\n工作\n\n- 思路\n手头项目完成好\n练拳练好\n看书\n多与学长师兄交流\n","source":"_posts/about-thinking-21-9-7.md","raw":"---\nlayout: \ntitle: about-thinking-21.9.7\ndate: 2021-09-07 23:16:10\ntags: \ncategories:\n- [生活, 感悟]\n---\n\n\n<!-- more -->\n新的目标，可能需要立足实际一点，整理思路。\n\n- 当前情况\n学术路线基本走不通；\n技术路线有一定条件和时间去争取；\n协会\n\n- 未来任务\n毕业\n工作\n\n- 思路\n手头项目完成好\n练拳练好\n看书\n多与学长师兄交流\n","slug":"about-thinking-21-9-7","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz6000l4cvh5fdm7dvy","content":"<span id=\"more\"></span>\n<p>新的目标，可能需要立足实际一点，整理思路。</p>\n<ul>\n<li><p>当前情况<br>学术路线基本走不通；<br>技术路线有一定条件和时间去争取；<br>协会</p>\n</li>\n<li><p>未来任务<br>毕业<br>工作</p>\n</li>\n<li><p>思路<br>手头项目完成好<br>练拳练好<br>看书<br>多与学长师兄交流</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>新的目标，可能需要立足实际一点，整理思路。</p>\n<ul>\n<li><p>当前情况<br>学术路线基本走不通；<br>技术路线有一定条件和时间去争取；<br>协会</p>\n</li>\n<li><p>未来任务<br>毕业<br>工作</p>\n</li>\n<li><p>思路<br>手头项目完成好<br>练拳练好<br>看书<br>多与学长师兄交流</p>\n</li>\n</ul>"},{"layout":"post","title":"about-torch-dataenhance","date":"2021-09-07T03:18:29.000Z","_content":"\ntorch中使用数据增强的一些技巧和方法。\n<!-- more -->\n\n### 对tensor进行shuffle\n#### 对所有element随机shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.nelement())\nt = t.view(-1)[idx].view(t.size())\nprint(t)\n```\n\n#### 按照某一特定维度进行shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.shape[1])\nt = t[:, idx].view(t.size())\nprint(t)\n```\n\n把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。","source":"_posts/about-torch-dataenhance.md","raw":"---\nlayout: \ntitle: about-torch-dataenhance\ndate: 2021-09-07 11:18:29\ntags:\n- torch\n- dataenhance\ncategories:\n- [学习, coding]\n---\n\ntorch中使用数据增强的一些技巧和方法。\n<!-- more -->\n\n### 对tensor进行shuffle\n#### 对所有element随机shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.nelement())\nt = t.view(-1)[idx].view(t.size())\nprint(t)\n```\n\n#### 按照某一特定维度进行shuffle\n```\nt=torch.tensor([[1, 2, 3],[3, 4, 5]])\nprint(t)\nidx = torch.randperm(t.shape[1])\nt = t[:, idx].view(t.size())\nprint(t)\n```\n\n把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。","slug":"about-torch-dataenhance","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz6000m4cvhbvlwa6ox","content":"<p>torch中使用数据增强的一些技巧和方法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"对tensor进行shuffle\"><a href=\"#对tensor进行shuffle\" class=\"headerlink\" title=\"对tensor进行shuffle\"></a>对tensor进行shuffle</h3><h4 id=\"对所有element随机shuffle\"><a href=\"#对所有element随机shuffle\" class=\"headerlink\" title=\"对所有element随机shuffle\"></a>对所有element随机shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.nelement())</span><br><span class=\"line\">t = t.view(-1)[idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按照某一特定维度进行shuffle\"><a href=\"#按照某一特定维度进行shuffle\" class=\"headerlink\" title=\"按照某一特定维度进行shuffle\"></a>按照某一特定维度进行shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.shape[1])</span><br><span class=\"line\">t = t[:, idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<p>把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。</p>\n","site":{"data":{}},"excerpt":"<p>torch中使用数据增强的一些技巧和方法。</p>","more":"<h3 id=\"对tensor进行shuffle\"><a href=\"#对tensor进行shuffle\" class=\"headerlink\" title=\"对tensor进行shuffle\"></a>对tensor进行shuffle</h3><h4 id=\"对所有element随机shuffle\"><a href=\"#对所有element随机shuffle\" class=\"headerlink\" title=\"对所有element随机shuffle\"></a>对所有element随机shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.nelement())</span><br><span class=\"line\">t = t.view(-1)[idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按照某一特定维度进行shuffle\"><a href=\"#按照某一特定维度进行shuffle\" class=\"headerlink\" title=\"按照某一特定维度进行shuffle\"></a>按照某一特定维度进行shuffle</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=torch.tensor([[1, 2, 3],[3, 4, 5]])</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">idx = torch.randperm(t.shape[1])</span><br><span class=\"line\">t = t[:, idx].view(t.size())</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<p>把原先tensor中的数据按照行优先的顺序排成一个一维的数据（这里应该是因为要求地址是连续存储的），然后按照参数组合成其他维度的tensor。比如说是不管你原先的数据是[[[1,2,3],[4,5,6]]]还是[1,2,3,4,5,6]，因为它们排成一维向量都是6个元素，所以只要view后面的参数一致，得到的结果都是一样的。</p>"},{"title":"Hello World","_content":"\nwelcome to hexo!\n\n<!-- more -->\n\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nwelcome to hexo!\n\n<!-- more -->\n\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-11-22T05:05:14.655Z","updated":"2021-11-22T05:05:14.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwcapgz7000p4cvhfptug6pb","content":"<p>welcome to hexo!</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>welcome to hexo!</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"layout":"post","title":"迭代器与生成器 Iterator andgenerator","date":"2021-08-24T16:00:00.000Z","_content":"关于iterator和generator的区别于联系。\n<!-- more -->\n### 引言\n\n简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：\n- 迭代器 --> 生成器\n- 序列（字符串、列表、元组）\n- 字典\n\n### 1 生成器\n\n&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。\n\n&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.\n\n&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用**yield**会暂停，而可以使用 `next()` 函数和 `send()` 函数恢复生成器。\n\n&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。\n\n```\n#列表生成式\nlis = [x*x for x in range(10)]\nprint(lis)\n#生成器\ngenerator_ex = (x*x for x in range(10))\nprint(generator_ex)\n \n结果：\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n<generator object <genexpr> at 0x000002A4CBF9EBA0>\n```\n\n&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是`<generator object <genexpr> at 0x000002A4CBF9EBA0>`，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。\n\n用generator实现斐波那契数列\n\n```\ndef fib(max):\n    n,a,b =0,0,1\n    while n < max:\n        yield b\n        a,b =b,a+b\n        n = n+1\n    return 'done'\n \na = fib(10)\nprint(fib(10))\n# out:<generator object fib at 0x0000023A21A34FC0>\n\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:2\n\nfor i in fib(6):\n    print(i)\n# out:1;1;2;3;5;8\n```\n\n### 2 迭代器\n\n- **可迭代对象**（Iterable）\n集合数据类型，如list,tuple,dict,set,str等\n- **迭代器**（Iterator）\nPython中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。\n\n&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断\n\n```\n>>> from collections import Iterable\n>>> isinstance([], Iterable)\nTrue\n>>> isinstance({}, Iterable)\nTrue\n>>> isinstance('abc', Iterable)\nTrue\n>>> isinstance((x for x in range(10)), Iterable)\nTrue\n>>> isinstance(100, Iterable)\nFalse\n```\n\n```\n>>> from collections import Iterator\n>>> isinstance((x for x in range(10)), Iterator)\nTrue\n>>> isinstance([], Iterator)\nFalse\n>>> isinstance({}, Iterator)\nFalse\n>>> isinstance('abc', Iterator)\nFalse\n```\n\n","source":"_posts/iterator-and-generator.md","raw":"---\nlayout: \ntitle: 迭代器与生成器 Iterator andgenerator\ndate: 2021-08-25\ntags:\n- python\n- dataloader\n- pytorch\ncategories:\n- [学习, coding]\n---\n关于iterator和generator的区别于联系。\n<!-- more -->\n### 引言\n\n简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：\n- 迭代器 --> 生成器\n- 序列（字符串、列表、元组）\n- 字典\n\n### 1 生成器\n\n&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。\n\n&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.\n\n&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用**yield**会暂停，而可以使用 `next()` 函数和 `send()` 函数恢复生成器。\n\n&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。\n\n```\n#列表生成式\nlis = [x*x for x in range(10)]\nprint(lis)\n#生成器\ngenerator_ex = (x*x for x in range(10))\nprint(generator_ex)\n \n结果：\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n<generator object <genexpr> at 0x000002A4CBF9EBA0>\n```\n\n&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是`<generator object <genexpr> at 0x000002A4CBF9EBA0>`，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。\n\n用generator实现斐波那契数列\n\n```\ndef fib(max):\n    n,a,b =0,0,1\n    while n < max:\n        yield b\n        a,b =b,a+b\n        n = n+1\n    return 'done'\n \na = fib(10)\nprint(fib(10))\n# out:<generator object fib at 0x0000023A21A34FC0>\n\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:1\nprint(a.__next__())\n# out:2\n\nfor i in fib(6):\n    print(i)\n# out:1;1;2;3;5;8\n```\n\n### 2 迭代器\n\n- **可迭代对象**（Iterable）\n集合数据类型，如list,tuple,dict,set,str等\n- **迭代器**（Iterator）\nPython中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。\n\n&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断\n\n```\n>>> from collections import Iterable\n>>> isinstance([], Iterable)\nTrue\n>>> isinstance({}, Iterable)\nTrue\n>>> isinstance('abc', Iterable)\nTrue\n>>> isinstance((x for x in range(10)), Iterable)\nTrue\n>>> isinstance(100, Iterable)\nFalse\n```\n\n```\n>>> from collections import Iterator\n>>> isinstance((x for x in range(10)), Iterator)\nTrue\n>>> isinstance([], Iterator)\nFalse\n>>> isinstance({}, Iterator)\nFalse\n>>> isinstance('abc', Iterator)\nFalse\n```\n\n","slug":"iterator-and-generator","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz8000r4cvhgdprebdy","content":"<p>关于iterator和generator的区别于联系。</p>\n<span id=\"more\"></span>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：</p>\n<ul>\n<li>迭代器 –&gt; 生成器</li>\n<li>序列（字符串、列表、元组）</li>\n<li>字典</li>\n</ul>\n<h3 id=\"1-生成器\"><a href=\"#1-生成器\" class=\"headerlink\" title=\"1 生成器\"></a>1 生成器</h3><p>&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.</p>\n<p>&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用<strong>yield</strong>会暂停，而可以使用 <code>next()</code> 函数和 <code>send()</code> 函数恢复生成器。</p>\n<p>&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列表生成式</span><br><span class=\"line\">lis = [x*x for x in range(10)]</span><br><span class=\"line\">print(lis)</span><br><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex = (x*x for x in range(10))</span><br><span class=\"line\">print(generator_ex)</span><br><span class=\"line\"> </span><br><span class=\"line\">结果：</span><br><span class=\"line\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是<code>&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</code>，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。</p>\n<p>用generator实现斐波那契数列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b =0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b =b,a+b</span><br><span class=\"line\">        n = n+1</span><br><span class=\"line\">    return &#x27;done&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">a = fib(10)</span><br><span class=\"line\">print(fib(10))</span><br><span class=\"line\"># out:&lt;generator object fib at 0x0000023A21A34FC0&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:2</span><br><span class=\"line\"></span><br><span class=\"line\">for i in fib(6):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"># out:1;1;2;3;5;8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-迭代器\"><a href=\"#2-迭代器\" class=\"headerlink\" title=\"2 迭代器\"></a>2 迭代器</h3><ul>\n<li><strong>可迭代对象</strong>（Iterable）<br>集合数据类型，如list,tuple,dict,set,str等</li>\n<li><strong>迭代器</strong>（Iterator）<br>Python中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。</li>\n</ul>\n<p>&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>关于iterator和generator的区别于联系。</p>","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>简单来说生成器是一种特殊的迭代器，而可迭代对象有下面三种：</p>\n<ul>\n<li>迭代器 –&gt; 生成器</li>\n<li>序列（字符串、列表、元组）</li>\n<li>字典</li>\n</ul>\n<h3 id=\"1-生成器\"><a href=\"#1-生成器\" class=\"headerlink\" title=\"1 生成器\"></a>1 生成器</h3><p>&emsp;&emsp;通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>&emsp;&emsp;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为生成器：generator.</p>\n<p>&emsp;&emsp;生成器是一个特殊的程序，可以被用作控制循环的迭代行为，python中生成器是迭代器的一种，使用yield返回值函数，每次调用<strong>yield</strong>会暂停，而可以使用 <code>next()</code> 函数和 <code>send()</code> 函数恢复生成器。</p>\n<p>&emsp;&emsp;生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列表生成式</span><br><span class=\"line\">lis = [x*x for x in range(10)]</span><br><span class=\"line\">print(lis)</span><br><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex = (x*x for x in range(10))</span><br><span class=\"line\">print(generator_ex)</span><br><span class=\"line\"> </span><br><span class=\"line\">结果：</span><br><span class=\"line\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是<code>&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</code>，要一个个打印出来，可以通过next（）函数获得generator的下一个返回值。</p>\n<p>用generator实现斐波那契数列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b =0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b =b,a+b</span><br><span class=\"line\">        n = n+1</span><br><span class=\"line\">    return &#x27;done&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">a = fib(10)</span><br><span class=\"line\">print(fib(10))</span><br><span class=\"line\"># out:&lt;generator object fib at 0x0000023A21A34FC0&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:1</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"># out:2</span><br><span class=\"line\"></span><br><span class=\"line\">for i in fib(6):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"># out:1;1;2;3;5;8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-迭代器\"><a href=\"#2-迭代器\" class=\"headerlink\" title=\"2 迭代器\"></a>2 迭代器</h3><ul>\n<li><strong>可迭代对象</strong>（Iterable）<br>集合数据类型，如list,tuple,dict,set,str等</li>\n<li><strong>迭代器</strong>（Iterator）<br>Python中一个实现了_iter_方法和_next_方法的类对象，就是迭代器。</li>\n</ul>\n<p>&emsp;&emsp;生成器都是Iterator对象，但list、dict、str虽然是Iterable（可迭代对象），却不是Iterator（迭代器）。把list、dict、str等Iterable变成Iterator可以使用iter()函数判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"使用tfrecords制作pytorch的dataloader 双框架混用","date":"2021-08-24T16:00:00.000Z","_content":"\n在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。\n<!-- more -->\n\n### 1 tfrecords文件读取\n\n#### 1.1 tfrecords文件的结构\n\nTFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。\ntfrecord内部包含了多个 `tf.train.Example`， 而 `Example` 是protocol buffer(protobuf) 数据标准的实现，在一个 `Example` 消息体中包含了一系列的 `tf.train.feature` 属性，而 每一个 `feature` 是一个 `key-value` 的键值对，其中，key 是string类型，而value 的取值有三种：\n-` bytes_list`: 可以存储string 和byte两种数据类型。\n-` float_list`: 可以存储float(float32)与double(float64) 两种数据类型 。\n- `int64_list`: 可以存储：bool, enum, int32, uint32, int64, uint64 。\n\n#### 1.2 数据写入\n\n此部分简单 实例，通过代码了解即可\n\n```\nwriter = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象\n\nfor data in dataes:\n    context = dataes[0]\n    question = dataes[1]\n    answer = dataes[2]\n\n    \"\"\" 2. 定义features \"\"\"\n   example = tf.train.Example (\n    features=tf.train.Features(\n        feature={\n            'name' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode('utf-8')])),\n            'label': tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),\n            'shape': tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),\n            'data' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))\n        }\n    )\n)\n\n    \n    \"\"\" 3. 序列化,写入\"\"\"\n    serialized = example.SerializeToString()\n    writer.write(serialized)\n```\n\n#### 1.3 数据读取\n\n通过写入的example指定参数解析tfrecord\n\n```\nreader = tf.data.TFRecordDataset(file_name)\n\nfeature_description = {\n    'name' : tf.io.FixedLenFeature([], tf.string, default_value='Nan'),\n    'label': tf.io.FixedLenFeature([] , tf.int64, default_value=-1),\n    'shape': tf.io.FixedLenFeature([3], tf.int64),\n    'data' : tf.io.FixedLenFeature([], tf.string)\n}\ndef _parse_function (exam_proto):\n    return tf.io.parse_single_example (exam_proto, feature_description)\n\nreader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch\nreader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据\nreader = reader.map (_parse_function) # 解析数据\nbatch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset\n\nshape = []\nbatch_data_x, batch_data_y = np.array([]), np.array([])\nfor item in batch.take(1): # 测试，只取1个batch\n    shape = item['shape'][0].numpy()\n    for data in item['data']: # 一个item就是一个batch\n        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)\n        batch_data_x = np.append (batch_data_x, img_data)\n    for label in item ['label']:\n        batch_data_y = np.append (batch_data_y, label.numpy())\n\n```\n\n### 2 读取tfrecord制作torch dataloader\n\n上代码\n\n```\ndef get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):\n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    if cache:\n        ds = ds.cache()\n\n    if repeat:\n        ds = ds.repeat()\n\n    if shuffle:\n        ds = ds.shuffle(1024 * 2)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n\n\n    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    ds = ds.batch(batch_size)\n    ds = ds.prefetch(AUTO)\n    return tfds.as_numpy(ds)\n```\n\n这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分**map**中的 `read_labeled_tfrecord` 就相当于上面的 `_parse_function`\n\n```\ntfrec_format = {\n    \"label\": tf.io.FixedLenFeature([], tf.int64),\n    \"data\": tf.io.FixedLenFeature([], tf.string),\n    \"id\": tf.io.FixedLenFeature([], tf.string)\n}\ndef read_labeled_tfrecord(example):\n    example = tf.io.parse_single_example(example, tfrec_format)\n    example['data'] = decode_wave(example['data'])\n    return example\n```\n\n解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 `raw = data.astype(np.float32).tobytes()` ，将三段4096长度的音频encode了，因此，解码函数为\n\n```\ndef decode_wave(wave):\n    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))\n    normalized_waves = []\n    for i in range(3):\n        normalized_waves.append(wave[i])\n    wave = tf.stack(normalized_waves, axis=0)\n    wave = tf.cast(wave, tf.float32)\n    return wave\n```\n\n再利用dataset制作dataloader，先上代码\n```\nclass TFRecordDataLoader:\n    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):\n        self.ds = get_dataset(\n            files, \n            batch_size=batch_size,\n            cache=cache,\n            repeat=repeat,\n            shuffle=shuffle,\n            labeled=labeled,\n            return_image_ids=return_image_ids)\n        \n        if train:\n            self.num_examples = count_data_items(files)\n        else:\n            self.num_examples = count_data_items_test(files)\n\n        self.batch_size = batch_size\n        self.labeled = labeled\n        self.return_image_ids = return_image_ids\n        self._iterator = None\n    \n    def __iter__(self):\n        if self._iterator is None:\n            self._iterator = iter(self.ds)\n        else:\n            self._reset()\n        return self._iterator\n\n    def _reset(self):\n        self._iterator = iter(self.ds)\n\n    def __next__(self):\n        batch = next(self._iterator)\n        return batch\n\n    def __len__(self):\n        n_batches = self.num_examples // self.batch_size\n        if self.num_examples % self.batch_size == 0:\n            return n_batches\n        else:\n            return n_batches + 1\n```\n\n其中最重要的几个方法涉及到了**iterator**，因为dataloader本身就是一个iterator，下面以此介绍\n\n- `__iter__(self)`:  `self._iterator = iter(self.ds)` 将可迭代对象加载为成迭代器。\n- `__next__(self)`: 获取下一个对象 `batch = next(self._iterator)`.\n- `__len__(self)`: 返回迭代器的长度。","source":"_posts/make-torchdataloader-with-tfrecs.md","raw":"---\nlayout: \ntitle: 使用tfrecords制作pytorch的dataloader 双框架混用\ndate: 2021-08-25\ntags:\n- tensorflow\n- tfrecords\n- pytorch\n- dataloader\n- iterator\ncategories:\n- [学习, coding]\n---\n\n在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。\n<!-- more -->\n\n### 1 tfrecords文件读取\n\n#### 1.1 tfrecords文件的结构\n\nTFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。\ntfrecord内部包含了多个 `tf.train.Example`， 而 `Example` 是protocol buffer(protobuf) 数据标准的实现，在一个 `Example` 消息体中包含了一系列的 `tf.train.feature` 属性，而 每一个 `feature` 是一个 `key-value` 的键值对，其中，key 是string类型，而value 的取值有三种：\n-` bytes_list`: 可以存储string 和byte两种数据类型。\n-` float_list`: 可以存储float(float32)与double(float64) 两种数据类型 。\n- `int64_list`: 可以存储：bool, enum, int32, uint32, int64, uint64 。\n\n#### 1.2 数据写入\n\n此部分简单 实例，通过代码了解即可\n\n```\nwriter = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象\n\nfor data in dataes:\n    context = dataes[0]\n    question = dataes[1]\n    answer = dataes[2]\n\n    \"\"\" 2. 定义features \"\"\"\n   example = tf.train.Example (\n    features=tf.train.Features(\n        feature={\n            'name' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode('utf-8')])),\n            'label': tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),\n            'shape': tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),\n            'data' : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))\n        }\n    )\n)\n\n    \n    \"\"\" 3. 序列化,写入\"\"\"\n    serialized = example.SerializeToString()\n    writer.write(serialized)\n```\n\n#### 1.3 数据读取\n\n通过写入的example指定参数解析tfrecord\n\n```\nreader = tf.data.TFRecordDataset(file_name)\n\nfeature_description = {\n    'name' : tf.io.FixedLenFeature([], tf.string, default_value='Nan'),\n    'label': tf.io.FixedLenFeature([] , tf.int64, default_value=-1),\n    'shape': tf.io.FixedLenFeature([3], tf.int64),\n    'data' : tf.io.FixedLenFeature([], tf.string)\n}\ndef _parse_function (exam_proto):\n    return tf.io.parse_single_example (exam_proto, feature_description)\n\nreader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch\nreader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据\nreader = reader.map (_parse_function) # 解析数据\nbatch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset\n\nshape = []\nbatch_data_x, batch_data_y = np.array([]), np.array([])\nfor item in batch.take(1): # 测试，只取1个batch\n    shape = item['shape'][0].numpy()\n    for data in item['data']: # 一个item就是一个batch\n        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)\n        batch_data_x = np.append (batch_data_x, img_data)\n    for label in item ['label']:\n        batch_data_y = np.append (batch_data_y, label.numpy())\n\n```\n\n### 2 读取tfrecord制作torch dataloader\n\n上代码\n\n```\ndef get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):\n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    if cache:\n        ds = ds.cache()\n\n    if repeat:\n        ds = ds.repeat()\n\n    if shuffle:\n        ds = ds.shuffle(1024 * 2)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n\n\n    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    ds = ds.batch(batch_size)\n    ds = ds.prefetch(AUTO)\n    return tfds.as_numpy(ds)\n```\n\n这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分**map**中的 `read_labeled_tfrecord` 就相当于上面的 `_parse_function`\n\n```\ntfrec_format = {\n    \"label\": tf.io.FixedLenFeature([], tf.int64),\n    \"data\": tf.io.FixedLenFeature([], tf.string),\n    \"id\": tf.io.FixedLenFeature([], tf.string)\n}\ndef read_labeled_tfrecord(example):\n    example = tf.io.parse_single_example(example, tfrec_format)\n    example['data'] = decode_wave(example['data'])\n    return example\n```\n\n解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 `raw = data.astype(np.float32).tobytes()` ，将三段4096长度的音频encode了，因此，解码函数为\n\n```\ndef decode_wave(wave):\n    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))\n    normalized_waves = []\n    for i in range(3):\n        normalized_waves.append(wave[i])\n    wave = tf.stack(normalized_waves, axis=0)\n    wave = tf.cast(wave, tf.float32)\n    return wave\n```\n\n再利用dataset制作dataloader，先上代码\n```\nclass TFRecordDataLoader:\n    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):\n        self.ds = get_dataset(\n            files, \n            batch_size=batch_size,\n            cache=cache,\n            repeat=repeat,\n            shuffle=shuffle,\n            labeled=labeled,\n            return_image_ids=return_image_ids)\n        \n        if train:\n            self.num_examples = count_data_items(files)\n        else:\n            self.num_examples = count_data_items_test(files)\n\n        self.batch_size = batch_size\n        self.labeled = labeled\n        self.return_image_ids = return_image_ids\n        self._iterator = None\n    \n    def __iter__(self):\n        if self._iterator is None:\n            self._iterator = iter(self.ds)\n        else:\n            self._reset()\n        return self._iterator\n\n    def _reset(self):\n        self._iterator = iter(self.ds)\n\n    def __next__(self):\n        batch = next(self._iterator)\n        return batch\n\n    def __len__(self):\n        n_batches = self.num_examples // self.batch_size\n        if self.num_examples % self.batch_size == 0:\n            return n_batches\n        else:\n            return n_batches + 1\n```\n\n其中最重要的几个方法涉及到了**iterator**，因为dataloader本身就是一个iterator，下面以此介绍\n\n- `__iter__(self)`:  `self._iterator = iter(self.ds)` 将可迭代对象加载为成迭代器。\n- `__next__(self)`: 获取下一个对象 `batch = next(self._iterator)`.\n- `__len__(self)`: 返回迭代器的长度。","slug":"make-torchdataloader-with-tfrecs","published":1,"updated":"2021-11-22T05:05:14.655Z","comments":1,"photos":[],"link":"","_id":"ckwcapgz8000u4cvh3im6g7lv","content":"<p>在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-tfrecords文件读取\"><a href=\"#1-tfrecords文件读取\" class=\"headerlink\" title=\"1 tfrecords文件读取\"></a>1 tfrecords文件读取</h3><h4 id=\"1-1-tfrecords文件的结构\"><a href=\"#1-1-tfrecords文件的结构\" class=\"headerlink\" title=\"1.1 tfrecords文件的结构\"></a>1.1 tfrecords文件的结构</h4><p>TFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。<br>tfrecord内部包含了多个 <code>tf.train.Example</code>， 而 <code>Example</code> 是protocol buffer(protobuf) 数据标准的实现，在一个 <code>Example</code> 消息体中包含了一系列的 <code>tf.train.feature</code> 属性，而 每一个 <code>feature</code> 是一个 <code>key-value</code> 的键值对，其中，key 是string类型，而value 的取值有三种：<br>-<code> bytes_list</code>: 可以存储string 和byte两种数据类型。<br>-<code> float_list</code>: 可以存储float(float32)与double(float64) 两种数据类型 。</p>\n<ul>\n<li><code>int64_list</code>: 可以存储：bool, enum, int32, uint32, int64, uint64 。</li>\n</ul>\n<h4 id=\"1-2-数据写入\"><a href=\"#1-2-数据写入\" class=\"headerlink\" title=\"1.2 数据写入\"></a>1.2 数据写入</h4><p>此部分简单 实例，通过代码了解即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象</span><br><span class=\"line\"></span><br><span class=\"line\">for data in dataes:</span><br><span class=\"line\">    context = dataes[0]</span><br><span class=\"line\">    question = dataes[1]</span><br><span class=\"line\">    answer = dataes[2]</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot; 2. 定义features &quot;&quot;&quot;</span><br><span class=\"line\">   example = tf.train.Example (</span><br><span class=\"line\">    features=tf.train.Features(</span><br><span class=\"line\">        feature=&#123;</span><br><span class=\"line\">            &#x27;name&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode(&#x27;utf-8&#x27;)])),</span><br><span class=\"line\">            &#x27;label&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),</span><br><span class=\"line\">            &#x27;shape&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),</span><br><span class=\"line\">            &#x27;data&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &quot;&quot;&quot; 3. 序列化,写入&quot;&quot;&quot;</span><br><span class=\"line\">    serialized = example.SerializeToString()</span><br><span class=\"line\">    writer.write(serialized)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-数据读取\"><a href=\"#1-3-数据读取\" class=\"headerlink\" title=\"1.3 数据读取\"></a>1.3 数据读取</h4><p>通过写入的example指定参数解析tfrecord</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reader = tf.data.TFRecordDataset(file_name)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_description = &#123;</span><br><span class=\"line\">    &#x27;name&#x27; : tf.io.FixedLenFeature([], tf.string, default_value=&#x27;Nan&#x27;),</span><br><span class=\"line\">    &#x27;label&#x27;: tf.io.FixedLenFeature([] , tf.int64, default_value=-1),</span><br><span class=\"line\">    &#x27;shape&#x27;: tf.io.FixedLenFeature([3], tf.int64),</span><br><span class=\"line\">    &#x27;data&#x27; : tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def _parse_function (exam_proto):</span><br><span class=\"line\">    return tf.io.parse_single_example (exam_proto, feature_description)</span><br><span class=\"line\"></span><br><span class=\"line\">reader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch</span><br><span class=\"line\">reader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据</span><br><span class=\"line\">reader = reader.map (_parse_function) # 解析数据</span><br><span class=\"line\">batch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset</span><br><span class=\"line\"></span><br><span class=\"line\">shape = []</span><br><span class=\"line\">batch_data_x, batch_data_y = np.array([]), np.array([])</span><br><span class=\"line\">for item in batch.take(1): # 测试，只取1个batch</span><br><span class=\"line\">    shape = item[&#x27;shape&#x27;][0].numpy()</span><br><span class=\"line\">    for data in item[&#x27;data&#x27;]: # 一个item就是一个batch</span><br><span class=\"line\">        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)</span><br><span class=\"line\">        batch_data_x = np.append (batch_data_x, img_data)</span><br><span class=\"line\">    for label in item [&#x27;label&#x27;]:</span><br><span class=\"line\">        batch_data_y = np.append (batch_data_y, label.numpy())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-读取tfrecord制作torch-dataloader\"><a href=\"#2-读取tfrecord制作torch-dataloader\" class=\"headerlink\" title=\"2 读取tfrecord制作torch dataloader\"></a>2 读取tfrecord制作torch dataloader</h3><p>上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)</span><br><span class=\"line\">    if cache:</span><br><span class=\"line\">        ds = ds.cache()</span><br><span class=\"line\"></span><br><span class=\"line\">    if repeat:</span><br><span class=\"line\">        ds = ds.repeat()</span><br><span class=\"line\"></span><br><span class=\"line\">    if shuffle:</span><br><span class=\"line\">        ds = ds.shuffle(1024 * 2)</span><br><span class=\"line\">        opt = tf.data.Options()</span><br><span class=\"line\">        opt.experimental_deterministic = False</span><br><span class=\"line\">        ds = ds.with_options(opt)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)</span><br><span class=\"line\">    ds = ds.batch(batch_size)</span><br><span class=\"line\">    ds = ds.prefetch(AUTO)</span><br><span class=\"line\">    return tfds.as_numpy(ds)</span><br></pre></td></tr></table></figure>\n\n<p>这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分<strong>map</strong>中的 <code>read_labeled_tfrecord</code> 就相当于上面的 <code>_parse_function</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfrec_format = &#123;</span><br><span class=\"line\">    &quot;label&quot;: tf.io.FixedLenFeature([], tf.int64),</span><br><span class=\"line\">    &quot;data&quot;: tf.io.FixedLenFeature([], tf.string),</span><br><span class=\"line\">    &quot;id&quot;: tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def read_labeled_tfrecord(example):</span><br><span class=\"line\">    example = tf.io.parse_single_example(example, tfrec_format)</span><br><span class=\"line\">    example[&#x27;data&#x27;] = decode_wave(example[&#x27;data&#x27;])</span><br><span class=\"line\">    return example</span><br></pre></td></tr></table></figure>\n\n<p>解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 <code>raw = data.astype(np.float32).tobytes()</code> ，将三段4096长度的音频encode了，因此，解码函数为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def decode_wave(wave):</span><br><span class=\"line\">    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))</span><br><span class=\"line\">    normalized_waves = []</span><br><span class=\"line\">    for i in range(3):</span><br><span class=\"line\">        normalized_waves.append(wave[i])</span><br><span class=\"line\">    wave = tf.stack(normalized_waves, axis=0)</span><br><span class=\"line\">    wave = tf.cast(wave, tf.float32)</span><br><span class=\"line\">    return wave</span><br></pre></td></tr></table></figure>\n\n<p>再利用dataset制作dataloader，先上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TFRecordDataLoader:</span><br><span class=\"line\">    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">        self.ds = get_dataset(</span><br><span class=\"line\">            files, </span><br><span class=\"line\">            batch_size=batch_size,</span><br><span class=\"line\">            cache=cache,</span><br><span class=\"line\">            repeat=repeat,</span><br><span class=\"line\">            shuffle=shuffle,</span><br><span class=\"line\">            labeled=labeled,</span><br><span class=\"line\">            return_image_ids=return_image_ids)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if train:</span><br><span class=\"line\">            self.num_examples = count_data_items(files)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.num_examples = count_data_items_test(files)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.batch_size = batch_size</span><br><span class=\"line\">        self.labeled = labeled</span><br><span class=\"line\">        self.return_image_ids = return_image_ids</span><br><span class=\"line\">        self._iterator = None</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        if self._iterator is None:</span><br><span class=\"line\">            self._iterator = iter(self.ds)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self._reset()</span><br><span class=\"line\">        return self._iterator</span><br><span class=\"line\"></span><br><span class=\"line\">    def _reset(self):</span><br><span class=\"line\">        self._iterator = iter(self.ds)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        batch = next(self._iterator)</span><br><span class=\"line\">        return batch</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        n_batches = self.num_examples // self.batch_size</span><br><span class=\"line\">        if self.num_examples % self.batch_size == 0:</span><br><span class=\"line\">            return n_batches</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return n_batches + 1</span><br></pre></td></tr></table></figure>\n\n<p>其中最重要的几个方法涉及到了<strong>iterator</strong>，因为dataloader本身就是一个iterator，下面以此介绍</p>\n<ul>\n<li><code>__iter__(self)</code>:  <code>self._iterator = iter(self.ds)</code> 将可迭代对象加载为成迭代器。</li>\n<li><code>__next__(self)</code>: 获取下一个对象 <code>batch = next(self._iterator)</code>.</li>\n<li><code>__len__(self)</code>: 返回迭代器的长度。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在kaggle比赛的时候，有时候会需要读取tfrecords文件，而我使用的是torch的框架，此时需要通过tfrecords制作dataset和dataloader。解决这个问题第一是用了tfrecord库，第二是通过kaggle的一篇discussion学习到重写dataloader的方法。</p>","more":"<h3 id=\"1-tfrecords文件读取\"><a href=\"#1-tfrecords文件读取\" class=\"headerlink\" title=\"1 tfrecords文件读取\"></a>1 tfrecords文件读取</h3><h4 id=\"1-1-tfrecords文件的结构\"><a href=\"#1-1-tfrecords文件的结构\" class=\"headerlink\" title=\"1.1 tfrecords文件的结构\"></a>1.1 tfrecords文件的结构</h4><p>TFRecords是一种tensorflow的内定标准文件格式，其实质是二进制文件，遵循protocol buffer协议（谷歌的一种数据交换格式），是Google专门为TensorFlow设计的一种数据格式。<br>tfrecord内部包含了多个 <code>tf.train.Example</code>， 而 <code>Example</code> 是protocol buffer(protobuf) 数据标准的实现，在一个 <code>Example</code> 消息体中包含了一系列的 <code>tf.train.feature</code> 属性，而 每一个 <code>feature</code> 是一个 <code>key-value</code> 的键值对，其中，key 是string类型，而value 的取值有三种：<br>-<code> bytes_list</code>: 可以存储string 和byte两种数据类型。<br>-<code> float_list</code>: 可以存储float(float32)与double(float64) 两种数据类型 。</p>\n<ul>\n<li><code>int64_list</code>: 可以存储：bool, enum, int32, uint32, int64, uint64 。</li>\n</ul>\n<h4 id=\"1-2-数据写入\"><a href=\"#1-2-数据写入\" class=\"headerlink\" title=\"1.2 数据写入\"></a>1.2 数据写入</h4><p>此部分简单 实例，通过代码了解即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writer = tf.python_io.TFRecordWriter(out_file_name)  # 1. 定义 writer对象</span><br><span class=\"line\"></span><br><span class=\"line\">for data in dataes:</span><br><span class=\"line\">    context = dataes[0]</span><br><span class=\"line\">    question = dataes[1]</span><br><span class=\"line\">    answer = dataes[2]</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot; 2. 定义features &quot;&quot;&quot;</span><br><span class=\"line\">   example = tf.train.Example (</span><br><span class=\"line\">    features=tf.train.Features(</span><br><span class=\"line\">        feature=&#123;</span><br><span class=\"line\">            &#x27;name&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[splits[-1].encode(&#x27;utf-8&#x27;)])),</span><br><span class=\"line\">            &#x27;label&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[int(label)])),</span><br><span class=\"line\">            &#x27;shape&#x27;: tf.train.Feature(int64_list=tf.train.Int64List (value=[img.shape[0], img.shape[1], img.shape[2]])),</span><br><span class=\"line\">            &#x27;data&#x27; : tf.train.Feature(bytes_list=tf.train.BytesList (value=[bytes(img.numpy())]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    &quot;&quot;&quot; 3. 序列化,写入&quot;&quot;&quot;</span><br><span class=\"line\">    serialized = example.SerializeToString()</span><br><span class=\"line\">    writer.write(serialized)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-数据读取\"><a href=\"#1-3-数据读取\" class=\"headerlink\" title=\"1.3 数据读取\"></a>1.3 数据读取</h4><p>通过写入的example指定参数解析tfrecord</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reader = tf.data.TFRecordDataset(file_name)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_description = &#123;</span><br><span class=\"line\">    &#x27;name&#x27; : tf.io.FixedLenFeature([], tf.string, default_value=&#x27;Nan&#x27;),</span><br><span class=\"line\">    &#x27;label&#x27;: tf.io.FixedLenFeature([] , tf.int64, default_value=-1),</span><br><span class=\"line\">    &#x27;shape&#x27;: tf.io.FixedLenFeature([3], tf.int64),</span><br><span class=\"line\">    &#x27;data&#x27; : tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def _parse_function (exam_proto):</span><br><span class=\"line\">    return tf.io.parse_single_example (exam_proto, feature_description)</span><br><span class=\"line\"></span><br><span class=\"line\">reader = reader.repeat (1) # 读取数据的重复次数为：1次，这个相当于epoch</span><br><span class=\"line\">reader = reader.shuffle (buffer_size = 2000) # 在缓冲区中随机打乱数据</span><br><span class=\"line\">reader = reader.map (_parse_function) # 解析数据</span><br><span class=\"line\">batch  = reader.batch (batch_size = 10) # 每10条数据为一个batch，生成一个新的Dataset</span><br><span class=\"line\"></span><br><span class=\"line\">shape = []</span><br><span class=\"line\">batch_data_x, batch_data_y = np.array([]), np.array([])</span><br><span class=\"line\">for item in batch.take(1): # 测试，只取1个batch</span><br><span class=\"line\">    shape = item[&#x27;shape&#x27;][0].numpy()</span><br><span class=\"line\">    for data in item[&#x27;data&#x27;]: # 一个item就是一个batch</span><br><span class=\"line\">        img_data = np.frombuffer(data.numpy(), dtype=np.uint8)</span><br><span class=\"line\">        batch_data_x = np.append (batch_data_x, img_data)</span><br><span class=\"line\">    for label in item [&#x27;label&#x27;]:</span><br><span class=\"line\">        batch_data_y = np.append (batch_data_y, label.numpy())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-读取tfrecord制作torch-dataloader\"><a href=\"#2-读取tfrecord制作torch-dataloader\" class=\"headerlink\" title=\"2 读取tfrecord制作torch dataloader\"></a>2 读取tfrecord制作torch dataloader</h3><p>上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_dataset(files, batch_size=16, repeat=False, cache=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)</span><br><span class=\"line\">    if cache:</span><br><span class=\"line\">        ds = ds.cache()</span><br><span class=\"line\"></span><br><span class=\"line\">    if repeat:</span><br><span class=\"line\">        ds = ds.repeat()</span><br><span class=\"line\"></span><br><span class=\"line\">    if shuffle:</span><br><span class=\"line\">        ds = ds.shuffle(1024 * 2)</span><br><span class=\"line\">        opt = tf.data.Options()</span><br><span class=\"line\">        opt.experimental_deterministic = False</span><br><span class=\"line\">        ds = ds.with_options(opt)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)</span><br><span class=\"line\">    ds = ds.batch(batch_size)</span><br><span class=\"line\">    ds = ds.prefetch(AUTO)</span><br><span class=\"line\">    return tfds.as_numpy(ds)</span><br></pre></td></tr></table></figure>\n\n<p>这一部分相当于建了一个tf.data.TFRecordDataset，并且包含了shuffle、repeat、等操作，其核心部分<strong>map</strong>中的 <code>read_labeled_tfrecord</code> 就相当于上面的 <code>_parse_function</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfrec_format = &#123;</span><br><span class=\"line\">    &quot;label&quot;: tf.io.FixedLenFeature([], tf.int64),</span><br><span class=\"line\">    &quot;data&quot;: tf.io.FixedLenFeature([], tf.string),</span><br><span class=\"line\">    &quot;id&quot;: tf.io.FixedLenFeature([], tf.string)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">def read_labeled_tfrecord(example):</span><br><span class=\"line\">    example = tf.io.parse_single_example(example, tfrec_format)</span><br><span class=\"line\">    example[&#x27;data&#x27;] = decode_wave(example[&#x27;data&#x27;])</span><br><span class=\"line\">    return example</span><br></pre></td></tr></table></figure>\n\n<p>解析时，在本例中需要用到解码，因为在制作tfrecords时使用了 <code>raw = data.astype(np.float32).tobytes()</code> ，将三段4096长度的音频encode了，因此，解码函数为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def decode_wave(wave):</span><br><span class=\"line\">    wave = tf.reshape(tf.io.decode_raw(wave, tf.float32), (3, 4096))</span><br><span class=\"line\">    normalized_waves = []</span><br><span class=\"line\">    for i in range(3):</span><br><span class=\"line\">        normalized_waves.append(wave[i])</span><br><span class=\"line\">    wave = tf.stack(normalized_waves, axis=0)</span><br><span class=\"line\">    wave = tf.cast(wave, tf.float32)</span><br><span class=\"line\">    return wave</span><br></pre></td></tr></table></figure>\n\n<p>再利用dataset制作dataloader，先上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TFRecordDataLoader:</span><br><span class=\"line\">    def __init__(self, files, batch_size=16, cache=False, train=True, repeat=False, shuffle=False, labeled=True, return_image_ids=True):</span><br><span class=\"line\">        self.ds = get_dataset(</span><br><span class=\"line\">            files, </span><br><span class=\"line\">            batch_size=batch_size,</span><br><span class=\"line\">            cache=cache,</span><br><span class=\"line\">            repeat=repeat,</span><br><span class=\"line\">            shuffle=shuffle,</span><br><span class=\"line\">            labeled=labeled,</span><br><span class=\"line\">            return_image_ids=return_image_ids)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if train:</span><br><span class=\"line\">            self.num_examples = count_data_items(files)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.num_examples = count_data_items_test(files)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.batch_size = batch_size</span><br><span class=\"line\">        self.labeled = labeled</span><br><span class=\"line\">        self.return_image_ids = return_image_ids</span><br><span class=\"line\">        self._iterator = None</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        if self._iterator is None:</span><br><span class=\"line\">            self._iterator = iter(self.ds)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self._reset()</span><br><span class=\"line\">        return self._iterator</span><br><span class=\"line\"></span><br><span class=\"line\">    def _reset(self):</span><br><span class=\"line\">        self._iterator = iter(self.ds)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        batch = next(self._iterator)</span><br><span class=\"line\">        return batch</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        n_batches = self.num_examples // self.batch_size</span><br><span class=\"line\">        if self.num_examples % self.batch_size == 0:</span><br><span class=\"line\">            return n_batches</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return n_batches + 1</span><br></pre></td></tr></table></figure>\n\n<p>其中最重要的几个方法涉及到了<strong>iterator</strong>，因为dataloader本身就是一个iterator，下面以此介绍</p>\n<ul>\n<li><code>__iter__(self)</code>:  <code>self._iterator = iter(self.ds)</code> 将可迭代对象加载为成迭代器。</li>\n<li><code>__next__(self)</code>: 获取下一个对象 <code>batch = next(self._iterator)</code>.</li>\n<li><code>__len__(self)</code>: 返回迭代器的长度。</li>\n</ul>"},{"title":"通过EXIF计算相机内参","date":"2021-12-11T14:09:33.000Z","mathjax":true,"_content":"\n通过图片的EXIF来进行相机内参数的计算。\n\n<!-- more -->\n### 相机内参\n$$\nZp = KP{，其中p表示图像坐标系的点坐标，Z为深度，K为内参矩阵，P为空间点在相机坐标系下的坐标。}\n$$\n需要重点解决的就是相机内参矩阵K。K可以表示为\n$$\nK=\\begin{bmatrix} \n  f_x & 0 & c_x \\\\\n  0 & f_y & c_y \\\\\n  0 & 0 & 1 \\\\\n  \\end{bmatrix}\n  =\\begin{bmatrix}\n  f \\over dx & 0 & c_x \\\\\n  0 & f \\over dy & c_y\\\\\n  0 & 0 & 1\\\\\n  \\end{bmatrix}\n$$\n其中f表示焦距，单位mm，dx和dy分别表示图像x和y方向上每mm各占多少各像素。$ c_x c_y $表示图像坐标系中心的偏移距离，一般为图像长、宽的一半。\n\n### EXIF及其与相机内参关系\nEXIF可以通过Python库exifread读取。\n可以读取focallength即焦距，还可以读取图像的长宽。那么f和$ c_x c_y $都可以计算出来了。\n较难的是如何求dx、dy。\n\n#### 方法1\n通过exif信息读取相机型号，网上搜索对应相机的说明书，找到CCD的尺寸，若设为x、y，图像长L宽W，则$ dx = {L \\over x } $ dy同理。\n#### 方法2\nexif信息中有一项为35mm焦距，其含义为ccd为35mm时焦距的长度，则根据其比例也可先算出ccd实际尺寸，再计算dx、dy。","source":"_posts/about-camera-para-and-exif.md","raw":"---\ntitle: 通过EXIF计算相机内参\ndate: 2021-12-11 22:09:33\ntags:\n- 相机内参\n- EXIF\ncategories:\n- [学习, coding]\nmathjax: true\n---\n\n通过图片的EXIF来进行相机内参数的计算。\n\n<!-- more -->\n### 相机内参\n$$\nZp = KP{，其中p表示图像坐标系的点坐标，Z为深度，K为内参矩阵，P为空间点在相机坐标系下的坐标。}\n$$\n需要重点解决的就是相机内参矩阵K。K可以表示为\n$$\nK=\\begin{bmatrix} \n  f_x & 0 & c_x \\\\\n  0 & f_y & c_y \\\\\n  0 & 0 & 1 \\\\\n  \\end{bmatrix}\n  =\\begin{bmatrix}\n  f \\over dx & 0 & c_x \\\\\n  0 & f \\over dy & c_y\\\\\n  0 & 0 & 1\\\\\n  \\end{bmatrix}\n$$\n其中f表示焦距，单位mm，dx和dy分别表示图像x和y方向上每mm各占多少各像素。$ c_x c_y $表示图像坐标系中心的偏移距离，一般为图像长、宽的一半。\n\n### EXIF及其与相机内参关系\nEXIF可以通过Python库exifread读取。\n可以读取focallength即焦距，还可以读取图像的长宽。那么f和$ c_x c_y $都可以计算出来了。\n较难的是如何求dx、dy。\n\n#### 方法1\n通过exif信息读取相机型号，网上搜索对应相机的说明书，找到CCD的尺寸，若设为x、y，图像长L宽W，则$ dx = {L \\over x } $ dy同理。\n#### 方法2\nexif信息中有一项为35mm焦距，其含义为ccd为35mm时焦距的长度，则根据其比例也可先算出ccd实际尺寸，再计算dx、dy。","slug":"about-camera-para-and-exif","published":1,"updated":"2021-12-11T16:03:05.337Z","_id":"ckx1yzq1j0000ecw179d85wst","comments":1,"layout":"post","photos":[],"link":"","content":"<p>通过图片的EXIF来进行相机内参数的计算。</p>\n<span id=\"more\"></span>\n<h3 id=\"相机内参\"><a href=\"#相机内参\" class=\"headerlink\" title=\"相机内参\"></a>相机内参</h3><script type=\"math/tex; mode=display\">\nZp = KP{，其中p表示图像坐标系的点坐标，Z为深度，K为内参矩阵，P为空间点在相机坐标系下的坐标。}</script><p>需要重点解决的就是相机内参矩阵K。K可以表示为</p>\n<script type=\"math/tex; mode=display\">\nK=\\begin{bmatrix} \n  f_x & 0 & c_x \\\\\n  0 & f_y & c_y \\\\\n  0 & 0 & 1 \\\\\n  \\end{bmatrix}\n  =\\begin{bmatrix}\n  f \\over dx & 0 & c_x \\\\\n  0 & f \\over dy & c_y\\\\\n  0 & 0 & 1\\\\\n  \\end{bmatrix}</script><p>其中f表示焦距，单位mm，dx和dy分别表示图像x和y方向上每mm各占多少各像素。$ c_x c_y $表示图像坐标系中心的偏移距离，一般为图像长、宽的一半。</p>\n<h3 id=\"EXIF及其与相机内参关系\"><a href=\"#EXIF及其与相机内参关系\" class=\"headerlink\" title=\"EXIF及其与相机内参关系\"></a>EXIF及其与相机内参关系</h3><p>EXIF可以通过Python库exifread读取。<br>可以读取focallength即焦距，还可以读取图像的长宽。那么f和$ c_x c_y $都可以计算出来了。<br>较难的是如何求dx、dy。</p>\n<h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><p>通过exif信息读取相机型号，网上搜索对应相机的说明书，找到CCD的尺寸，若设为x、y，图像长L宽W，则$ dx = {L \\over x } $ dy同理。</p>\n<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><p>exif信息中有一项为35mm焦距，其含义为ccd为35mm时焦距的长度，则根据其比例也可先算出ccd实际尺寸，再计算dx、dy。</p>\n","site":{"data":{}},"excerpt":"<p>通过图片的EXIF来进行相机内参数的计算。</p>","more":"<h3 id=\"相机内参\"><a href=\"#相机内参\" class=\"headerlink\" title=\"相机内参\"></a>相机内参</h3><script type=\"math/tex; mode=display\">\nZp = KP{，其中p表示图像坐标系的点坐标，Z为深度，K为内参矩阵，P为空间点在相机坐标系下的坐标。}</script><p>需要重点解决的就是相机内参矩阵K。K可以表示为</p>\n<script type=\"math/tex; mode=display\">\nK=\\begin{bmatrix} \n  f_x & 0 & c_x \\\\\n  0 & f_y & c_y \\\\\n  0 & 0 & 1 \\\\\n  \\end{bmatrix}\n  =\\begin{bmatrix}\n  f \\over dx & 0 & c_x \\\\\n  0 & f \\over dy & c_y\\\\\n  0 & 0 & 1\\\\\n  \\end{bmatrix}</script><p>其中f表示焦距，单位mm，dx和dy分别表示图像x和y方向上每mm各占多少各像素。$ c_x c_y $表示图像坐标系中心的偏移距离，一般为图像长、宽的一半。</p>\n<h3 id=\"EXIF及其与相机内参关系\"><a href=\"#EXIF及其与相机内参关系\" class=\"headerlink\" title=\"EXIF及其与相机内参关系\"></a>EXIF及其与相机内参关系</h3><p>EXIF可以通过Python库exifread读取。<br>可以读取focallength即焦距，还可以读取图像的长宽。那么f和$ c_x c_y $都可以计算出来了。<br>较难的是如何求dx、dy。</p>\n<h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><p>通过exif信息读取相机型号，网上搜索对应相机的说明书，找到CCD的尺寸，若设为x、y，图像长L宽W，则$ dx = {L \\over x } $ dy同理。</p>\n<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><p>exif信息中有一项为35mm焦距，其含义为ccd为35mm时焦距的长度，则根据其比例也可先算出ccd实际尺寸，再计算dx、dy。</p>"}],"PostAsset":[{"_id":"source/_posts/about-hexo/itachi.jpg","slug":"itachi.jpg","post":"ckwcapgz000054cvh0bike1b0","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckwcapgz100074cvh3l1fgfql","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgz9000w4cvhh30u46yk"},{"post_id":"ckwcapgz100074cvh3l1fgfql","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgz9000x4cvhc4j0hqx9"},{"post_id":"ckwcapgz6000m4cvhbvlwa6ox","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgz9000z4cvh8727a2id"},{"post_id":"ckwcapgz6000m4cvhbvlwa6ox","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgza00124cvh7fx95ccw"},{"post_id":"ckwcapgyv00014cvh56448oos","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgza00154cvh82mfhs8l"},{"post_id":"ckwcapgyv00014cvh56448oos","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgza00174cvh84lr62bf"},{"post_id":"ckwcapgz8000r4cvhgdprebdy","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgzb00194cvh4emgc4vt"},{"post_id":"ckwcapgz8000r4cvhgdprebdy","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgzc001b4cvhbd4n9ig5"},{"post_id":"ckwcapgz8000u4cvh3im6g7lv","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgzc001d4cvh9ty76ge2"},{"post_id":"ckwcapgz8000u4cvh3im6g7lv","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgzc001f4cvhf2mvc4qz"},{"post_id":"ckwcapgz100084cvhhfcv0cu9","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgzc001h4cvheng7fp8s"},{"post_id":"ckwcapgz100084cvhhfcv0cu9","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgzc001i4cvh4etrf3sc"},{"post_id":"ckwcapgyy00034cvh8wb1hc6v","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgzd001l4cvh1nzza6bg"},{"post_id":"ckwcapgyy00034cvh8wb1hc6v","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgzd001m4cvh9s6j04i2"},{"post_id":"ckwcapgz3000c4cvh613c4bj0","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgzd001p4cvh30f6apba"},{"post_id":"ckwcapgz3000c4cvh613c4bj0","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgzd001r4cvhg3ytcmt9"},{"post_id":"ckwcapgz4000f4cvh1vy1aejv","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgze001v4cvh34krfhxm"},{"post_id":"ckwcapgz4000f4cvh1vy1aejv","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgze001x4cvh7ntld95e"},{"post_id":"ckwcapgz000054cvh0bike1b0","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckwcapgze00204cvhf4y20iud"},{"post_id":"ckwcapgz000054cvh0bike1b0","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckwcapgze00224cvh2ext08if"},{"post_id":"ckwcapgz5000h4cvhfves6f8g","category_id":"ckwcapgzc001g4cvh1ysvgy95","_id":"ckwcapgze00254cvh1a5e94ug"},{"post_id":"ckwcapgz5000h4cvhfves6f8g","category_id":"ckwcapgzd001o4cvh048sau1h","_id":"ckwcapgze00274cvhbdicgcgu"},{"post_id":"ckwcapgz6000l4cvh5fdm7dvy","category_id":"ckwcapgzc001g4cvh1ysvgy95","_id":"ckwcapgzf002a4cvhhuefgqvp"},{"post_id":"ckwcapgz6000l4cvh5fdm7dvy","category_id":"ckwcapgzd001o4cvh048sau1h","_id":"ckwcapgzf002b4cvh4ud045a8"},{"post_id":"ckx1yzq1j0000ecw179d85wst","category_id":"ckwcapgz000064cvhf3ybhtk3","_id":"ckx1yzq1o0003ecw1fe1m5j3l"},{"post_id":"ckx1yzq1j0000ecw179d85wst","category_id":"ckwcapgz5000j4cvh7cm236xx","_id":"ckx1yzq1o0004ecw1h2q63lk4"}],"PostTag":[{"post_id":"ckwcapgyv00014cvh56448oos","tag_id":"ckwcapgyz00044cvhhwo19nmy","_id":"ckwcapgz4000g4cvh1rt5f2hw"},{"post_id":"ckwcapgyv00014cvh56448oos","tag_id":"ckwcapgz200094cvh6hph1uvo","_id":"ckwcapgz5000i4cvh2qy1fxsl"},{"post_id":"ckwcapgyy00034cvh8wb1hc6v","tag_id":"ckwcapgz4000e4cvh2kczfv8y","_id":"ckwcapgz8000q4cvh22ohcrva"},{"post_id":"ckwcapgyy00034cvh8wb1hc6v","tag_id":"ckwcapgz5000k4cvhb3c5fxlc","_id":"ckwcapgz8000t4cvhea4n9x2d"},{"post_id":"ckwcapgz000054cvh0bike1b0","tag_id":"ckwcapgz7000o4cvha5jpbtzz","_id":"ckwcapgza00114cvh530dbbi6"},{"post_id":"ckwcapgz000054cvh0bike1b0","tag_id":"ckwcapgz9000v4cvh47y8eoco","_id":"ckwcapgza00144cvh9ghnb1z7"},{"post_id":"ckwcapgz100074cvh3l1fgfql","tag_id":"ckwcapgz900104cvh9j3p150z","_id":"ckwcapgzd001q4cvhe5hcdh6s"},{"post_id":"ckwcapgz100074cvh3l1fgfql","tag_id":"ckwcapgza00164cvh6zot01wy","_id":"ckwcapgzd001s4cvhb1ju43s3"},{"post_id":"ckwcapgz100074cvh3l1fgfql","tag_id":"ckwcapgzb001a4cvh97m65ifh","_id":"ckwcapgze001w4cvh45utgh8e"},{"post_id":"ckwcapgz100074cvh3l1fgfql","tag_id":"ckwcapgzc001e4cvhhzko3xis","_id":"ckwcapgze001y4cvhgd2q9rec"},{"post_id":"ckwcapgz100074cvh3l1fgfql","tag_id":"ckwcapgzc001j4cvh2xtof3nb","_id":"ckwcapgze00214cvh2khnduc1"},{"post_id":"ckwcapgz100084cvhhfcv0cu9","tag_id":"ckwcapgz900104cvh9j3p150z","_id":"ckwcapgze00234cvh97ea6aty"},{"post_id":"ckwcapgz100084cvhhfcv0cu9","tag_id":"ckwcapgzd001t4cvhfqag86ft","_id":"ckwcapgze00264cvhbxc8c8qd"},{"post_id":"ckwcapgz3000c4cvh613c4bj0","tag_id":"ckwcapgz900104cvh9j3p150z","_id":"ckwcapgze00284cvh601a27za"},{"post_id":"ckwcapgz4000f4cvh1vy1aejv","tag_id":"ckwcapgze00244cvh2zqn4mzg","_id":"ckwcapgzf002d4cvh2gn1dmkz"},{"post_id":"ckwcapgz4000f4cvh1vy1aejv","tag_id":"ckwcapgzf00294cvhc7e53kde","_id":"ckwcapgzf002e4cvh2rz36t8m"},{"post_id":"ckwcapgz6000m4cvhbvlwa6ox","tag_id":"ckwcapgzf002c4cvh3kyqfsz4","_id":"ckwcapgzg002h4cvhfr320vrr"},{"post_id":"ckwcapgz6000m4cvhbvlwa6ox","tag_id":"ckwcapgzf002f4cvh5f025grh","_id":"ckwcapgzg002i4cvh7vqyfpoe"},{"post_id":"ckwcapgz8000r4cvhgdprebdy","tag_id":"ckwcapgz900104cvh9j3p150z","_id":"ckwcapgzh002m4cvhfnsz3lhf"},{"post_id":"ckwcapgz8000r4cvhgdprebdy","tag_id":"ckwcapgzg002j4cvh7ty2adlt","_id":"ckwcapgzh002n4cvh5pvzejx7"},{"post_id":"ckwcapgz8000r4cvhgdprebdy","tag_id":"ckwcapgzf00294cvhc7e53kde","_id":"ckwcapgzh002p4cvheu0g3kms"},{"post_id":"ckwcapgz8000u4cvh3im6g7lv","tag_id":"ckwcapgzh002l4cvhc5aac8a0","_id":"ckwcapgzh002t4cvha7rt8oj9"},{"post_id":"ckwcapgz8000u4cvh3im6g7lv","tag_id":"ckwcapgzh002o4cvhb60jbjqw","_id":"ckwcapgzi002u4cvh8s137wk4"},{"post_id":"ckwcapgz8000u4cvh3im6g7lv","tag_id":"ckwcapgzf00294cvhc7e53kde","_id":"ckwcapgzi002v4cvhb07f6to6"},{"post_id":"ckwcapgz8000u4cvh3im6g7lv","tag_id":"ckwcapgzg002j4cvh7ty2adlt","_id":"ckwcapgzi002w4cvh53hmga39"},{"post_id":"ckwcapgz8000u4cvh3im6g7lv","tag_id":"ckwcapgzh002s4cvhfq7gb95y","_id":"ckwcapgzi002x4cvhgnr6a6id"},{"post_id":"ckx1yzq1j0000ecw179d85wst","tag_id":"ckx1yzq1l0001ecw1gtwwhy20","_id":"ckx1yzq1o0005ecw1998tfdr2"},{"post_id":"ckx1yzq1j0000ecw179d85wst","tag_id":"ckx1yzq1o0002ecw14se95104","_id":"ckx1yzq1p0006ecw1fi10bt2b"}],"Tag":[{"name":"C++","_id":"ckwcapgyz00044cvhhwo19nmy"},{"name":"STL","_id":"ckwcapgz200094cvh6hph1uvo"},{"name":"git","_id":"ckwcapgz4000e4cvh2kczfv8y"},{"name":"github","_id":"ckwcapgz5000k4cvhb3c5fxlc"},{"name":"Hexo","_id":"ckwcapgz7000o4cvha5jpbtzz"},{"name":"Next","_id":"ckwcapgz9000v4cvh47y8eoco"},{"name":"python","_id":"ckwcapgz900104cvh9j3p150z"},{"name":"tuple","_id":"ckwcapgza00164cvh6zot01wy"},{"name":"list","_id":"ckwcapgzb001a4cvh97m65ifh"},{"name":"ndarray","_id":"ckwcapgzc001e4cvhhzko3xis"},{"name":"numpy","_id":"ckwcapgzc001j4cvh2xtof3nb"},{"name":"matplotlib","_id":"ckwcapgzd001t4cvhfqag86ft"},{"name":"tensorboard","_id":"ckwcapgze00244cvh2zqn4mzg"},{"name":"pytorch","_id":"ckwcapgzf00294cvhc7e53kde"},{"name":"torch","_id":"ckwcapgzf002c4cvh3kyqfsz4"},{"name":"dataenhance","_id":"ckwcapgzf002f4cvh5f025grh"},{"name":"dataloader","_id":"ckwcapgzg002j4cvh7ty2adlt"},{"name":"tensorflow","_id":"ckwcapgzh002l4cvhc5aac8a0"},{"name":"tfrecords","_id":"ckwcapgzh002o4cvhb60jbjqw"},{"name":"iterator","_id":"ckwcapgzh002s4cvhfq7gb95y"},{"name":"相机内参","_id":"ckx1yzq1l0001ecw1gtwwhy20"},{"name":"EXIF","_id":"ckx1yzq1o0002ecw14se95104"}]}}